{"ast":null,"code":"const _pi6 = Math.PI / 6; //30deg\n// const _pi2 = Math.PI / 2;   //90deg\n// const _3pi2 = 3 * _pi2;     //270deg\n\n\nconst _2pi = 2 * Math.PI; //360deg\n\n\nfunction getAngle(x1, y1, x2, y2) {\n  let dx = x2 - x1;\n  let dy = y2 - y1;\n  return Math.atan2(dy, dx);\n}\n\nfunction normalizeDegree(deg) {\n  if (deg > 360) deg %= 360;else if (deg < 0) deg = deg % 360 + 360;\n  return deg;\n}\n\nfunction normalizeRadian(rad) {\n  if (rad > _2pi) rad %= _2pi;else if (rad < 0) rad = rad % _2pi + _2pi;\n  return rad;\n} // function rad2Deg(rad) {\n//     return 180 * rad / Math.PI;\n// }\n\n\nfunction deg2Rad(deg) {\n  return Math.PI * normalizeDegree(deg) / 180;\n}\n\nexport class Circle extends Shape {\n  setRadius(radius) {\n    this.r = radius;\n    return this;\n  }\n\n  getExternalPoint(angle, gap) {\n    let c = this.getPosition();\n    return [c[0] + (this.r + gap) * Math.cos(angle), c[1] + (this.r + gap) * Math.sin(angle)];\n  }\n\n  render(canvasCtx) {\n    canvasCtx.beginPath();\n    let c = this.getPosition();\n    canvasCtx.arc(c[0], c[1], this.r, 0, _2pi);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n}\nexport class Line extends Shape {\n  constructor() {\n    super();\n    this.setStrokeWidth(1);\n  }\n  /**\n   * @param shape1 shape 1\n   * @param shape2 shape 2\n   * @param gap the gap between line and target shapes. gap>=0\n   */\n\n\n  between(shape1, shape2, gap = 0) {\n    let c1 = shape1.getCenterPoint();\n    let c2 = shape2.getCenterPoint();\n    c1 = shape1.getExternalPoint(getAngle(c1[0], c1[1], c2[0], c2[1]), gap);\n    c2 = shape2.getExternalPoint(getAngle(c2[0], c2[1], c1[0], c1[1]), gap);\n    this.setPosition(c1);\n    this.lineTo(c2);\n    return this;\n  }\n  /**\n   * @param point [x,y] or [intR, length] for radian or [intD, length] for degree\n   */\n\n\n  lineTo(point) {\n    if (typeof point[0] === 'string') {\n      let i = point[0].length - 1;\n      let c = point[0][i];\n      let v = Number(point[0].substring(0, i));\n\n      if (c === 'R' || c === 'r') {\n        this.secondP = this.getTargetPoint(v, point[1]);\n      } else if (c === 'D' || c === 'd') {\n        this.secondP = this.getTargetPoint(deg2Rad(v), point[1]);\n      } else {\n        throw new Error('wrong input');\n      }\n    } else {\n      this.secondP = point;\n    }\n  }\n\n  getTargetPoint(r, d) {\n    let p = this.getPosition();\n    return [p[0] + Math.cos(r) * d, p[1] + Math.sin(r) * d];\n  }\n\n  getCenterPoint() {\n    let p = this.getPosition();\n    return [(p[0] + this.secondP[0]) / 2, (p[1] + this.secondP[1]) / 2];\n  }\n  /**\n   * show arrows on the line\n   * @param direction 0 or 1\n   * @param places array of float values, each is 0 - 1;\n   * @return Shape\n   */\n\n\n  showArrow(direction, places) {\n    this.direction = direction;\n    this.places = places;\n    return this;\n  }\n\n  drawArrow(canvasCtx, length, angle, x, y) {\n    canvasCtx.beginPath();\n    let p1 = [x + length * Math.cos(angle - _pi6), y + length * Math.sin(angle - _pi6)];\n    let p2 = [x + length * Math.cos(angle + _pi6), y + length * Math.sin(angle + _pi6)];\n    canvasCtx.moveTo(x, y);\n    canvasCtx.lineTo(p1[0], p1[1]);\n    canvasCtx.lineTo(p2[0], p2[1]);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n  render(canvasCtx) {\n    let p1 = this.getPosition();\n    canvasCtx.beginPath();\n    canvasCtx.moveTo(p1[0], p1[1]);\n    canvasCtx.lineTo(this.secondP[0], this.secondP[1]);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n\n    if (this.direction !== undefined && this.places !== undefined) {\n      if (!this.places[0]) this.places = [this.places];\n      let angle = this.direction ? getAngle(this.secondP[0], this.secondP[1], p1[0], p1[1]) : getAngle(p1[0], p1[1], this.secondP[0], this.secondP[1]);\n\n      for (let i = 0; i < this.places.length; i++) {\n        let x = p1[0] + (this.secondP[0] - p1[0]) * this.places[i];\n        let y = p1[1] + (this.secondP[1] - p1[1]) * this.places[i];\n        this.drawArrow(canvasCtx, 10, angle, x, y);\n      }\n    }\n  }\n\n}\nexport class Rectangle extends Shape {\n  setWidth(width) {\n    this.width = width;\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = height;\n    return this;\n  }\n\n  getCenterPoint() {\n    let p = this.getPosition();\n    return [p[0] + this.width / 2, p[1] + this.height / 2];\n  }\n\n  getExternalPoint(angle, gap) {\n    let c = this.getCenterPoint();\n    let p = this.getPosition();\n    let rbc = getAngle(c[0], c[1], p[0] + this.width, p[1] + this.height); //right-bottom corner\n\n    let lbc = Math.PI - rbc; //left-bottom corner\n\n    let ltc = Math.PI + rbc; //left-top corner\n\n    let rtc = _2pi - rbc; //right-top corner\n\n    angle = normalizeRadian(angle); //get angle between 0 - ~629\n\n    if (angle >= rbc && angle < lbc) {\n      //cross bottom edge\n      return this.getTBTarget(c, angle, gap, 1);\n    } else if (angle >= lbc && angle < ltc) {\n      //cross left edge\n      return this.getLRTarget(c, angle, gap, -1);\n    } else if (angle >= ltc && angle < rtc) {\n      //cross top edge\n      return this.getTBTarget(c, angle, gap, -1);\n    } else {\n      //cross right edge\n      return this.getLRTarget(c, angle, gap, 1);\n    }\n  }\n\n  getTBTarget(c, angle, gap, sign) {\n    let l = this.height / 2 / Math.sin(angle);\n    l += sign * gap;\n    return [c[0] + sign * l * Math.cos(angle), c[1] + sign * l * Math.sin(angle)];\n  }\n\n  getLRTarget(c, angle, gap, sign) {\n    let l = this.width / 2 / Math.cos(angle);\n    l += sign * gap;\n    return [c[0] + sign * l * Math.cos(angle), c[1] + sign * l * Math.sin(angle)];\n  }\n\n  render(canvasCtx) {\n    canvasCtx.beginPath();\n    let p = this.getPosition();\n    canvasCtx.rect(p[0], p[1], this.width, this.height);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n}\nexport class DrawBox {\n  constructor() {\n    this.lst = [];\n  }\n\n  addShape(shape) {\n    this.lst.push(shape);\n    return this;\n  }\n\n  render(canvas) {\n    let ctx = canvas.getContext('2d');\n    this.lst.forEach(v => v.render(ctx));\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/draw-box.js"],"names":["_pi6","Math","PI","_2pi","getAngle","x1","y1","x2","y2","dx","dy","atan2","normalizeDegree","deg","normalizeRadian","rad","deg2Rad","Circle","Shape","setRadius","radius","r","getExternalPoint","angle","gap","c","getPosition","cos","sin","render","canvasCtx","beginPath","arc","closePath","Line","constructor","setStrokeWidth","between","shape1","shape2","c1","getCenterPoint","c2","setPosition","lineTo","point","i","length","v","Number","substring","secondP","getTargetPoint","Error","d","p","showArrow","direction","places","drawArrow","x","y","p1","p2","moveTo","undefined","Rectangle","setWidth","width","setHeight","height","rbc","lbc","ltc","rtc","getTBTarget","getLRTarget","sign","l","rect","DrawBox","lst","addShape","shape","push","canvas","ctx","getContext","forEach"],"mappings":"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","sourcesContent":["const _pi6 = Math.PI / 6;   //30deg\n// const _pi2 = Math.PI / 2;   //90deg\n// const _3pi2 = 3 * _pi2;     //270deg\nconst _2pi = 2 * Math.PI;   //360deg\n\nfunction getAngle(x1, y1, x2, y2) {\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n    return Math.atan2(dy, dx);\n}\n\nfunction normalizeDegree(deg) {\n    if (deg > 360)\n        deg %= 360;\n    else if (deg < 0)\n        deg = deg % 360 + 360;\n    return deg;\n}\n\nfunction normalizeRadian(rad) {\n    if (rad > _2pi)\n        rad %= _2pi;\n    else if (rad < 0)\n        rad = rad % _2pi + _2pi;\n    return rad;\n}\n\n// function rad2Deg(rad) {\n//     return 180 * rad / Math.PI;\n// }\n\nfunction deg2Rad(deg) {\n    return Math.PI * normalizeDegree(deg) / 180;\n}\n\n\n\nexport class Circle extends Shape {\n\n    setRadius(radius) {\n        this.r = radius;\n        return this;\n    }\n\n    getExternalPoint(angle, gap) {\n        let c = this.getPosition();\n        return [c[0] + (this.r + gap) * Math.cos(angle), c[1] + (this.r + gap) * Math.sin(angle)]\n    }\n\n    render(canvasCtx) {\n        canvasCtx.beginPath();\n        let c = this.getPosition();\n        canvasCtx.arc(c[0], c[1], this.r, 0, _2pi);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n}\n\nexport class Line extends Shape {\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n    }\n\n    /**\n     * @param shape1 shape 1\n     * @param shape2 shape 2\n     * @param gap the gap between line and target shapes. gap>=0\n     */\n    between(shape1, shape2, gap = 0) {\n        let c1 = shape1.getCenterPoint();\n        let c2 = shape2.getCenterPoint();\n        c1 = shape1.getExternalPoint(getAngle(c1[0], c1[1], c2[0], c2[1]), gap);\n        c2 = shape2.getExternalPoint(getAngle(c2[0], c2[1], c1[0], c1[1]), gap);\n        this.setPosition(c1);\n        this.lineTo(c2);\n        return this;\n    }\n\n    /**\n     * @param point [x,y] or [intR, length] for radian or [intD, length] for degree\n     */\n    lineTo(point) {\n        if (typeof point[0] === 'string') {\n            let i = point[0].length - 1;\n            let c = point[0][i];\n            let v = Number(point[0].substring(0, i));\n            if (c === 'R' || c === 'r') {\n                this.secondP = this.getTargetPoint(v, point[1]);\n            } else if (c === 'D' || c === 'd') {\n                this.secondP = this.getTargetPoint(deg2Rad(v), point[1]);\n            } else {\n                throw new Error('wrong input');\n            }\n        } else {\n            this.secondP = point;\n        }\n    }\n\n    getTargetPoint(r, d) {\n        let p = this.getPosition();\n        return [p[0] + Math.cos(r) * d, p[1] + Math.sin(r) * d];\n    }\n\n    getCenterPoint() {\n        let p = this.getPosition();\n        return [(p[0] + this.secondP[0]) / 2, (p[1] + this.secondP[1]) / 2]\n    }\n\n    /**\n     * show arrows on the line\n     * @param direction 0 or 1\n     * @param places array of float values, each is 0 - 1;\n     * @return Shape\n     */\n    showArrow(direction, places) {\n        this.direction = direction;\n        this.places = places;\n        return this;\n    }\n\n    drawArrow(canvasCtx, length, angle, x, y) {\n        canvasCtx.beginPath();\n        let p1 = [x + length * Math.cos(angle - _pi6), y + length * Math.sin(angle - _pi6)];\n        let p2 = [x + length * Math.cos(angle + _pi6), y + length * Math.sin(angle + _pi6)];\n        canvasCtx.moveTo(x, y);\n        canvasCtx.lineTo(p1[0], p1[1]);\n        canvasCtx.lineTo(p2[0], p2[1]);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n\n    render(canvasCtx) {\n        let p1 = this.getPosition();\n        canvasCtx.beginPath();\n        canvasCtx.moveTo(p1[0], p1[1]);\n        canvasCtx.lineTo(this.secondP[0], this.secondP[1]);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n        if (this.direction !== undefined && this.places !== undefined) {\n            if (!this.places[0])\n                this.places = [this.places];\n            let angle = this.direction ? getAngle(this.secondP[0], this.secondP[1], p1[0], p1[1]) : getAngle(p1[0], p1[1], this.secondP[0], this.secondP[1]);\n            for (let i = 0; i < this.places.length; i++) {\n                let x = p1[0] + (this.secondP[0] - p1[0]) * this.places[i];\n                let y = p1[1] + (this.secondP[1] - p1[1]) * this.places[i];\n                this.drawArrow(canvasCtx, 10, angle, x, y);\n            }\n        }\n    }\n}\n\nexport class Rectangle extends Shape {\n\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n\n    getCenterPoint() {\n        let p = this.getPosition();\n        return [p[0] + this.width / 2, p[1] + this.height / 2]\n    }\n\n    getExternalPoint(angle, gap) {\n        let c = this.getCenterPoint();\n        let p = this.getPosition();\n        let rbc = getAngle(c[0], c[1], p[0] + this.width, p[1] + this.height);//right-bottom corner\n        let lbc = Math.PI - rbc;//left-bottom corner\n        let ltc = Math.PI + rbc;//left-top corner\n        let rtc = _2pi - rbc;//right-top corner\n\n        angle = normalizeRadian(angle);//get angle between 0 - ~629\n\n        if (angle >= rbc && angle < lbc) {//cross bottom edge\n            return this.getTBTarget(c, angle, gap, 1);\n        } else if (angle >= lbc && angle < ltc) {//cross left edge\n            return this.getLRTarget(c, angle, gap, -1);\n        } else if (angle >= ltc && angle < rtc) {//cross top edge\n            return this.getTBTarget(c, angle, gap, -1);\n        } else {//cross right edge\n            return this.getLRTarget(c, angle, gap, 1);\n        }\n    }\n\n    getTBTarget(c, angle, gap, sign) {\n        let l = (this.height / 2) / Math.sin(angle);\n        l += sign * gap;\n        return [c[0] + sign * l * Math.cos(angle), c[1] + sign * l * Math.sin(angle)];\n    }\n\n    getLRTarget(c, angle, gap, sign) {\n        let l = (this.width / 2) / Math.cos(angle)\n        l += sign * gap;\n        return [c[0] + sign * l * Math.cos(angle), c[1] + sign * l * Math.sin(angle)];\n    }\n\n    render(canvasCtx) {\n        canvasCtx.beginPath();\n        let p = this.getPosition();\n        canvasCtx.rect(p[0], p[1], this.width, this.height);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n}\n\nexport class DrawBox {\n    lst = [];\n\n    addShape(shape) {\n        this.lst.push(shape);\n        return this;\n    }\n\n    render(canvas) {\n        let ctx = canvas.getContext('2d');\n        this.lst.forEach(v => v.render(ctx));\n    }\n}"]},"metadata":{},"sourceType":"module"}