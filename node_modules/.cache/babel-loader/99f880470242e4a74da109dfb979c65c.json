{"ast":null,"code":"import { Text } from \"./simple/shape\";\nimport { Circle } from \"./simple/circle\";\nimport { Rectangle } from \"./simple/rectangle\";\nimport { DrawBox } from \"./draw-box\";\nimport { WrapperHVector, WrapperLine, WrapperVector, WrapperVLine } from \"./wrappered/wrapper-line\";\nimport { WrapperNode } from \"./wrappered/wrapper-node\";\nimport { WrapperCaption } from \"./wrappered/wrapper-caption\";\nimport Dot from \"./simple/dot\";\nimport { WrapperPath } from \"./wrappered/wrapper-path\";\nimport { Type } from \"./simple/type\";\nimport { WrapperTypeRel } from \"./wrappered/wrapper-type-rel\";\nexport class DrawBoxWrapper {\n  constructor() {\n    this.METHOD_POINTERS = {\n      text: () => new Text(),\n      circle: () => new Circle(),\n      line: () => new WrapperLine(this),\n      rect: () => new Rectangle(),\n      node: () => new WrapperNode(this),\n      cap: () => new WrapperCaption(this),\n      hline: () => new WrapperLine(this),\n      vline: () => new WrapperVLine(this),\n      vect: () => new WrapperVector(this),\n      hvect: () => new WrapperHVector(this),\n      dot: () => new Dot(),\n      path: () => new WrapperPath(this),\n      type: () => new Type(),\n      typerel: () => new WrapperTypeRel(this),\n      label: (d, o) => o.setLabel(d),\n      color: (d, o) => o.setColor(d),\n      fillColor: (d, o) => o.setFillColor(d),\n      strokeColor: (d, o) => o.setStrokeColor(d),\n      strokeWidth: (d, o) => o.setStrokeWidth(d),\n      strokeStyle: (d, o) => o.setStrokeStyle(d),\n      radius: (d, o) => o.setRadius(d),\n      fontSize: (d, o) => o.setFontSize(d),\n      fontStyle: (d, o) => o.setFontStyle(d),\n      start: (d, o) => o.setStart(d),\n      end: (d, o) => o.setEnd(d),\n      qCurve: (d, o) => o.setQuadraticPoint(d),\n      arrow: (d, o) => o.showArrow(d[0], d[1]),\n      len: (d, o) => o.setLength(d),\n      between: (d, o) => o.between(d[0], d[1], d[2]),\n      width: (d, o) => o.setWidth(d),\n      height: (d, o) => o.setHeight(d),\n      conn: (d, o) => o.connectTo(d),\n      captions: (d, o) => o.setCaptions(d),\n      lineTo: (d, o) => o.lineTo(d),\n      curveTo: (d, o) => o.quadraticTo(d[0], d[1]),\n      t: (d, o) => o.setType(d),\n      p: (d, o) => o.setPath(d)\n    };\n    this.drawBox = new DrawBox();\n    this.container = {};\n  }\n  /**\n   * @param itemConf it is an object with fields:<br/>\n   * {\n   *    shape: ['text', 'circle', 'line', 'rect', 'node', 'cap', 'hline', 'vline', 'vect', 'hvect','dot','path', 'type', 'typerel']<br/>\n   *\n   *    --- generic ------<br/>\n   *    id: string<br/>\n   *    pos: [x, y]<br/>\n   *    align: shape<br/>\n   *    offset: [dx, dy]<br/>\n   *    label: [string, Text-object<br/>\n   *    color: ['green', 'blue', 'red', 'yellow', 'purple', 'brown', 'orange', 'pink', 'black', 'white'], (set fill & stroke together)<br/>\n   *    fillColor: color<br/>\n   *    strokeColor: color<br/>\n   *    strokeWidth: int<br/>\n   *    strokeStyle: [int, int], (make stroke dashed)<br/>\n   *\n   *    --- circle ------<br/>\n   *    radius: int<br/>\n   *\n   *    --- Text ------<br/>\n   *    fontSize: value, (ex. '20px' or '12em'<br/>\n   *    fontStyle: ['bold', 'italic', 'bold italic'<br/>\n   *\n   *    --- all line types except path ------<br/>\n   *    start, end ,qCurve: [x,y] or [intR, length] or [intD, length] or [shapeId, gap]<br/>\n   *    arrow: [dir([true, false]), places([0 - 1])]<br/>\n   *    between: [id1, id2, gap]<br/>\n   *\n   *    --- hline & vline & hvect ------<br/>\n   *    len: int<br/>\n   *\n   *    --- path ------<br/>\n   *    p: 'm x y':moveTo([x,y]) | 'l x y':lineTo([x,y]) | 'q x y':quadraticTo([x,y]) | 'o ox oy':offset([ox,oy])<br/>\n   *    t: 'ii' | 'i@' | 'ci' | 'cc' | 'c@' (sides of a relationship)<br/>\n   *\n   *    --- typerel ------<br/>\n   *    between: [[shapeId1,offsetX,offsetY],[shapeId2,offsetX,offsetY],[gap,'|' or '_']]<br/>\n   *    t:'ii' | 'i@' | 'ci' | 'cc' | 'c@' (sides of a relationship)<br/>\n   *\n   *    --- rectangle ------<br/>\n   *    width: int<br/>\n   *    height: int<br/>\n   *\n   *    --- type ------<br/>\n   *    t: 'c' for 'class', 'i' for 'interface', '@' for 'annotation'<br/>\n   *    width: int<br/>\n   *\n   *    --- node & cap ------<br/>\n   *    conn: ref-id. (connect to the aligned shape)<br/>\n   *    captions: [{t:string, c: 'color string', w:width, offset:[x=0,y=0]}]<br/>\n   * }\n   */\n\n\n  addShape(itemConf) {\n    this.drawBox.addShape(this.generateShape(itemConf));\n    return this;\n  }\n\n  addDirectShape(shape) {\n    this.drawBox.addShape(shape);\n    return this;\n  }\n\n  generateShape(itemConf) {\n    let o = this.METHOD_POINTERS[itemConf.shape](itemConf);\n    this.initShape(itemConf, o);\n    let t;\n\n    for (t in itemConf) if (t !== 'shape' && t !== 'id' && t !== 'pos' && t !== 'align' && t !== 'offset') this.METHOD_POINTERS[t](itemConf[t], o);\n\n    return o;\n  }\n\n  initShape(conf, o) {\n    if (conf.id) this.container[conf.id] = o;\n    if (conf.pos) o.setPosition(conf.pos);\n    if (conf.align) o.alignTo(this.container[conf.align]);\n\n    if (conf.offset) {\n      o.setOffset(conf.offset);\n    }\n\n    return o;\n  }\n\n  getTargetShape(id) {\n    return this.container[id];\n  }\n\n  render(canvas) {\n    this.drawBox.render(canvas);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/draw-box-wrapper.js"],"names":["Text","Circle","Rectangle","DrawBox","WrapperHVector","WrapperLine","WrapperVector","WrapperVLine","WrapperNode","WrapperCaption","Dot","WrapperPath","Type","WrapperTypeRel","DrawBoxWrapper","constructor","METHOD_POINTERS","text","circle","line","rect","node","cap","hline","vline","vect","hvect","dot","path","type","typerel","label","d","o","setLabel","color","setColor","fillColor","setFillColor","strokeColor","setStrokeColor","strokeWidth","setStrokeWidth","strokeStyle","setStrokeStyle","radius","setRadius","fontSize","setFontSize","fontStyle","setFontStyle","start","setStart","end","setEnd","qCurve","setQuadraticPoint","arrow","showArrow","len","setLength","between","width","setWidth","height","setHeight","conn","connectTo","captions","setCaptions","lineTo","curveTo","quadraticTo","t","setType","p","setPath","drawBox","container","addShape","itemConf","generateShape","addDirectShape","shape","initShape","conf","id","pos","setPosition","align","alignTo","offset","setOffset","getTargetShape","render","canvas"],"mappings":"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","sourcesContent":["import {Text} from \"./simple/shape\";\nimport {Circle} from \"./simple/circle\";\nimport {Rectangle} from \"./simple/rectangle\";\nimport {DrawBox} from \"./draw-box\";\nimport {WrapperHVector, WrapperLine, WrapperVector, WrapperVLine} from \"./wrappered/wrapper-line\";\nimport {WrapperNode} from \"./wrappered/wrapper-node\";\nimport {WrapperCaption} from \"./wrappered/wrapper-caption\";\nimport Dot from \"./simple/dot\";\nimport {WrapperPath} from \"./wrappered/wrapper-path\";\nimport {Type} from \"./simple/type\";\nimport {WrapperTypeRel} from \"./wrappered/wrapper-type-rel\";\n\nexport class DrawBoxWrapper {\n    const\n    METHOD_POINTERS = {\n        text: () => new Text(),\n        circle: () => new Circle(),\n        line: () => new WrapperLine(this),\n        rect: () => new Rectangle(),\n        node: () => new WrapperNode(this),\n        cap: () => new WrapperCaption(this),\n        hline: () => new WrapperLine(this),\n        vline: () => new WrapperVLine(this),\n        vect: () => new WrapperVector(this),\n        hvect: () => new WrapperHVector(this),\n        dot: () => new Dot(),\n        path: () => new WrapperPath(this),\n        type: () => new Type(),\n        typerel: () => new WrapperTypeRel(this),\n        label: (d, o) => o.setLabel(d),\n        color: (d, o) => o.setColor(d),\n        fillColor: (d, o) => o.setFillColor(d),\n        strokeColor: (d, o) => o.setStrokeColor(d),\n        strokeWidth: (d, o) => o.setStrokeWidth(d),\n        strokeStyle: (d, o) => o.setStrokeStyle(d),\n        radius: (d, o) => o.setRadius(d),\n        fontSize: (d, o) => o.setFontSize(d),\n        fontStyle: (d, o) => o.setFontStyle(d),\n        start: (d, o) => o.setStart(d),\n        end: (d, o) => o.setEnd(d),\n        qCurve: (d, o) => o.setQuadraticPoint(d),\n        arrow: (d, o) => o.showArrow(d[0], d[1]),\n        len: (d, o) => o.setLength(d),\n        between: (d, o) => o.between(d[0], d[1], d[2]),\n        width: (d, o) => o.setWidth(d),\n        height: (d, o) => o.setHeight(d),\n        conn: (d, o) => o.connectTo(d),\n        captions: (d, o) => o.setCaptions(d),\n        lineTo: (d, o) => o.lineTo(d),\n        curveTo: (d, o) => o.quadraticTo(d[0], d[1]),\n        t: (d, o) => o.setType(d),\n        p: (d, o) => o.setPath(d),\n    };\n\n    constructor() {\n        this.drawBox = new DrawBox();\n        this.container = {};\n    }\n\n    /**\n     * @param itemConf it is an object with fields:<br/>\n     * {\n     *    shape: ['text', 'circle', 'line', 'rect', 'node', 'cap', 'hline', 'vline', 'vect', 'hvect','dot','path', 'type', 'typerel']<br/>\n     *\n     *    --- generic ------<br/>\n     *    id: string<br/>\n     *    pos: [x, y]<br/>\n     *    align: shape<br/>\n     *    offset: [dx, dy]<br/>\n     *    label: [string, Text-object<br/>\n     *    color: ['green', 'blue', 'red', 'yellow', 'purple', 'brown', 'orange', 'pink', 'black', 'white'], (set fill & stroke together)<br/>\n     *    fillColor: color<br/>\n     *    strokeColor: color<br/>\n     *    strokeWidth: int<br/>\n     *    strokeStyle: [int, int], (make stroke dashed)<br/>\n     *\n     *    --- circle ------<br/>\n     *    radius: int<br/>\n     *\n     *    --- Text ------<br/>\n     *    fontSize: value, (ex. '20px' or '12em'<br/>\n     *    fontStyle: ['bold', 'italic', 'bold italic'<br/>\n     *\n     *    --- all line types except path ------<br/>\n     *    start, end ,qCurve: [x,y] or [intR, length] or [intD, length] or [shapeId, gap]<br/>\n     *    arrow: [dir([true, false]), places([0 - 1])]<br/>\n     *    between: [id1, id2, gap]<br/>\n     *\n     *    --- hline & vline & hvect ------<br/>\n     *    len: int<br/>\n     *\n     *    --- path ------<br/>\n     *    p: 'm x y':moveTo([x,y]) | 'l x y':lineTo([x,y]) | 'q x y':quadraticTo([x,y]) | 'o ox oy':offset([ox,oy])<br/>\n     *    t: 'ii' | 'i@' | 'ci' | 'cc' | 'c@' (sides of a relationship)<br/>\n     *\n     *    --- typerel ------<br/>\n     *    between: [[shapeId1,offsetX,offsetY],[shapeId2,offsetX,offsetY],[gap,'|' or '_']]<br/>\n     *    t:'ii' | 'i@' | 'ci' | 'cc' | 'c@' (sides of a relationship)<br/>\n     *\n     *    --- rectangle ------<br/>\n     *    width: int<br/>\n     *    height: int<br/>\n     *\n     *    --- type ------<br/>\n     *    t: 'c' for 'class', 'i' for 'interface', '@' for 'annotation'<br/>\n     *    width: int<br/>\n     *\n     *    --- node & cap ------<br/>\n     *    conn: ref-id. (connect to the aligned shape)<br/>\n     *    captions: [{t:string, c: 'color string', w:width, offset:[x=0,y=0]}]<br/>\n     * }\n     */\n    addShape(itemConf) {\n        this.drawBox.addShape(this.generateShape(itemConf));\n        return this;\n    }\n\n    addDirectShape(shape) {\n        this.drawBox.addShape(shape);\n        return this;\n    }\n\n    generateShape(itemConf) {\n        let o = this.METHOD_POINTERS[itemConf.shape](itemConf);\n        this.initShape(itemConf, o);\n        let t;\n        for (t in itemConf)\n            if (t !== 'shape' && t !== 'id' && t !== 'pos' && t !== 'align' && t !== 'offset')\n                this.METHOD_POINTERS[t](itemConf[t], o);\n        return o;\n    }\n\n    initShape(conf, o) {\n        if (conf.id)\n            this.container[conf.id] = o;\n        if (conf.pos)\n            o.setPosition(conf.pos);\n        if (conf.align)\n            o.alignTo(this.container[conf.align]);\n        if (conf.offset) {\n            o.setOffset(conf.offset);\n        }\n        return o;\n    }\n\n    getTargetShape(id) {\n        return this.container[id];\n    }\n\n    render(canvas) {\n        this.drawBox.render(canvas);\n    }\n}"]},"metadata":{},"sourceType":"module"}