{"ast":null,"code":"import { Shape } from \"./shape\";\nimport { Line } from \"./line\";\nexport class Path extends Shape {\n  constructor() {\n    super();\n    this.points = [];\n    this.setStrokeWidth(1);\n    this.offset2 = [0, 0];\n  }\n  /**\n   * @param point [x,y]\n   */\n\n\n  setStart(point) {\n    this.points[0] = point;\n    return this;\n  }\n  /**\n   * NOTICE TO KEEP AN SPACE BETWEEN EACH INPUT<br/>\n   *\n   * ox and oy are optional<br/>\n   * ox: offset x<br/>\n   * oy: offset y<br/><br/>\n   *\n   * input format:<br/>\n   *\n   * a pair of [x, y]:<br/>\n   *      [num, num] for exact location. ex: 12.5, 300<br/>\n   *      [numR, length] for radian, [numD, length] for degree. ex: [180d, 100] or [3.1415r, 100]<br/>\n   *      [shape, gap] for reference to a shape. ex: [new Circle()..., 10]<br/>\n   *\n   * a pair of [ox, oy]: [num, num]. ex: [15, 30]<br/>\n   *\n   * @param path 'm x y [ox oy]':moveTo(x, y, ox, oy), 'l x y [ox oy]':lineTo(x, y, ox, oy), 'q cx cy x y [ox oy]':quadraticTo(curveX, curveY, x, y, ox, oy)\n   */\n\n\n  path(path) {\n    let arr = path.split('/ +/g');\n    let l = arr.length;\n    let mem = null;\n    let offset = null;\n    let t1, t2;\n\n    for (let i = 0; i < l; i++) {\n      switch (arr[i]) {\n        case 'm':\n          mem = {\n            p: [arr[i + 1], arr[i + 2]],\n            offset: this.getOffset(arr, i + 3)\n          };\n          i += mem.offset != null ? 4 : 2;\n          break;\n\n        case 'l':\n          t1 = new Line().setEnd(arr[i + 1], arr[i + 2]);\n\n          if (mem != null) {\n            t1.setStart(mem.p);\n            t1.setOffset(mem.offset);\n          } else {\n            t1.setStart(this.points[this.points.length - 1].getEnd());\n          }\n\n          this.points.push({\n            line: t1,\n            len: t1.getLength()\n          });\n          i += 2;\n          break;\n\n        case 'q':\n          break;\n\n        default:\n          throw new Error('Wrong input');\n      }\n    }\n  }\n\n  getOffset(arr, index) {\n    let c = arr[index];\n    return c !== 'm' && c !== 'l' && c !== 'q' ? [c, arr[index + 1]] : null;\n  }\n  /**\n   * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   */\n\n\n  getLineTo(start, end, offset1 = [0, 0], offset2 = [0, 0]) {\n    return new Line().setStart(start).setEnd(end).setOffset(offset1).setOffset2(offset2);\n  }\n  /**\n   * @param curve [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   * @param end [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   */\n\n\n  getQuadraticTo(start, curve, end, offset1 = [0, 0], offset2 = [0, 0]) {\n    new Line().setStart(start).setQuadraticPoint(curve).setEnd(end).setOffset(offset1).setOffset2(offset2);\n  }\n  /**\n   * show arrows on the line\n   * @param direction 0 or 1\n   * @param places array of float values, each is 0 - 1;\n   * @return Shape\n   */\n\n\n  showArrow(direction, places) {\n    this.direction = direction;\n    this.places = typeof places === 'number' ? [places] : places;\n    return this;\n  }\n\n  render(canvasCtx) {\n    this.prepareLines();\n\n    for (let i = 1; i < this.points.length; i++) {\n      this.points[i].render(canvasCtx);\n    }\n  }\n\n  prepareLines() {\n    let lengths = [0]; // extract each line length to determine exact place of arrow\n    //prepare lines. connect lines to each other\n\n    this.points[1].setOffset(this.offset);\n    this.points[this.points.length - 1].setOffset2(this.offset2);\n    this.points[1].setStart(this.points[0]);\n    this.initLine(this.points[1]);\n    lengths.push(this.points[1].getLength());\n\n    for (let i = 2; i < this.points.length; i++) {\n      this.points[i].setStart(this.points[i - 1].getEnd());\n      this.initLine(this.points[i]);\n      lengths.push(lengths[i - 1] + this.points[i].getLength());\n    } //deter mine arrow position\n\n\n    if (this.places != null && this.places.length > 0) {\n      let repo = this.getDistributedArrowPlaces(lengths);\n\n      for (let k in repo) {\n        this.points[repo[k].key + 1].showArrow(this.direction, repo[k].items);\n      }\n    }\n  }\n\n  getDistributedArrowPlaces(lengths) {\n    let max = lengths[lengths.length - 1];\n    let p, temp;\n    let repo = [];\n\n    for (let i = 0; i < this.places.length; i++) {\n      p = this.places[i] * max;\n\n      for (let j = 0; j < lengths.length - 1; j++) {\n        if (p >= lengths[j] && p <= lengths[j + 1]) {\n          temp = this.getRepoObject(repo, j);\n          temp.items.push((p - lengths[j]) / (lengths[j + 1] - lengths[j]));\n          break;\n        }\n      }\n    }\n\n    return repo;\n  }\n\n  getRepoObject(repo, key) {\n    if (repo[key] == null) repo[key] = {\n      key: key,\n      items: [],\n      places: []\n    };\n    return repo[key];\n  }\n\n  initLine(line) {\n    line.setFillColor(this.fillColor);\n    line.setStrokeColor(this.strokeColor);\n    line.setStrokeWidth(this.strokeWidth);\n    line.setStrokeStyle(this.strokeStyle);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/path.js"],"names":["Shape","Line","Path","constructor","points","setStrokeWidth","offset2","setStart","point","path","arr","split","l","length","mem","offset","t1","t2","i","p","getOffset","setEnd","setOffset","getEnd","push","line","len","getLength","Error","index","c","getLineTo","start","end","offset1","setOffset2","getQuadraticTo","curve","setQuadraticPoint","showArrow","direction","places","render","canvasCtx","prepareLines","lengths","initLine","repo","getDistributedArrowPlaces","k","key","items","max","temp","j","getRepoObject","setFillColor","fillColor","setStrokeColor","strokeColor","strokeWidth","setStrokeStyle","strokeStyle"],"mappings":"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","sourcesContent":["import {Shape} from \"./shape\";\nimport {Line} from \"./line\";\n\nexport class Path extends Shape {\n    points = [];\n\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n        this.offset2 = [0, 0];\n    }\n\n    /**\n     * @param point [x,y]\n     */\n    setStart(point) {\n        this.points[0] = point;\n        return this;\n    }\n\n    /**\n     * NOTICE TO KEEP AN SPACE BETWEEN EACH INPUT<br/>\n     *\n     * ox and oy are optional<br/>\n     * ox: offset x<br/>\n     * oy: offset y<br/><br/>\n     *\n     * input format:<br/>\n     *\n     * a pair of [x, y]:<br/>\n     *      [num, num] for exact location. ex: 12.5, 300<br/>\n     *      [numR, length] for radian, [numD, length] for degree. ex: [180d, 100] or [3.1415r, 100]<br/>\n     *      [shape, gap] for reference to a shape. ex: [new Circle()..., 10]<br/>\n     *\n     * a pair of [ox, oy]: [num, num]. ex: [15, 30]<br/>\n     *\n     * @param path 'm x y [ox oy]':moveTo(x, y, ox, oy), 'l x y [ox oy]':lineTo(x, y, ox, oy), 'q cx cy x y [ox oy]':quadraticTo(curveX, curveY, x, y, ox, oy)\n     */\n    path(path) {\n        let arr = path.split('/ +/g');\n        let l = arr.length;\n        let mem = null;\n        let offset = null;\n        let t1, t2;\n        for (let i = 0; i < l; i++) {\n            switch (arr[i]) {\n                case 'm':\n                    mem = {p: [arr[i + 1], arr[i + 2]], offset: this.getOffset(arr, i + 3)};\n                    i += (mem.offset != null) ? 4 : 2;\n                    break;\n                case 'l':\n                    t1 = new Line().setEnd(arr[i + 1], arr[i + 2]);\n                    if (mem != null) {\n                        t1.setStart(mem.p);\n                        t1.setOffset(mem.offset);\n                    } else {\n                        t1.setStart(this.points[this.points.length - 1].getEnd());\n                    }\n                    this.points.push({line: t1, len: t1.getLength()})\n                    i += 2;\n                    break;\n                case 'q':\n                    break;\n                default:\n                    throw new Error('Wrong input')\n            }\n        }\n    }\n\n    getOffset(arr, index) {\n        let c = arr[index];\n        return (c !== 'm' && c !== 'l' && c !== 'q') ? [c, arr[index + 1]] : null\n    }\n\n    /**\n     * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     */\n    getLineTo(start, end, offset1 = [0, 0], offset2 = [0, 0]) {\n        return new Line().setStart(start).setEnd(end).setOffset(offset1).setOffset2(offset2)\n    }\n\n    /**\n     * @param curve [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     * @param end [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     */\n    getQuadraticTo(start, curve, end, offset1 = [0, 0], offset2 = [0, 0]) {\n        new Line().setStart(start).setQuadraticPoint(curve).setEnd(end).setOffset(offset1).setOffset2(offset2)\n    }\n\n    /**\n     * show arrows on the line\n     * @param direction 0 or 1\n     * @param places array of float values, each is 0 - 1;\n     * @return Shape\n     */\n    showArrow(direction, places) {\n        this.direction = direction;\n        this.places = typeof places === 'number' ? [places] : places;\n        return this;\n    }\n\n    render(canvasCtx) {\n        this.prepareLines();\n        for (let i = 1; i < this.points.length; i++) {\n            this.points[i].render(canvasCtx);\n        }\n    }\n\n    prepareLines() {\n        let lengths = [0]; // extract each line length to determine exact place of arrow\n\n        //prepare lines. connect lines to each other\n        this.points[1].setOffset(this.offset);\n        this.points[this.points.length - 1].setOffset2(this.offset2);\n\n        this.points[1].setStart(this.points[0]);\n        this.initLine(this.points[1]);\n        lengths.push(this.points[1].getLength());\n\n        for (let i = 2; i < this.points.length; i++) {\n            this.points[i].setStart(this.points[i - 1].getEnd());\n            this.initLine(this.points[i]);\n            lengths.push(lengths[i - 1] + this.points[i].getLength());\n        }\n\n        //deter mine arrow position\n        if (this.places != null && this.places.length > 0) {\n            let repo = this.getDistributedArrowPlaces(lengths);\n            for (let k in repo) {\n                this.points[repo[k].key + 1].showArrow(this.direction, repo[k].items);\n            }\n        }\n    }\n\n    getDistributedArrowPlaces(lengths) {\n        let max = lengths[lengths.length - 1];\n        let p, temp;\n        let repo = [];\n        for (let i = 0; i < this.places.length; i++) {\n            p = this.places[i] * max;\n            for (let j = 0; j < lengths.length - 1; j++) {\n                if (p >= lengths[j] && p <= lengths[j + 1]) {\n                    temp = this.getRepoObject(repo, j);\n                    temp.items.push((p - lengths[j]) / (lengths[j + 1] - lengths[j]));\n                    break;\n                }\n            }\n        }\n        return repo;\n    }\n\n    getRepoObject(repo, key) {\n        if (repo[key] == null)\n            repo[key] = {key: key, items: [], places: []};\n        return repo[key];\n    }\n\n    initLine(line) {\n        line.setFillColor(this.fillColor);\n        line.setStrokeColor(this.strokeColor);\n        line.setStrokeWidth(this.strokeWidth);\n        line.setStrokeStyle(this.strokeStyle);\n    }\n}"]},"metadata":{},"sourceType":"module"}