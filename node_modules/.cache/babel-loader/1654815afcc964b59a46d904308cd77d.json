{"ast":null,"code":"export class Utils {\n  static getAngle(x1, y1, x2, y2) {\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n    return Math.atan2(dy, dx);\n  }\n\n  static normalizeDegree(deg) {\n    if (deg > 360) deg %= 360;else if (deg < 0) deg = deg % 360 + 360;\n    return deg;\n  }\n\n  static normalizeRadian(rad) {\n    if (rad > _2pi) rad %= _2pi;else if (rad < 0) rad = rad % _2pi + _2pi;\n    return rad;\n  }\n\n  static rad2Deg(rad) {\n    return 180 * rad / Math.PI;\n  }\n\n  static deg2Rad(deg) {\n    return Math.PI * normalizeDegree(deg) / 180;\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/tools/utils.js"],"names":["Utils","getAngle","x1","y1","x2","y2","dx","dy","Math","atan2","normalizeDegree","deg","normalizeRadian","rad","_2pi","rad2Deg","PI","deg2Rad"],"mappings":"AAAA,OAAO,MAAMA,KAAN,CAAY;AACf,SAAOC,QAAP,CAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgC;AAC5B,QAAIC,EAAE,GAAGF,EAAE,GAAGF,EAAd;AACA,QAAIK,EAAE,GAAGF,EAAE,GAAGF,EAAd;AACA,WAAOK,IAAI,CAACC,KAAL,CAAWF,EAAX,EAAeD,EAAf,CAAP;AACH;;AAED,SAAOI,eAAP,CAAuBC,GAAvB,EAA4B;AACxB,QAAIA,GAAG,GAAG,GAAV,EACIA,GAAG,IAAI,GAAP,CADJ,KAEK,IAAIA,GAAG,GAAG,CAAV,EACDA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAY,GAAlB;AACJ,WAAOA,GAAP;AACH;;AAED,SAAOC,eAAP,CAAuBC,GAAvB,EAA4B;AACxB,QAAIA,GAAG,GAAGC,IAAV,EACID,GAAG,IAAIC,IAAP,CADJ,KAEK,IAAID,GAAG,GAAG,CAAV,EACDA,GAAG,GAAGA,GAAG,GAAGC,IAAN,GAAaA,IAAnB;AACJ,WAAOD,GAAP;AACH;;AAED,SAAOE,OAAP,CAAeF,GAAf,EAAoB;AAChB,WAAO,MAAMA,GAAN,GAAYL,IAAI,CAACQ,EAAxB;AACH;;AAED,SAAOC,OAAP,CAAeN,GAAf,EAAoB;AAChB,WAAOH,IAAI,CAACQ,EAAL,GAAUN,eAAe,CAACC,GAAD,CAAzB,GAAiC,GAAxC;AACH;;AA7Bc","sourcesContent":["export class Utils {\n    static getAngle(x1, y1, x2, y2) {\n        let dx = x2 - x1;\n        let dy = y2 - y1;\n        return Math.atan2(dy, dx);\n    }\n\n    static normalizeDegree(deg) {\n        if (deg > 360)\n            deg %= 360;\n        else if (deg < 0)\n            deg = deg % 360 + 360;\n        return deg;\n    }\n\n    static normalizeRadian(rad) {\n        if (rad > _2pi)\n            rad %= _2pi;\n        else if (rad < 0)\n            rad = rad % _2pi + _2pi;\n        return rad;\n    }\n\n    static rad2Deg(rad) {\n        return 180 * rad / Math.PI;\n    }\n\n    static deg2Rad(deg) {\n        return Math.PI * normalizeDegree(deg) / 180;\n    }\n}"]},"metadata":{},"sourceType":"module"}