{"ast":null,"code":"import { Shape } from \"./shape\";\nimport { Line } from \"./line\";\nexport class Path extends Shape {\n  constructor() {\n    super();\n    this.points = [];\n    this.setStrokeWidth(1);\n    this.offset2 = [0, 0];\n  }\n  /**\n   * @param point [x,y]\n   */\n\n\n  setStart(point) {\n    this.points[0] = point;\n    return this;\n  }\n  /**\n   * NOTICE TO KEEP AN SPACE BETWEEN EACH INPUT<br/>\n   * ox and oy are \n   * ox: offset x<br/>\n   * oy: offset y<br/>\n   *\n   * @param path 'm x y [ox oy]':moveTo(x, y, ox, oy), 'l x y [ox oy]':lineTo(x, y, ox, oy), 'q cx cy x y [ox oy]':quadraticTo(curveX, curveY, x, y, ox, oy)\n   */\n\n\n  path(path) {\n    let arr = path.split('/ +/g');\n    let l = arr.length;\n    let mem = null;\n    let offset = null;\n    let t1, t2;\n\n    for (let i = 0; i < l; i++) {\n      switch (arr[i]) {\n        case 'm':\n          mem = [arr[i + 1], arr[i + 2]];\n          i += 2;\n          break;\n\n        case 'o':\n          offset = [arr[i + 1], arr[i + 2]];\n          i += 2;\n          break;\n\n        case 'l':\n          t1 = [arr[i + 1], arr[i + 2]];\n          this.points.push(g);\n          break;\n\n        case 'q':\n          break;\n\n        default:\n          throw new Error('Wrong input');\n      }\n    }\n  }\n  /**\n   * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   */\n\n\n  getLineTo(start, end, offset1 = [0, 0], offset2 = [0, 0]) {\n    return new Line().setStart(start).setEnd(end).setOffset(offset1).setOffset2(offset2);\n  }\n  /**\n   * @param curve [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   * @param end [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   */\n\n\n  getQuadraticTo(start, curve, end, offset1 = [0, 0], offset2 = [0, 0]) {\n    new Line().setStart(start).setQuadraticPoint(curve).setEnd(end).setOffset(offset1).setOffset2(offset2);\n  }\n  /**\n   * show arrows on the line\n   * @param direction 0 or 1\n   * @param places array of float values, each is 0 - 1;\n   * @return Shape\n   */\n\n\n  showArrow(direction, places) {\n    this.direction = direction;\n    this.places = typeof places === 'number' ? [places] : places;\n    return this;\n  }\n\n  render(canvasCtx) {\n    this.prepareLines();\n\n    for (let i = 1; i < this.points.length; i++) {\n      this.points[i].render(canvasCtx);\n    }\n  }\n\n  prepareLines() {\n    let lengths = [0]; // extract each line length to determine exact place of arrow\n    //prepare lines. connect lines to each other\n\n    this.points[1].setOffset(this.offset);\n    this.points[this.points.length - 1].setOffset2(this.offset2);\n    this.points[1].setStart(this.points[0]);\n    this.initLine(this.points[1]);\n    lengths.push(this.points[1].getLength());\n\n    for (let i = 2; i < this.points.length; i++) {\n      this.points[i].setStart(this.points[i - 1].getEnd());\n      this.initLine(this.points[i]);\n      lengths.push(lengths[i - 1] + this.points[i].getLength());\n    } //deter mine arrow position\n\n\n    if (this.places != null && this.places.length > 0) {\n      let repo = this.getDistributedArrowPlaces(lengths);\n\n      for (let k in repo) {\n        this.points[repo[k].key + 1].showArrow(this.direction, repo[k].items);\n      }\n    }\n  }\n\n  getDistributedArrowPlaces(lengths) {\n    let max = lengths[lengths.length - 1];\n    let p, temp;\n    let repo = [];\n\n    for (let i = 0; i < this.places.length; i++) {\n      p = this.places[i] * max;\n\n      for (let j = 0; j < lengths.length - 1; j++) {\n        if (p >= lengths[j] && p <= lengths[j + 1]) {\n          temp = this.getRepoObject(repo, j);\n          temp.items.push((p - lengths[j]) / (lengths[j + 1] - lengths[j]));\n          break;\n        }\n      }\n    }\n\n    return repo;\n  }\n\n  getRepoObject(repo, key) {\n    if (repo[key] == null) repo[key] = {\n      key: key,\n      items: [],\n      places: []\n    };\n    return repo[key];\n  }\n\n  initLine(line) {\n    line.setFillColor(this.fillColor);\n    line.setStrokeColor(this.strokeColor);\n    line.setStrokeWidth(this.strokeWidth);\n    line.setStrokeStyle(this.strokeStyle);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/path.js"],"names":["Shape","Line","Path","constructor","points","setStrokeWidth","offset2","setStart","point","path","arr","split","l","length","mem","offset","t1","t2","i","push","g","Error","getLineTo","start","end","offset1","setEnd","setOffset","setOffset2","getQuadraticTo","curve","setQuadraticPoint","showArrow","direction","places","render","canvasCtx","prepareLines","lengths","initLine","getLength","getEnd","repo","getDistributedArrowPlaces","k","key","items","max","p","temp","j","getRepoObject","line","setFillColor","fillColor","setStrokeColor","strokeColor","strokeWidth","setStrokeStyle","strokeStyle"],"mappings":"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","sourcesContent":["import {Shape} from \"./shape\";\nimport {Line} from \"./line\";\n\nexport class Path extends Shape {\n    points = [];\n\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n        this.offset2 = [0, 0];\n    }\n\n    /**\n     * @param point [x,y]\n     */\n    setStart(point) {\n        this.points[0] = point;\n        return this;\n    }\n\n    /**\n     * NOTICE TO KEEP AN SPACE BETWEEN EACH INPUT<br/>\n     * ox and oy are \n     * ox: offset x<br/>\n     * oy: offset y<br/>\n     *\n     * @param path 'm x y [ox oy]':moveTo(x, y, ox, oy), 'l x y [ox oy]':lineTo(x, y, ox, oy), 'q cx cy x y [ox oy]':quadraticTo(curveX, curveY, x, y, ox, oy)\n     */\n    path(path) {\n        let arr = path.split('/ +/g');\n        let l = arr.length;\n        let mem = null;\n        let offset = null;\n        let t1, t2;\n        for (let i = 0; i < l; i++) {\n            switch (arr[i]) {\n                case 'm':\n                    mem = [arr[i + 1], arr[i + 2]];\n                    i += 2;\n                    break;\n                case 'o':\n                    offset = [arr[i + 1], arr[i + 2]];\n                    i += 2;\n                    break;\n                case 'l':\n                    t1 = [arr[i + 1], arr[i + 2]];\n                    this.points.push(g)\n                    break;\n                case 'q':\n                    break;\n                default:\n                    throw new Error('Wrong input')\n            }\n        }\n    }\n\n    /**\n     * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     */\n    getLineTo(start, end, offset1 = [0, 0], offset2 = [0, 0]) {\n        return new Line().setStart(start).setEnd(end).setOffset(offset1).setOffset2(offset2)\n    }\n\n    /**\n     * @param curve [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     * @param end [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     */\n    getQuadraticTo(start, curve, end, offset1 = [0, 0], offset2 = [0, 0]) {\n        new Line().setStart(start).setQuadraticPoint(curve).setEnd(end).setOffset(offset1).setOffset2(offset2)\n    }\n\n    /**\n     * show arrows on the line\n     * @param direction 0 or 1\n     * @param places array of float values, each is 0 - 1;\n     * @return Shape\n     */\n    showArrow(direction, places) {\n        this.direction = direction;\n        this.places = typeof places === 'number' ? [places] : places;\n        return this;\n    }\n\n    render(canvasCtx) {\n        this.prepareLines();\n        for (let i = 1; i < this.points.length; i++) {\n            this.points[i].render(canvasCtx);\n        }\n    }\n\n    prepareLines() {\n        let lengths = [0]; // extract each line length to determine exact place of arrow\n\n        //prepare lines. connect lines to each other\n        this.points[1].setOffset(this.offset);\n        this.points[this.points.length - 1].setOffset2(this.offset2);\n\n        this.points[1].setStart(this.points[0]);\n        this.initLine(this.points[1]);\n        lengths.push(this.points[1].getLength());\n\n        for (let i = 2; i < this.points.length; i++) {\n            this.points[i].setStart(this.points[i - 1].getEnd());\n            this.initLine(this.points[i]);\n            lengths.push(lengths[i - 1] + this.points[i].getLength());\n        }\n\n        //deter mine arrow position\n        if (this.places != null && this.places.length > 0) {\n            let repo = this.getDistributedArrowPlaces(lengths);\n            for (let k in repo) {\n                this.points[repo[k].key + 1].showArrow(this.direction, repo[k].items);\n            }\n        }\n    }\n\n    getDistributedArrowPlaces(lengths) {\n        let max = lengths[lengths.length - 1];\n        let p, temp;\n        let repo = [];\n        for (let i = 0; i < this.places.length; i++) {\n            p = this.places[i] * max;\n            for (let j = 0; j < lengths.length - 1; j++) {\n                if (p >= lengths[j] && p <= lengths[j + 1]) {\n                    temp = this.getRepoObject(repo, j);\n                    temp.items.push((p - lengths[j]) / (lengths[j + 1] - lengths[j]));\n                    break;\n                }\n            }\n        }\n        return repo;\n    }\n\n    getRepoObject(repo, key) {\n        if (repo[key] == null)\n            repo[key] = {key: key, items: [], places: []};\n        return repo[key];\n    }\n\n    initLine(line) {\n        line.setFillColor(this.fillColor);\n        line.setStrokeColor(this.strokeColor);\n        line.setStrokeWidth(this.strokeWidth);\n        line.setStrokeStyle(this.strokeStyle);\n    }\n}"]},"metadata":{},"sourceType":"module"}