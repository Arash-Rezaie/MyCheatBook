{"ast":null,"code":"export class Shape {\n  constructor() {\n    this.fillColor = undefined;\n    this.label = undefined;\n    this.strokeWidth = 0;\n    this.strokeColor = '#000';\n    this.strokeStyle = [1, 0];\n    this.offset = [0, 0];\n    this.basePosition = [0, 0];\n    this.xy = [0, 0];\n  }\n  /**\n   * calculate final position\n   */\n\n\n  calculateFinalPosition() {\n    this.xy = [this.basePosition[0] + this.offset[0], this.basePosition[1] + this.offset[1]];\n  }\n  /**\n   * @param fillColor internal color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n   * @returns {Shape}\n   */\n\n\n  setFillColor(fillColor) {\n    this.fillColor = fillColor;\n    return this;\n  }\n  /**\n   * @param strokeWidth int value\n   * @returns {Shape}\n   */\n\n\n  setStrokeWidth(strokeWidth) {\n    this.strokeWidth = strokeWidth;\n    return this;\n  }\n  /**\n   * set both fill color and stroke color\n   * @param color [green, blue, red, yellow, purple, brown, orange, pink]\n   * @return {Shape}\n   */\n\n\n  setColor(color) {\n    this.setFillColor(Shape.colors[color][0]);\n    this.setStrokeColor(Shape.colors[color][1]);\n    return this;\n  }\n  /**\n   * @param strokeColor stroke color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n   * @returns {Shape}\n   */\n\n\n  setStrokeColor(strokeColor) {\n    this.strokeColor = strokeColor;\n    return this;\n  }\n  /**\n   * make line dashed\n   * @param strokeStyle [int,int]. It means [fill, empty]\n   * @returns {Shape}\n   */\n\n\n  setStrokeStyle(strokeStyle) {\n    this.strokeStyle = strokeStyle;\n    return this;\n  }\n  /**\n   * label is going to be shown at center of this shape\n   * @param label string or Text object\n   * @returns {Shape}\n   */\n\n\n  setLabel(label) {\n    this.label = label;\n    return this;\n  }\n\n  getLabel() {\n    return this.label;\n  }\n  /**\n   * @param position [x,y]\n   * @returns {Shape}\n   */\n\n\n  setPosition(position) {\n    this.basePosition = [position[0], position[1]];\n    this.calculateFinalPosition();\n    return this;\n  }\n  /**\n   * @param offset [xOffset,yOffset]\n   * @returns {Shape}\n   */\n\n\n  setOffset(offset) {\n    this.offset = [offset[0], offset[1]];\n    this.calculateFinalPosition();\n    return this;\n  }\n  /**\n   * @param shape another shape object\n   * @returns {Shape}\n   */\n\n\n  alignTo(shape) {\n    this.setPosition(shape.getCenterPoint());\n    return this;\n  }\n  /**\n   * get final position\n   * @returns {*[]}\n   */\n\n\n  getPosition() {\n    return [this.xy[0], this.xy[1]];\n  }\n  /**\n   * get center point of this shape\n   */\n\n\n  getCenterPoint() {\n    return this.getPosition();\n  }\n\n  getExternalPoint(angle, gap) {\n    return this.getPosition();\n  }\n  /**\n   * render label object\n   * @param ctx\n   */\n\n\n  showLabel(ctx) {\n    try {\n      let lbl = this.getLabel();\n\n      if (typeof lbl === \"string\") {\n        lbl = new Text().setPosition(this.getCenterPoint()).setLabel(lbl);\n      }\n\n      lbl.render(ctx);\n    } catch (e) {\n      debugger;\n    }\n  }\n  /**\n   * apply configurations\n   * @param canvasCtx\n   */\n\n\n  render(canvasCtx) {\n    canvasCtx.fillStyle = this.fillColor;\n    canvasCtx.lineWidth = this.strokeWidth;\n    canvasCtx.strokeStyle = this.strokeColor;\n    canvasCtx.setLineDash(this.strokeStyle);\n    if (this.fillColor) canvasCtx.fill();\n    if (this.strokeWidth > 0) canvasCtx.stroke();\n    if (this.label) this.showLabel(canvasCtx);\n  }\n\n}\nShape.colors = {\n  'green': ['rgb(51, 204, 51)', 'rgb(0, 153, 51)'],\n  'blue': ['rgb(51, 102, 255)', 'rgb(0, 0, 255)'],\n  'red': ['rgb(255,0,0)', 'rgb(137,16,16)'],\n  'yellow': ['rgb(255, 255, 102)', 'rgb(255, 204, 0)'],\n  'purple': ['rgb(153, 51, 255)', 'rgb(121,7,191)'],\n  'brown': ['rgb(153, 102, 0)', 'rgb(102, 51, 0)'],\n  'orange': ['rgb(255, 153, 51)', 'rgb(255, 102, 0)'],\n  'pink': ['rgb(255, 102, 153)', 'rgb(255, 51, 153)'],\n  'black': ['rgb(29,29,29)', 'rgb(0, 0, 0)'],\n  'white': ['rgb(252,252,252)', 'rgb(177,177,177)']\n};\nexport class Text extends Shape {\n  constructor() {\n    super();\n    this.setFillColor('black');\n    this.setFontSize('12px');\n    this.setFontStyle('');\n  }\n\n  setLabel(label) {\n    this.txt = label;\n    return this;\n  }\n  /**\n   * @param fontSize ex. 12px\n   * @returns {Text}\n   */\n\n\n  setFontSize(fontSize) {\n    this.fontSize = fontSize;\n    return this;\n  }\n  /**\n   * @param fontStyle ex. 'italic' or 'bold' or both 'italic bold'\n   * * @returns {Text}\n   */\n\n\n  setFontStyle(fontStyle) {\n    this.fontStyle = fontStyle;\n    return this;\n  }\n\n  render(canvasCtx) {\n    canvasCtx.beginPath();\n    super.render(canvasCtx);\n    canvasCtx.font = this.fontStyle + ' ' + this.fontSize + \" Arial\";\n    canvasCtx.textAlign = \"center\";\n    let c = this.getPosition();\n    canvasCtx.fillText(this.txt, c[0], c[1]);\n    canvasCtx.closePath();\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/shape.js"],"names":["Shape","constructor","fillColor","undefined","label","strokeWidth","strokeColor","strokeStyle","offset","basePosition","xy","calculateFinalPosition","setFillColor","setStrokeWidth","setColor","color","colors","setStrokeColor","setStrokeStyle","setLabel","getLabel","setPosition","position","setOffset","alignTo","shape","getCenterPoint","getPosition","getExternalPoint","angle","gap","showLabel","ctx","lbl","Text","render","e","canvasCtx","fillStyle","lineWidth","setLineDash","fill","stroke","setFontSize","setFontStyle","txt","fontSize","fontStyle","beginPath","font","textAlign","c","fillText","closePath"],"mappings":"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","sourcesContent":["export class Shape {\n    static colors = {\n        'green': ['rgb(51, 204, 51)', 'rgb(0, 153, 51)'],\n        'blue': ['rgb(51, 102, 255)', 'rgb(0, 0, 255)'],\n        'red': ['rgb(255,0,0)', 'rgb(137,16,16)'],\n        'yellow': ['rgb(255, 255, 102)', 'rgb(255, 204, 0)'],\n        'purple': ['rgb(153, 51, 255)', 'rgb(121,7,191)'],\n        'brown': ['rgb(153, 102, 0)', 'rgb(102, 51, 0)'],\n        'orange': ['rgb(255, 153, 51)', 'rgb(255, 102, 0)'],\n        'pink': ['rgb(255, 102, 153)', 'rgb(255, 51, 153)'],\n        'black': ['rgb(29,29,29)', 'rgb(0, 0, 0)'],\n        'white': ['rgb(252,252,252)', 'rgb(177,177,177)'],\n    };\n\n    constructor() {\n        this.fillColor = undefined;\n        this.label = undefined;\n        this.strokeWidth = 0;\n        this.strokeColor = '#000';\n        this.strokeStyle = [1, 0];\n        this.offset = [0, 0];\n        this.basePosition = [0, 0];\n        this.xy = [0, 0];\n    }\n\n    /**\n     * calculate final position\n     */\n    calculateFinalPosition() {\n        this.xy = [this.basePosition[0] + this.offset[0], this.basePosition[1] + this.offset[1]];\n    }\n\n    /**\n     * @param fillColor internal color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n     * @returns {Shape}\n     */\n    setFillColor(fillColor) {\n        this.fillColor = fillColor;\n        return this;\n    }\n\n    /**\n     * @param strokeWidth int value\n     * @returns {Shape}\n     */\n    setStrokeWidth(strokeWidth) {\n        this.strokeWidth = strokeWidth;\n        return this;\n    }\n\n    /**\n     * set both fill color and stroke color\n     * @param color [green, blue, red, yellow, purple, brown, orange, pink]\n     * @return {Shape}\n     */\n    setColor(color) {\n        this.setFillColor(Shape.colors[color][0]);\n        this.setStrokeColor(Shape.colors[color][1]);\n        return this;\n    }\n\n    /**\n     * @param strokeColor stroke color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n     * @returns {Shape}\n     */\n    setStrokeColor(strokeColor) {\n        this.strokeColor = strokeColor;\n        return this;\n    }\n\n    /**\n     * make line dashed\n     * @param strokeStyle [int,int]. It means [fill, empty]\n     * @returns {Shape}\n     */\n    setStrokeStyle(strokeStyle) {\n        this.strokeStyle = strokeStyle;\n        return this;\n    }\n\n    /**\n     * label is going to be shown at center of this shape\n     * @param label string or Text object\n     * @returns {Shape}\n     */\n    setLabel(label) {\n        this.label = label;\n        return this;\n    }\n\n    getLabel() {\n        return this.label;\n    }\n\n    /**\n     * @param position [x,y]\n     * @returns {Shape}\n     */\n    setPosition(position) {\n        this.basePosition = [position[0], position[1]];\n        this.calculateFinalPosition();\n        return this;\n    }\n\n    /**\n     * @param offset [xOffset,yOffset]\n     * @returns {Shape}\n     */\n    setOffset(offset) {\n        this.offset = [offset[0], offset[1]];\n        this.calculateFinalPosition();\n        return this;\n    }\n\n    /**\n     * @param shape another shape object\n     * @returns {Shape}\n     */\n    alignTo(shape) {\n        this.setPosition(shape.getCenterPoint());\n        return this;\n    }\n\n    /**\n     * get final position\n     * @returns {*[]}\n     */\n    getPosition() {\n        return [this.xy[0], this.xy[1]];\n    }\n\n    /**\n     * get center point of this shape\n     */\n    getCenterPoint() {\n        return this.getPosition();\n    }\n\n    getExternalPoint(angle, gap) {\n        return this.getPosition();\n    }\n\n    /**\n     * render label object\n     * @param ctx\n     */\n    showLabel(ctx) {\n        try {\n            let lbl = this.getLabel();\n            if (typeof lbl === \"string\") {\n                lbl = new Text()\n                    .setPosition(this.getCenterPoint())\n                    .setLabel(lbl)\n            }\n            lbl.render(ctx);\n        }catch (e){\n            debugger\n        }\n    }\n\n    /**\n     * apply configurations\n     * @param canvasCtx\n     */\n    render(canvasCtx) {\n        canvasCtx.fillStyle = this.fillColor;\n        canvasCtx.lineWidth = this.strokeWidth;\n        canvasCtx.strokeStyle = this.strokeColor;\n        canvasCtx.setLineDash(this.strokeStyle);\n        if (this.fillColor)\n            canvasCtx.fill();\n        if (this.strokeWidth > 0)\n            canvasCtx.stroke();\n        if (this.label)\n            this.showLabel(canvasCtx);\n    }\n}\n\nexport class Text extends Shape {\n    constructor() {\n        super();\n        this.setFillColor('black');\n        this.setFontSize('12px');\n        this.setFontStyle('');\n    }\n\n    setLabel(label) {\n        this.txt = label;\n        return this;\n    }\n\n    /**\n     * @param fontSize ex. 12px\n     * @returns {Text}\n     */\n    setFontSize(fontSize) {\n        this.fontSize = fontSize;\n        return this;\n    }\n\n    /**\n     * @param fontStyle ex. 'italic' or 'bold' or both 'italic bold'\n     * * @returns {Text}\n     */\n    setFontStyle(fontStyle) {\n        this.fontStyle = fontStyle;\n        return this;\n    }\n\n    render(canvasCtx) {\n        canvasCtx.beginPath();\n        super.render(canvasCtx);\n        canvasCtx.font = this.fontStyle + ' ' + this.fontSize + \" Arial\";\n        canvasCtx.textAlign = \"center\";\n        let c = this.getPosition();\n        canvasCtx.fillText(this.txt, c[0], c[1]);\n        canvasCtx.closePath();\n    }\n}"]},"metadata":{},"sourceType":"module"}