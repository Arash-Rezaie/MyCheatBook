{"ast":null,"code":"import { Text } from \"./text\";\nimport { Circle } from \"./circle\";\nimport { Rectangle } from \"./rectangle\";\nimport { DrawBox } from \"./draw-box\";\nimport { Line } from \"./line\";\nexport class DrawBoxHandler {\n  constructor() {\n    this.METHOD_POINTERS = {\n      text: () => new Text(),\n      circle: () => new Circle(),\n      line: () => this.generateLine(),\n      rect: () => new Rectangle(),\n      node: () => this.generateNode(),\n      cap: () => this.generateCaption(),\n      hline: () => this.generateHLine(),\n      vline: () => this.generateVLine(),\n      vect: () => this.generateVector(),\n      hvect: () => this.generateHVector(),\n      label: (d, o) => o.setLabel(d),\n      color: (d, o) => o.setColor(d),\n      fillColor: (d, o) => o.setFillColor(d),\n      strokeColor: (d, o) => o.setStrokeColor(d),\n      strokeWidth: (d, o) => o.setStrokeWidth(d),\n      strokeStyle: (d, o) => o.setStrokeStyle(d),\n      radius: (d, o) => o.setRadius(d),\n      fontSize: (d, o) => o.setFontSize(d),\n      fontStyle: (d, o) => o.setFontStyle(d),\n      lineto: (d, o) => o.lineto(d),\n      arrow: (d, o) => o.showArrow(d[0], d[1]),\n      len: (d, o) => o.setLength(d),\n      between: (d, o) => o.between(d),\n      width: (d, o) => o.setWidth(d),\n      height: (d, o) => o.setHeight(d),\n      conn: (d, o) => o.connectTo(d),\n      captions: (d, o) => o.setCaptions(d)\n    };\n    this.drawBox = new DrawBox();\n    this.container = {};\n  }\n  /**\n   * @param itemConf it is an object with fields:<br/>\n   * {\n   *    shape: ['text', 'circle', 'line', 'rect', 'node', 'cap', 'hline', 'vline', 'vect', 'hvect']<br/>\n   *\n   *    --- generic ------<br/>\n   *    id: string<br/>\n   *    pos: [x, y]<br/>\n   *    align: shape<br/>\n   *    offset: [dx, dy]<br/>\n   *    label: [string, Text-object<br/>\n   *    color: ['green', 'blue', 'red', 'yellow', 'purple', 'brown', 'orange', 'pink'], (set fill & stroke together)<br/>\n   *    fillColor: color<br/>\n   *    strokeColor: color<br/>\n   *    strokeWidth: int<br/>\n   *    strokeStyle: [int, int], (make stroke dashed)<br/>\n   *\n   *    --- circle ------<br/>\n   *    radius: int<br/>\n   *\n   *    --- Text ------<br/>\n   *    fontSize: value, (ex. '20px' or '12em'<br/>\n   *    fontStyle: ['bold', 'italic', 'bold italic'<br/>\n   *\n   *    --- all line types ------<br/>\n   *    lineto: [x,y] or [intR, length] or [intD, length]<br/>\n   *    arrow: [dir([true, false]), places([0 - 1])]<br/>\n   *    between: [id1, id2, gap]<br/>\n   *\n   *    --- hline & vline & hvect ------<br/>\n   *    len: int<br/>\n   *\n   *    --- rectangle ------<br/>\n   *    width: int<br/>\n   *    height: int<br/>\n   *\n   *    --- node & cap ------<br/>\n   *    conn: ref-id. (connect to the aligned shape)<br/>\n   *    captions: [{t:string, c: 'color string', w:width, offset:[x=0,y=0]}]<br/>\n   * }\n   */\n\n\n  addShape(itemConf) {\n    this.drawBox.addShape(this.generateShape(itemConf));\n    return this;\n  }\n\n  generateShape(itemConf) {\n    let o = this.METHOD_POINTERS[itemConf.shape](itemConf);\n    this.initShape(itemConf, o);\n    let t;\n\n    for (t in itemConf) {\n      if (t !== 'shape' && t !== 'id' && t !== 'pos' && t !== 'align' && t !== 'offset') {\n        this.METHOD_POINTERS[t](itemConf[t], o);\n      }\n    }\n\n    return o;\n  }\n\n  initShape(conf, o) {\n    if (conf.id) this.container[conf.id] = o;\n    if (conf.pos) o.setPosition(conf.pos);\n    if (conf.align) o.alignTo(this.container[conf.align]);\n\n    if (conf.offset) {\n      o.setOffset(conf.offset);\n    }\n\n    return o;\n  }\n\n  generateNode() {\n    //crate new circle\n    let o = new Circle().setRadius(20).setStrokeWidth(3).setStrokeColor('black').setFillColor('yellow'); //redirect setLabel to a new method\n\n    this.applyCustomLabel(o, lbl => new Text().setPosition(o.getCenterPoint()).setLabel(lbl).setFontSize('20px').setOffset([0, 6]));\n\n    o['connectTo'] = refId => {\n      this.drawBox.addShape(this.generateVector().superBetween(o, this.container[refId], 5));\n      return o;\n    };\n\n    o['setCaptions'] = caps => {\n      if (caps[0] === undefined) caps = [caps];\n      caps.forEach((v, i) => {\n        this.drawBox.addShape(this.generateCaption().alignTo(o).setOffset(v.offset ? v.offset : [28, caps.length * -11.5 + i * 25]).setWidth(v.w).setHeight(20).setLabel(v.t).setColor(v.c).setStrokeWidth(2));\n      });\n      return o;\n    };\n\n    return o;\n  }\n\n  generateCaption() {\n    let o = new Rectangle();\n    this.applyCustomLabel(o, lbl => new Text().setPosition(o.getCenterPoint()).setLabel(lbl).setOffset([0, 5]).setFontStyle('bold'));\n\n    o['connectTo'] = refId => {\n      this.drawBox.addShape(new Line().between(o, this.container[refId], 5).setStrokeColor('red').setFillColor('red').setStrokeWidth(1));\n      return o;\n    };\n\n    return o;\n  }\n\n  generateLine(labelProducer = null) {\n    let o = new Line();\n    o['superBetween'] = o.between;\n\n    o[\"between\"] = data => o.superBetween(this.container[data[0]], this.container[data[1]], data[2]);\n\n    this.applyCustomLabel(o, labelProducer);\n    return o;\n  }\n\n  generateHLine() {\n    let o = this.generateLine();\n\n    o['setLength'] = l => l > 0 ? o.lineTo(['0D', l]) : o.lineTo(['180D', -l]);\n\n    return o;\n  }\n\n  generateVLine() {\n    let o = this.generateLine();\n\n    o['setLength'] = l => l > 0 ? o.lineTo(['90D', l]) : o.lineTo(['270D', -l]);\n\n    return o;\n  }\n\n  generateVector(labelProducer = null) {\n    return this.generateLine(labelProducer).setStrokeColor('black').setFillColor('black').setStrokeWidth(2).showArrow(1, 1);\n  }\n\n  generateHVector() {\n    let o = this.generateVector(lbl => new Text().setPosition(o.getCenterPoint()).setLabel(lbl).setOffset([0, -6]).setFontStyle(''));\n\n    o['setLength'] = l => l > 0 ? o.lineTo(['0D', l]) : o.lineTo(['180D', -l]);\n\n    return o;\n  }\n\n  applyCustomLabel(shape, inCaseOfSimpleText = null) {\n    shape['setText'] = shape.setLabel;\n\n    shape['setLabel'] = lbl => {\n      return typeof lbl === 'string' ? shape.setText(inCaseOfSimpleText ? inCaseOfSimpleText(lbl) : lbl) : shape.setText(this.generateShape(lbl).alignTo(shape));\n    };\n  }\n\n  render(canvas) {\n    this.drawBox.render(canvas);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/draw-box-handler.js"],"names":["Text","Circle","Rectangle","DrawBox","Line","DrawBoxHandler","constructor","METHOD_POINTERS","text","circle","line","generateLine","rect","node","generateNode","cap","generateCaption","hline","generateHLine","vline","generateVLine","vect","generateVector","hvect","generateHVector","label","d","o","setLabel","color","setColor","fillColor","setFillColor","strokeColor","setStrokeColor","strokeWidth","setStrokeWidth","strokeStyle","setStrokeStyle","radius","setRadius","fontSize","setFontSize","fontStyle","setFontStyle","lineto","arrow","showArrow","len","setLength","between","width","setWidth","height","setHeight","conn","connectTo","captions","setCaptions","drawBox","container","addShape","itemConf","generateShape","shape","initShape","t","conf","id","pos","setPosition","align","alignTo","offset","setOffset","applyCustomLabel","lbl","getCenterPoint","refId","superBetween","caps","undefined","forEach","v","i","length","w","c","labelProducer","data","l","lineTo","inCaseOfSimpleText","setText","render","canvas"],"mappings":"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","sourcesContent":["import {Text} from \"./text\";\nimport {Circle} from \"./circle\";\nimport {Rectangle} from \"./rectangle\";\nimport {DrawBox} from \"./draw-box\";\nimport {Line} from \"./line\";\n\nexport class DrawBoxHandler {\n    const\n    METHOD_POINTERS = {\n        text: () => new Text(),\n        circle: () => new Circle(),\n        line: () => this.generateLine(),\n        rect: () => new Rectangle(),\n        node: () => this.generateNode(),\n        cap: () => this.generateCaption(),\n        hline: () => this.generateHLine(),\n        vline: () => this.generateVLine(),\n        vect: () => this.generateVector(),\n        hvect: () => this.generateHVector(),\n        label: (d, o) => o.setLabel(d),\n        color: (d, o) => o.setColor(d),\n        fillColor: (d, o) => o.setFillColor(d),\n        strokeColor: (d, o) => o.setStrokeColor(d),\n        strokeWidth: (d, o) => o.setStrokeWidth(d),\n        strokeStyle: (d, o) => o.setStrokeStyle(d),\n        radius: (d, o) => o.setRadius(d),\n        fontSize: (d, o) => o.setFontSize(d),\n        fontStyle: (d, o) => o.setFontStyle(d),\n        lineto: (d, o) => o.lineto(d),\n        arrow: (d, o) => o.showArrow(d[0], d[1]),\n        len: (d, o) => o.setLength(d),\n        between: (d, o) => o.between(d),\n        width: (d, o) => o.setWidth(d),\n        height: (d, o) => o.setHeight(d),\n        conn: (d, o) => o.connectTo(d),\n        captions: (d, o) => o.setCaptions(d),\n    };\n\n    constructor() {\n        this.drawBox = new DrawBox();\n        this.container = {};\n    }\n\n    /**\n     * @param itemConf it is an object with fields:<br/>\n     * {\n     *    shape: ['text', 'circle', 'line', 'rect', 'node', 'cap', 'hline', 'vline', 'vect', 'hvect']<br/>\n     *\n     *    --- generic ------<br/>\n     *    id: string<br/>\n     *    pos: [x, y]<br/>\n     *    align: shape<br/>\n     *    offset: [dx, dy]<br/>\n     *    label: [string, Text-object<br/>\n     *    color: ['green', 'blue', 'red', 'yellow', 'purple', 'brown', 'orange', 'pink'], (set fill & stroke together)<br/>\n     *    fillColor: color<br/>\n     *    strokeColor: color<br/>\n     *    strokeWidth: int<br/>\n     *    strokeStyle: [int, int], (make stroke dashed)<br/>\n     *\n     *    --- circle ------<br/>\n     *    radius: int<br/>\n     *\n     *    --- Text ------<br/>\n     *    fontSize: value, (ex. '20px' or '12em'<br/>\n     *    fontStyle: ['bold', 'italic', 'bold italic'<br/>\n     *\n     *    --- all line types ------<br/>\n     *    lineto: [x,y] or [intR, length] or [intD, length]<br/>\n     *    arrow: [dir([true, false]), places([0 - 1])]<br/>\n     *    between: [id1, id2, gap]<br/>\n     *\n     *    --- hline & vline & hvect ------<br/>\n     *    len: int<br/>\n     *\n     *    --- rectangle ------<br/>\n     *    width: int<br/>\n     *    height: int<br/>\n     *\n     *    --- node & cap ------<br/>\n     *    conn: ref-id. (connect to the aligned shape)<br/>\n     *    captions: [{t:string, c: 'color string', w:width, offset:[x=0,y=0]}]<br/>\n     * }\n     */\n    addShape(itemConf) {\n        this.drawBox.addShape(this.generateShape(itemConf));\n        return this;\n    }\n\n    generateShape(itemConf) {\n        let o = this.METHOD_POINTERS[itemConf.shape](itemConf);\n        this.initShape(itemConf, o);\n        let t;\n        for (t in itemConf) {\n            if (t !== 'shape' && t !== 'id' && t !== 'pos' && t !== 'align' && t !== 'offset') {\n                this.METHOD_POINTERS[t](itemConf[t], o);\n            }\n        }\n        return o;\n    }\n\n    initShape(conf, o) {\n        if (conf.id)\n            this.container[conf.id] = o;\n        if (conf.pos)\n            o.setPosition(conf.pos);\n        if (conf.align)\n            o.alignTo(this.container[conf.align]);\n        if (conf.offset) {\n            o.setOffset(conf.offset);\n        }\n        return o;\n    }\n\n    generateNode() {\n        //crate new circle\n        let o = new Circle()\n            .setRadius(20)\n            .setStrokeWidth(3)\n            .setStrokeColor('black')\n            .setFillColor('yellow');\n\n        //redirect setLabel to a new method\n        this.applyCustomLabel(o, lbl =>\n            new Text()\n                .setPosition(o.getCenterPoint())\n                .setLabel(lbl)\n                .setFontSize('20px')\n                .setOffset([0, 6]));\n        o['connectTo'] = refId => {\n            this.drawBox.addShape(this.generateVector()\n                .superBetween(o, this.container[refId], 5));\n            return o;\n        };\n        o['setCaptions'] = caps => {\n            if (caps[0] === undefined)\n                caps = [caps];\n            caps.forEach((v, i) => {\n                this.drawBox.addShape(\n                    this.generateCaption()\n                        .alignTo(o)\n                        .setOffset(v.offset ? v.offset : [28, (caps.length * -11.5 + (i * 25))])\n                        .setWidth(v.w)\n                        .setHeight(20)\n                        .setLabel(v.t)\n                        .setColor(v.c)\n                        .setStrokeWidth(2)\n                )\n            })\n            return o;\n        };\n        return o;\n    }\n\n    generateCaption() {\n        let o = new Rectangle()\n        this.applyCustomLabel(o, lbl =>\n            new Text()\n                .setPosition(o.getCenterPoint())\n                .setLabel(lbl)\n                .setOffset([0, 5])\n                .setFontStyle('bold'));\n        o['connectTo'] = refId => {\n            this.drawBox.addShape(new Line()\n                .between(o, this.container[refId], 5)\n                .setStrokeColor('red')\n                .setFillColor('red')\n                .setStrokeWidth(1));\n            return o;\n        };\n        return o;\n    }\n\n    generateLine(labelProducer = null) {\n        let o = new Line();\n        o['superBetween'] = o.between;\n        o[\"between\"] = data => o.superBetween(this.container[data[0]], this.container[data[1]], data[2]);\n        this.applyCustomLabel(o, labelProducer);\n        return o;\n    }\n\n    generateHLine() {\n        let o = this.generateLine()\n        o['setLength'] = l =>\n            l > 0 ?\n                o.lineTo(['0D', l]) :\n                o.lineTo(['180D', -l])\n        return o;\n    }\n\n    generateVLine() {\n        let o = this.generateLine()\n        o['setLength'] = l =>\n            l > 0 ?\n                o.lineTo(['90D', l]) :\n                o.lineTo(['270D', -l])\n        return o;\n    }\n\n    generateVector(labelProducer = null) {\n        return this.generateLine(labelProducer)\n            .setStrokeColor('black')\n            .setFillColor('black')\n            .setStrokeWidth(2)\n            .showArrow(1, 1);\n    }\n\n    generateHVector() {\n        let o = this.generateVector(lbl =>\n            new Text()\n                .setPosition(o.getCenterPoint())\n                .setLabel(lbl)\n                .setOffset([0, -6])\n                .setFontStyle(''));\n        o['setLength'] = l =>\n            l > 0 ?\n                o.lineTo(['0D', l]) :\n                o.lineTo(['180D', -l])\n        return o;\n    }\n\n    applyCustomLabel(shape, inCaseOfSimpleText = null) {\n        shape['setText'] = shape.setLabel;\n        shape['setLabel'] = lbl => {\n            return (typeof lbl === 'string') ?\n                shape.setText(inCaseOfSimpleText ? inCaseOfSimpleText(lbl) : lbl) :\n                shape.setText(this.generateShape(lbl).alignTo(shape))\n        };\n    }\n\n    render(canvas) {\n        this.drawBox.render(canvas);\n    }\n}"]},"metadata":{},"sourceType":"module"}