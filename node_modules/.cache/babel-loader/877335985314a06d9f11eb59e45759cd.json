{"ast":null,"code":"import { Shape } from \"./shape\";\nimport { Line } from \"./line\";\nexport class Path extends Shape {\n  constructor() {\n    super();\n    this.points = [];\n    this.setStrokeWidth(1);\n  }\n  /**\n   * @param point [x,y]\n   */\n\n\n  setStart(point) {\n    this.setPosition(point);\n    this.points[0] = point;\n    return this;\n  }\n  /**\n   * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   */\n\n\n  lineTo(point) {\n    this.points.push(new Line().setEnd(point));\n    return this;\n  }\n  /**\n   * @param curve [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   * @param end [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   */\n\n\n  quadraticTo(curve, end) {\n    this.points.push(new Line().setQuadraticPoint(curve).setEnd(end));\n  }\n\n  render(canvasCtx) {\n    this.prepareLines();\n\n    for (let i = 1; i < this.points.length; i++) {\n      this.points[i].render(canvasCtx);\n    }\n  }\n\n  prepareLines() {\n    this.points[0] = this.getPosition();\n    this.points[1].setStart(this.points[0]);\n    this.initLine(this.points[1]);\n    this.points[1].preparePoints();\n\n    for (let i = 2; i < this.points.length; i++) {\n      this.points[i].setStart(this.points[i - 1].end.getAnchor());\n      this.initLine(this.points[i]);\n      this.points[i].preparePoints();\n    }\n  }\n\n  initLine(line) {\n    line.setFillColor(this.fillColor);\n    line.setStrokeColor(this.strokeColor);\n    line.setStrokeWidth(this.strokeWidth);\n    line.setStrokeStyle(this.strokeStyle);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/path.js"],"names":["Shape","Line","Path","constructor","points","setStrokeWidth","setStart","point","setPosition","lineTo","push","setEnd","quadraticTo","curve","end","setQuadraticPoint","render","canvasCtx","prepareLines","i","length","getPosition","initLine","preparePoints","getAnchor","line","setFillColor","fillColor","setStrokeColor","strokeColor","strokeWidth","setStrokeStyle","strokeStyle"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,SAApB;AACA,SAAQC,IAAR,QAAmB,QAAnB;AAEA,OAAO,MAAMC,IAAN,SAAmBF,KAAnB,CAAyB;AAG5BG,EAAAA,WAAW,GAAG;AACV;AADU,SAFdC,MAEc,GAFL,EAEK;AAEV,SAAKC,cAAL,CAAoB,CAApB;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,SAAKC,WAAL,CAAiBD,KAAjB;AACA,SAAKH,MAAL,CAAY,CAAZ,IAAiBG,KAAjB;AACA,WAAO,IAAP;AACH;AAED;AACJ;AACA;;;AACIE,EAAAA,MAAM,CAACF,KAAD,EAAQ;AACV,SAAKH,MAAL,CAAYM,IAAZ,CAAiB,IAAIT,IAAJ,GAAWU,MAAX,CAAkBJ,KAAlB,CAAjB;AACA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIK,EAAAA,WAAW,CAACC,KAAD,EAAQC,GAAR,EAAa;AACpB,SAAKV,MAAL,CAAYM,IAAZ,CAAiB,IAAIT,IAAJ,GAAWc,iBAAX,CAA6BF,KAA7B,EAAoCF,MAApC,CAA2CG,GAA3C,CAAjB;AACH;;AAEDE,EAAAA,MAAM,CAACC,SAAD,EAAY;AACd,SAAKC,YAAL;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKf,MAAL,CAAYgB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,WAAKf,MAAL,CAAYe,CAAZ,EAAeH,MAAf,CAAsBC,SAAtB;AACH;AACJ;;AAEDC,EAAAA,YAAY,GAAG;AACX,SAAKd,MAAL,CAAY,CAAZ,IAAiB,KAAKiB,WAAL,EAAjB;AAEA,SAAKjB,MAAL,CAAY,CAAZ,EAAeE,QAAf,CAAwB,KAAKF,MAAL,CAAY,CAAZ,CAAxB;AACA,SAAKkB,QAAL,CAAc,KAAKlB,MAAL,CAAY,CAAZ,CAAd;AACA,SAAKA,MAAL,CAAY,CAAZ,EAAemB,aAAf;;AAEA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKf,MAAL,CAAYgB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,WAAKf,MAAL,CAAYe,CAAZ,EAAeb,QAAf,CAAwB,KAAKF,MAAL,CAAYe,CAAC,GAAG,CAAhB,EAAmBL,GAAnB,CAAuBU,SAAvB,EAAxB;AACA,WAAKF,QAAL,CAAc,KAAKlB,MAAL,CAAYe,CAAZ,CAAd;AACA,WAAKf,MAAL,CAAYe,CAAZ,EAAeI,aAAf;AACH;AACJ;;AAEDD,EAAAA,QAAQ,CAACG,IAAD,EAAO;AACXA,IAAAA,IAAI,CAACC,YAAL,CAAkB,KAAKC,SAAvB;AACAF,IAAAA,IAAI,CAACG,cAAL,CAAoB,KAAKC,WAAzB;AACAJ,IAAAA,IAAI,CAACpB,cAAL,CAAoB,KAAKyB,WAAzB;AACAL,IAAAA,IAAI,CAACM,cAAL,CAAoB,KAAKC,WAAzB;AACH;;AA3D2B","sourcesContent":["import {Shape} from \"./shape\";\nimport {Line} from \"./line\";\n\nexport class Path extends Shape {\n    points = [];\n\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n    }\n\n    /**\n     * @param point [x,y]\n     */\n    setStart(point) {\n        this.setPosition(point);\n        this.points[0] = point;\n        return this;\n    }\n\n    /**\n     * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     */\n    lineTo(point) {\n        this.points.push(new Line().setEnd(point));\n        return this;\n    }\n\n    /**\n     * @param curve [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     * @param end [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     */\n    quadraticTo(curve, end) {\n        this.points.push(new Line().setQuadraticPoint(curve).setEnd(end));\n    }\n\n    render(canvasCtx) {\n        this.prepareLines();\n        for (let i = 1; i < this.points.length; i++) {\n            this.points[i].render(canvasCtx);\n        }\n    }\n\n    prepareLines() {\n        this.points[0] = this.getPosition();\n\n        this.points[1].setStart(this.points[0]);\n        this.initLine(this.points[1]);\n        this.points[1].preparePoints();\n\n        for (let i = 2; i < this.points.length; i++) {\n            this.points[i].setStart(this.points[i - 1].end.getAnchor());\n            this.initLine(this.points[i]);\n            this.points[i].preparePoints();\n        }\n    }\n\n    initLine(line) {\n        line.setFillColor(this.fillColor);\n        line.setStrokeColor(this.strokeColor);\n        line.setStrokeWidth(this.strokeWidth);\n        line.setStrokeStyle(this.strokeStyle);\n    }\n}"]},"metadata":{},"sourceType":"module"}