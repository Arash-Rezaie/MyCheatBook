{"ast":null,"code":"import { Text } from \"./text\";\nexport class Shape {\n  constructor() {\n    this.fillColor = undefined;\n    this.label = undefined;\n    this.strokeWidth = 0;\n    this.strokeColor = '#000';\n    this.strokeStyle = [1, 0];\n    this.offset = [0, 0];\n    this.basePosition = [0, 0];\n    this.xy = [0, 0];\n  }\n  /**\n   * calculate final position\n   */\n\n\n  calculateFinalPosition() {\n    this.xy = [this.basePosition[0] + this.offset[0], this.basePosition[1] + this.offset[1]];\n  }\n  /**\n   * @param fillColor internal color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n   * @returns {Shape}\n   */\n\n\n  setFillColor(fillColor) {\n    this.fillColor = fillColor;\n    return this;\n  }\n  /**\n   * @param strokeWidth int value\n   * @returns {Shape}\n   */\n\n\n  setStrokeWidth(strokeWidth) {\n    this.strokeWidth = strokeWidth;\n    return this;\n  }\n  /**\n   * set both fill color and stroke color\n   * @param color [green, blue, red, yellow, purple, brown, orange, pink]\n   * @return {Shape}\n   */\n\n\n  setColor(color) {\n    this.setFillColor(Shape.colors[color][0]);\n    this.setStrokeColor(Shape.colors[color][1]);\n    return this;\n  }\n  /**\n   * @param strokeColor stroke color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n   * @returns {Shape}\n   */\n\n\n  setStrokeColor(strokeColor) {\n    this.strokeColor = strokeColor;\n    return this;\n  }\n  /**\n   * make line dashed\n   * @param strokeStyle [int,int]. It means [fill, empty]\n   * @returns {Shape}\n   */\n\n\n  setStrokeStyle(strokeStyle) {\n    this.strokeStyle = strokeStyle;\n    return this;\n  }\n  /**\n   * label is going to be shown at center of this shape\n   * @param label string or Text object\n   * @returns {Shape}\n   */\n\n\n  setLabel(label) {\n    if (typeof label === \"string\") {\n      label = new Text().setPosition(this.getCenterPoint()).setLabel(label);\n    }\n\n    this.label = label;\n    return this;\n  }\n  /**\n   * @param position [x,y]\n   * @returns {Shape}\n   */\n\n\n  setPosition(position) {\n    this.basePosition = position;\n    this.calculateFinalPosition();\n    return this;\n  }\n  /**\n   * @param offset [xOffset,yOffset]\n   * @returns {Shape}\n   */\n\n\n  setOffset(offset) {\n    this.offset = offset;\n    this.calculateFinalPosition();\n    return this;\n  }\n  /**\n   * @param shape another shape object\n   * @returns {Shape}\n   */\n\n\n  alignTo(shape) {\n    this.setPosition(shape.getCenterPoint());\n    return this;\n  }\n  /**\n   * get final position\n   * @returns {*[]}\n   */\n\n\n  getPosition() {\n    return this.xy;\n  }\n  /**\n   * get center point of this shape\n   */\n\n\n  getCenterPoint() {\n    return this.getPosition();\n  }\n\n  getExternalPoint(angle, gap) {\n    return this.getPosition();\n  }\n  /**\n   * render label object\n   * @param ctx\n   */\n\n\n  showLabel(ctx) {\n    let p = this.getCenterPoint();\n    this.label.setPosition(p);\n    this.label.render(ctx);\n  }\n  /**\n   * apply configurations\n   * @param canvasCtx\n   */\n\n\n  render(canvasCtx) {\n    canvasCtx.fillStyle = this.fillColor;\n    canvasCtx.lineWidth = this.strokeWidth;\n    canvasCtx.strokeStyle = this.strokeColor;\n    canvasCtx.setLineDash(this.strokeStyle);\n    if (this.fillColor) canvasCtx.fill();\n    if (this.strokeWidth > 0) canvasCtx.stroke();\n    if (this.label) this.showLabel(canvasCtx);\n  }\n\n}\nShape.colors = {\n  'green': ['rgb(51, 204, 51)', 'rgb(0, 153, 51)'],\n  'blue': ['rgb(51, 102, 255)', 'rgb(0, 0, 255)'],\n  'red': ['rgb(255,0,0)', 'rgb(137,16,16)'],\n  'yellow': ['rgb(255, 255, 102)', 'rgb(255, 204, 0)'],\n  'purple': ['rgb(153, 51, 255)', 'rgb(121,7,191)'],\n  'brown': ['rgb(153, 102, 0)', 'rgb(102, 51, 0)'],\n  'orange': ['rgb(255, 153, 51)', 'rgb(255, 102, 0)'],\n  'pink': ['rgb(255, 102, 153)', 'rgb(255, 51, 153)']\n};","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/shape.js"],"names":["Text","Shape","constructor","fillColor","undefined","label","strokeWidth","strokeColor","strokeStyle","offset","basePosition","xy","calculateFinalPosition","setFillColor","setStrokeWidth","setColor","color","colors","setStrokeColor","setStrokeStyle","setLabel","setPosition","getCenterPoint","position","setOffset","alignTo","shape","getPosition","getExternalPoint","angle","gap","showLabel","ctx","p","render","canvasCtx","fillStyle","lineWidth","setLineDash","fill","stroke"],"mappings":"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","sourcesContent":["import {Text} from \"./text\";\n\nexport class Shape {\n    static colors = {\n        'green': ['rgb(51, 204, 51)', 'rgb(0, 153, 51)'],\n        'blue': ['rgb(51, 102, 255)', 'rgb(0, 0, 255)'],\n        'red': ['rgb(255,0,0)', 'rgb(137,16,16)'],\n        'yellow': ['rgb(255, 255, 102)', 'rgb(255, 204, 0)'],\n        'purple': ['rgb(153, 51, 255)', 'rgb(121,7,191)'],\n        'brown': ['rgb(153, 102, 0)', 'rgb(102, 51, 0)'],\n        'orange': ['rgb(255, 153, 51)', 'rgb(255, 102, 0)'],\n        'pink': ['rgb(255, 102, 153)', 'rgb(255, 51, 153)'],\n    };\n\n    constructor() {\n        this.fillColor = undefined;\n        this.label = undefined;\n        this.strokeWidth = 0;\n        this.strokeColor = '#000';\n        this.strokeStyle = [1, 0];\n        this.offset = [0, 0];\n        this.basePosition = [0, 0];\n        this.xy = [0, 0];\n    }\n\n    /**\n     * calculate final position\n     */\n    calculateFinalPosition() {\n        this.xy = [this.basePosition[0] + this.offset[0], this.basePosition[1] + this.offset[1]];\n    }\n\n    /**\n     * @param fillColor internal color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n     * @returns {Shape}\n     */\n    setFillColor(fillColor) {\n        this.fillColor = fillColor;\n        return this;\n    }\n\n    /**\n     * @param strokeWidth int value\n     * @returns {Shape}\n     */\n    setStrokeWidth(strokeWidth) {\n        this.strokeWidth = strokeWidth;\n        return this;\n    }\n\n    /**\n     * set both fill color and stroke color\n     * @param color [green, blue, red, yellow, purple, brown, orange, pink]\n     * @return {Shape}\n     */\n    setColor(color) {\n        this.setFillColor(Shape.colors[color][0]);\n        this.setStrokeColor(Shape.colors[color][1]);\n        return this;\n    }\n\n    /**\n     * @param strokeColor stroke color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n     * @returns {Shape}\n     */\n    setStrokeColor(strokeColor) {\n        this.strokeColor = strokeColor;\n        return this;\n    }\n\n    /**\n     * make line dashed\n     * @param strokeStyle [int,int]. It means [fill, empty]\n     * @returns {Shape}\n     */\n    setStrokeStyle(strokeStyle) {\n        this.strokeStyle = strokeStyle;\n        return this;\n    }\n\n    /**\n     * label is going to be shown at center of this shape\n     * @param label string or Text object\n     * @returns {Shape}\n     */\n    setLabel(label) {\n        if (typeof label === \"string\") {\n            label = new Text()\n                .setPosition(this.getCenterPoint())\n                .setLabel(label)\n        }\n        this.label = label;\n        return this;\n    }\n\n    /**\n     * @param position [x,y]\n     * @returns {Shape}\n     */\n    setPosition(position) {\n        this.basePosition = position;\n        this.calculateFinalPosition();\n        return this;\n    }\n\n    /**\n     * @param offset [xOffset,yOffset]\n     * @returns {Shape}\n     */\n    setOffset(offset) {\n        this.offset = offset;\n        this.calculateFinalPosition();\n        return this;\n    }\n\n    /**\n     * @param shape another shape object\n     * @returns {Shape}\n     */\n    alignTo(shape) {\n        this.setPosition(shape.getCenterPoint());\n        return this;\n    }\n\n    /**\n     * get final position\n     * @returns {*[]}\n     */\n    getPosition() {\n        return this.xy;\n    }\n\n    /**\n     * get center point of this shape\n     */\n    getCenterPoint() {\n        return this.getPosition();\n    }\n\n    getExternalPoint(angle, gap) {\n        return this.getPosition();\n    }\n\n    /**\n     * render label object\n     * @param ctx\n     */\n    showLabel(ctx) {\n        let p = this.getCenterPoint();\n        this.label.setPosition(p);\n        this.label.render(ctx);\n    }\n\n    /**\n     * apply configurations\n     * @param canvasCtx\n     */\n    render(canvasCtx) {\n        canvasCtx.fillStyle = this.fillColor;\n        canvasCtx.lineWidth = this.strokeWidth;\n        canvasCtx.strokeStyle = this.strokeColor;\n        canvasCtx.setLineDash(this.strokeStyle);\n        if (this.fillColor)\n            canvasCtx.fill();\n        if (this.strokeWidth > 0)\n            canvasCtx.stroke();\n        if (this.label)\n            this.showLabel(canvasCtx);\n    }\n}"]},"metadata":{},"sourceType":"module"}