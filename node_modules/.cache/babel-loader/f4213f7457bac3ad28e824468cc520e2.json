{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/media/arash/SanDisk/MyCheatBook/src/contents/spring5/core/core-cheats.js\";\nimport React from \"react\";\nimport { Bash, Frame, GenericCode, Java, Xml } from \"../../../components/blocks\";\nimport { InfoIcon } from \"../../../components/bubble\";\nimport { Blue, BlueBold, Bold, Bullet, FlexRow, Highlight, HorizontalLine, Important, Purple, Red } from \"../../../components/components\";\nimport { Float } from \"../../../components/float\";\nimport appContext from '../../../res/images/ApplicationContext.png';\nimport circularDependency from \"../../../res/images/circular-dependency.png\";\nimport beanLifecycle from \"../../../res/images/bean-life-cycle.png\";\nimport components from \"../../../res/images/components.png\";\nimport { DrawBoxComponent } from \"../../git/git-components\";\nimport { DrawBoxWrapper } from \"../../../components/drawbox/draw-box-wrapper\";\nexport function CoreCheats() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [getBeanContainer(), getScanningFilter(), getMerging(), getProfile(), getMultipleCandidate(), getXmlBasic(), getAnnotationBasic(), getAlias(), getPrivateConstructor(), getXmlLocalClass(), getAnnotationLocalClass(), getXmlCircularDependencies(), getAnnotationCircularDependencies(), getXmlLoadFromFile(), getJavaLoadFromFile(), getXmlChangingMethodBody(), getCollections(), getSpel(), getScopes(), getScopeIssue(), getBeanAware(), getTemplateClass(), getEvent(), getAsyncJob()]\n  }, void 0, true);\n}\n_c = CoreCheats;\n\nfunction getBeanContainer() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Catching bean',\n    children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n      children: [/*#__PURE__*/_jsxDEV(Important, {\n        children: [\"!the path in which we put java source and resource files is called ClassPath. It also can hold resources too.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), \"This is why, we use ClassPathXmlResource class to bring in our desired configuration file.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 107\n      }, this), \"Every thing under main dir is called ClassPath, so test is out of that.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FlexRow, {\n      children: [/*#__PURE__*/_jsxDEV(Java, {\n        description: 'using BeanFactory is deprecated',\n        children: `\n                    ClassPathResource resource = new ClassPathResource(\"containerconfig.xml\");\n                    BeanFactory beanFactory = new XmlBeanFactory(resource);\n                    return beanFactory.getBean(\"targetId\");\n                    `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        description: 'new fasion',\n        children: `\n                    ApplicationContext context = new ClassPathXmlApplicationContext(\"containerconfig.xml\");\n                    return (Car) context.getBean(\"car\");`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Important, {\n      children: \"ApplicationContext provides multiple configuration file registration.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'float-holder center-horizontally-relative inline',\n      children: [/*#__PURE__*/_jsxDEV(DrawBoxComponent, {\n        wh: [1200, 800],\n        shapeFactory: new DrawBoxWrapper().addShape({\n          shape: 'type',\n          id: 'i1',\n          label: 'ResourceLoader',\n          t: 'i',\n          pos: [40, 20],\n          width: 125\n        }).addShape({\n          shape: 'type',\n          id: 'i2',\n          label: 'ResourcePatternResolver',\n          t: 'i',\n          align: 'i1',\n          offset: [-87.5, 60],\n          width: 175\n        }).addShape({\n          shape: 'type',\n          id: 'i3',\n          label: 'ListableBeanFactory',\n          t: 'i',\n          align: 'i2',\n          offset: [100, -12],\n          width: 150\n        }).addShape({\n          shape: 'type',\n          id: 'i4',\n          label: 'HierarchicalBeanFactory',\n          t: 'i',\n          align: 'i3',\n          offset: [87, -12],\n          width: 168\n        }).addShape({\n          shape: 'type',\n          id: 'i5',\n          label: 'MessageSource',\n          t: 'i',\n          align: 'i4',\n          offset: [95, -12],\n          width: 125\n        }).addShape({\n          shape: 'type',\n          id: 'i6',\n          label: 'EnvironmentCapable',\n          t: 'i',\n          align: 'i5',\n          offset: [75, -12],\n          width: 150\n        }).addShape({\n          shape: 'type',\n          id: 'i7',\n          label: 'ApplicationEventPublisher',\n          t: 'i',\n          align: 'i6',\n          offset: [87, -12],\n          width: 175\n        }).addShape({\n          shape: 'type',\n          id: 'i8',\n          label: 'BeanFactory',\n          t: 'i',\n          align: 'i1',\n          offset: [200, -12],\n          width: 105\n        }).addShape({\n          shape: 'type',\n          id: 'i9',\n          label: 'FunctionalInterface',\n          t: '@',\n          align: 'i8',\n          offset: [503, -12],\n          width: 145\n        }).addShape({\n          shape: 'type',\n          id: 'i10',\n          label: 'ApplicationContext',\n          t: 'i',\n          align: 'i4',\n          offset: [0, 90],\n          width: 145\n        }).addShape({\n          shape: 'type',\n          id: 'c1',\n          label: 'GenericApplicationContext',\n          t: 'c',\n          align: 'i10',\n          offset: [-304, 60],\n          width: 180\n        }).addShape({\n          shape: 'type',\n          id: 'c2',\n          label: 'FileSystemXmlApplicationContext',\n          t: 'c',\n          align: 'c1',\n          offset: [105, -12],\n          width: 218\n        }).addShape({\n          shape: 'type',\n          id: 'c3',\n          label: 'ClassPathXmlApplicationContext',\n          t: 'c',\n          align: 'c2',\n          offset: [123, -12],\n          width: 215\n        }).addShape({\n          shape: 'type',\n          id: 'c4',\n          label: 'StaticApplicationContext',\n          t: 'c',\n          align: 'c1',\n          offset: [-295, 60],\n          width: 170\n        }).addShape({\n          shape: 'type',\n          id: 'c5',\n          label: 'AnnotationConfigApplicationContext',\n          t: 'c',\n          align: 'c4',\n          offset: [95, -12],\n          width: 230\n        }).addShape({\n          shape: 'type',\n          id: 'c6',\n          label: 'GenericGroovyApplicationContext',\n          t: 'c',\n          align: 'c5',\n          offset: [123, -12],\n          width: 220\n        }).addShape({\n          shape: 'typerel',\n          t: 'ii',\n          between: [['i2'], ['i1'], [20, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ii',\n          between: [['i3'], ['i8', -10, 0], [20, '_', -6]]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ii',\n          between: [['i4'], ['i8', 10, 0], [20, '_', -6]]\n        }).addShape({\n          shape: 'typerel',\n          t: 'i@',\n          between: [['i7'], ['i9', 0, -1], [20, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ii',\n          between: [['i10', -25, 0], ['i2'], [20, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ii',\n          between: [['i10', -15, 0], ['i3'], [30, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ii',\n          between: [['i10', -5, 0], ['i4'], [40, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ii',\n          between: [['i10', 5, 0], ['i5'], [40, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ii',\n          between: [['i10', 15, 0], ['i6'], [30, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ii',\n          between: [['i10', 25, 0], ['i7'], [10, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ci',\n          between: [['c1'], ['i10', -20, 0], [20, '_', -11]]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ci',\n          between: [['c2'], ['i10'], [20, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'ci',\n          between: [['c3'], ['i10', 20, 0], [20, '_', -10]]\n        }).addShape({\n          shape: 'typerel',\n          t: 'cc',\n          between: [['c4'], ['c1', -20, 0], [20, '_', -11]]\n        }).addShape({\n          shape: 'typerel',\n          t: 'cc',\n          between: [['c5'], ['c1'], [20, '_']]\n        }).addShape({\n          shape: 'typerel',\n          t: 'cc',\n          between: [['c6'], ['c1', 20, 0], [20, '_', -11]]\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: appContext,\n        alt: 'application context implementations',\n        style: {\n          width: '1200px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Float, {\n        l: 900,\n        t: 250,\n        lineTo: [864, 280],\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '190px'\n          },\n          children: \"To fetch xml configuration from a file inside the application itself\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Float, {\n        l: 700,\n        t: 190,\n        lineTo: [600, 263],\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '260px'\n          },\n          children: \"To read xml configuration from a file system. Path must be relative\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Float, {\n        l: 890,\n        t: 362,\n        lineTo: [873, 364],\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '300px'\n          },\n          children: \"To read configuration from groovy file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Float, {\n        l: 150,\n        t: 380,\n        lineTo: [625, 365],\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '300px'\n          },\n          children: \"To configure beans by annotations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Float, {\n        l: 10,\n        t: 260,\n        lineTo: [383, 330],\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '350px'\n          },\n          children: \"To setup features via programmatic registration, rather than reading bean definitions from external configuration sources. Mainly useful for testing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 18\n    }, this), \"Configuration file is due to determine instantiating mechanism.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 76\n    }, this), /*#__PURE__*/_jsxDEV(Blue, {\n      children: \"How to provide configuration file:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      children: [\"XML based configuration: provide a xml file to define instantiation mechanism. We name it \\\"containerconfix.xml\\\" in here:\", /*#__PURE__*/_jsxDEV(Xml, {\n        children: `\n                    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n                           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                           xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n                    \n                        <bean id=\"bean1\" class=\"Bean1\"/>\n                    </beans>`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                    public static void main(String[] args){\n                        ApplicationContext context = new ClassPathXmlApplicationContext(\"containerconfig.xml\");\n                        Bean1 bean1 = context.getBean(\"bean1\");\n                    }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '2.',\n      children: [\"Java based configuration:\", /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                    /* provide a class to create instances and annotate it with @Configuration */\n                    @Configuration\n                    public class AppConfig {\n                    \n                        @Bean\n                        public Bean1 getBean1(){\n                            return new Bean1();\n                        }\n                    }\n                    \n                    public static void main(String[] args){\n                        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n                        context.register(AppConfig.class);\n                        context.refresh();\n                        \n                        Bean1 bean1 = context.getBean(Bean1.class);\n                    }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '3.',\n      children: [\"Annotation based configuration:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 65\n      }, this), \"Using annotation instead of direct java codes such as \", /*#__PURE__*/_jsxDEV(Bold, {\n        children: \"@Component\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 20\n      }, this), \", \", /*#__PURE__*/_jsxDEV(Bold, {\n        children: \"@Repository\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 45\n      }, this), \", \", /*#__PURE__*/_jsxDEV(Bold, {\n        children: \"@Service\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 71\n      }, this), \", \", /*#__PURE__*/_jsxDEV(Bold, {\n        children: \"@Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 94\n      }, this), \",\", /*#__PURE__*/_jsxDEV(Bold, {\n        children: \"@Controller\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 41\n      }, this), \"Then we should aware spring of these classes by \", /*#__PURE__*/_jsxDEV(Bold, {\n        children: \"@ComponentScan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 65\n      }, this), /*#__PURE__*/_jsxDEV(FlexRow, {\n        children: [/*#__PURE__*/_jsxDEV(Java, {\n          children: `\n                        @Configuration\n                        @ComponentScan(\"com.arash\")\n                        public class AppConfig {\n                        }\n                        \n                        /* bean class */\n                        @Component\n                        public class Bean1 {\n                        }\n                        \n                        /* catching bean */\n                        public static void main(String[] args){\n                            AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n                            context.register(AppConfig.class);\n                            context.refresh();\n                            \n                            Bean1 bean1 = context.getBean(Bean1.class);\n                        }\n                        `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: components,\n            alt: 'Component hierarchy'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getScanningFilter() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Filtering through component scan',\n    children: [\"It is wise to exclude unwanted classes from being scanned by spring.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 81\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      title: 1,\n      children: `\n                @Configuration\n                /*\n                * type = FilterType.REGEX\n                * type = FilterType.ANNOTATION\n                * type = FilterType.ASPECTJ\n                * type = FilterType.ASSIGNABLE_TYPE\n                * type = FilterType.CUSTOM\n                */\n                @ComponentScan(basePackages = \"com\", includeFilters = {\n                @ComponentScan.Filter(type = FilterType.REGEX, pattern = \"*.*spring.obje*\"),\n                @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = MyAnnotation.class),\n                @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = Person.class)\n                })\n                public class AppConfig {\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Xml, {\n      title: 1,\n      children: `\n                <beans ...>\n                <context:component-scan base-package=\"com\">\n                <context:include-filter type=\"regex\" expression=\"soWhat*\"/>\n                <context:include-filter type=\"annotation\" expression=\"com.arash.models.common.MyAnnotation\"/>\n                </context:component-scan>\n                </beans>\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getMerging() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Merging configuration files',\n    children: [/*#__PURE__*/_jsxDEV(Xml, {\n      description: 'merging other configurations into xml',\n      children: `\n                <beans ...>\n                <context:annotation-config/>\n\n                <!-- scan a package to figure out its Components -->\n                <context:component-scan base-package=\"com\"/>\n                </beans>\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      description: 'merging other configurations into java class',\n      children: `\n                //merge other classes\n                @Import(OtherAppConfig.class)\n\n                //merge xml files\n                @ImportResource(locations = \"classpath:containerconfig.xml\")\n\n                @Configuration\n                public class AppConfig {\n                }\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getProfile() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Profile selection',\n    children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n      children: [/*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                // To check a property existence:\n                context.getEnvironment().containsProperty(\"who's_your_daddy\");\n\n                //all environments are not available in spring and some are provide by jvm\n                System.getProperty(\"propertyName\");\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this), \"To change profile at runtime:\", /*#__PURE__*/_jsxDEV(Red, {\n        children: \"!Not tested!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Bash, {\n        children: 'java -Dspring.profiles.active.pro -jar myJar.jar'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }, this), \"We can switch to another config via profile.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 57\n    }, this), \"First of, mark all classes belong to a profile\", /*#__PURE__*/_jsxDEV(Java, {\n      description: 'source code',\n      children: `\n                @Profile(\"develop\",\"!dev\")//! => active profile\n                public class Bean1 {\n\n                //access your desired environment\n                @Autowired\n                public EnvironmentConfiguration env;\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this), \"In xml, we have to assign a file for a profile:\", /*#__PURE__*/_jsxDEV(Xml, {\n      children: `\n                <beans\n                ...\n                profile=\"develop\">\n                ...\n                </beans>`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this), \"Now, select a profile:\", /*#__PURE__*/_jsxDEV(Xml, {\n      description: 'pom.xml',\n      children: `\n                <profiles>\n                <profile>\n                <id>develop</id>\n                <activation>\n                <activeByDefault>true</activeByDefault>\n                </activation>\n                </profile>\n                </profiles>`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this), \"To catch active profile:\", /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                @Component\n                public class Bean1 {\n                @Autowired\n                public Environment env;\n\n                public void loopThroughActiveProfiles() {\n                Arrays.stream(env.getActiveProfiles())\n                .forEach(System.out::println);\n                }\n\n                @Value(\"#{$\\{spring.profiles.active}}\")\n                String activeProfile;\n\n                @Autowired\n                private ConfigurableEnvironment cfgEnv;\n\n                public void setActiveProfile(String pName) {\n                //other information is available here\n                cfgEnv.setActiveProfiles(\"develop\");\n                }\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '22rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Highlight, {\n        children: [\"You have to follow \", /*#__PURE__*/_jsxDEV(Bold, {\n          children: \"profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 47\n        }, this), \" structure in the whole of project when you mention it.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getMultipleCandidate() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'multiple candidate',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '50rem'\n      },\n      children: \"There is possibility to have more than 1 candidate when you request a bean. To make spring to return true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 13\n    }, this), \"object you can use \", /*#__PURE__*/_jsxDEV(Bold, {\n      children: \"primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 32\n    }, this), \" and \", /*#__PURE__*/_jsxDEV(Bold, {\n      children: \"qualifier\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 57\n    }, this), \" key words.\", /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      children: [/*#__PURE__*/_jsxDEV(Bold, {\n        children: \"Primary:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 38\n      }, this), \"Set a bean as primary\", /*#__PURE__*/_jsxDEV(FlexRow, {\n        children: [/*#__PURE__*/_jsxDEV(Xml, {\n          title: 1,\n          children: `\n                <bean class=\"com.arash.models.multicandidate.Ferrari\"\n                id=\"ferrai\" primary=\"true\"/>\n                <bean class=\"com.arash.models.multicandidate.Lamborghini\"\n                id=\"lamborghini\" >`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Java, {\n          title: 1,\n          children: `\n                @Configuration\n                public class AppConfig {\n                @Primary\n                @Bean\n                public Car getLamborghini() {\n                return new Lamborghini();\n                }\n\n                @Bean\n                public Car getFerrari() {\n                return new Ferrari();\n                }\n                }`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '2.',\n      children: [/*#__PURE__*/_jsxDEV(Bold, {\n        children: \"Qualifier:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 40\n      }, this), \"determine what object should be injected based on the given information\", /*#__PURE__*/_jsxDEV(Java, {\n        description: 'custom qualifier',\n        children: `\n                @Target(ElementType.FIELD)\n                @Retention(RetentionPolicy.RUNTIME)\n                @Qualifier\n                public @interface MyQualifier {\n                String value() default \"\";\n                String color();\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FlexRow, {\n        children: [/*#__PURE__*/_jsxDEV(Xml, {\n          title: 1,\n          children: `\n                <!--qualifier with a simple string-->\n                <bean className=\"com.arash.models.multicandidate.Ferrari\"\n                id=\"ferrai\">\n                <qualifier value=\"ferrari\"/>\n                </bean>\n\n                <!--qualifier with custom selection property-->\n                <bean className=\"com.arash.models.multicandidate.Lamborghini\"\n                id=\"lamborghini\">\n                <qualifier type=\"com.arash.models.multicandidate.MyQualifier\">\n                <attribute key=\"color\" value=\"green\"/>\n                </qualifier>\n                </bean>\n\n                <bean className=\"com.arash.models.multicandidate.Pagani\"\n                id=\"pagani\">\n                <qualifier type=\"com.arash.models.multicandidate.MyQualifier\">\n                <attribute key=\"color\" value=\"black\"/>\n                </qualifier>\n                </bean>`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Java, {\n          title: 1,\n          children: `\n                @Configuration\n                public class AppConfig {\n                @Qualifier(\"ferrari\")\n                @Bean\n                public Car getFerrari() {\n                return new Ferrari();\n                }\n\n                @MyQualifier(\n                name = \"lambo\", color = \"green\")\n                @Bean\n                public Car getLamborghini() {\n                return new Lamborghini();\n                }\n\n                @Bean\n                @MyQualifier(\n                name = \"lambo\", color = \"black\")\n                public Car getPagani(){\n                return new Pagani();\n                }\n                }`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        description: 'usage',\n        children: `\n                public class Engineer extends Person {\n                @MyQualifier(name = \"lambo\", color = \"black\")\n                @Autowired\n                private Car car1;\n\n                @Autowired\n                @MyQualifier(name = \"lambo\", color = \"green\")\n                private Car car2;\n\n                @Autowired\n                @Qualifier(\"ferrari\")\n                private Car car3;\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getXmlBasic() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Passing arguments in xml',\n    children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n      children: [\"Catching data source for mysql sample:\", /*#__PURE__*/_jsxDEV(Xml, {\n        children: `\n                <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\">\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/spring\"/>\n                </bean>`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 13\n    }, this), \"Passing arguments through xml configuration file is available via constructor and setters.\", /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                public class Car {\n                private String name;\n                private int color;\n\n                public Car(String name, int color) {\n                this.name = name;\n                this.color = color;\n                }\n                }\n\n                public class Person {\n                private String name;\n                private String email;\n                private int age;\n                private int hairColor;\n                private Car car;\n\n                public Person(String name, String email, int age) {\n                this.name = name;\n                this.email = email;\n                this.age = age;\n                }\n\n                public void setHairColor(int hairColor) {\n                this.hairColor = hairColor;\n                }\n\n                public void setCar(Car car) {\n                this.car = car;\n                }\n                }\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Xml, {\n      children: `\n                <bean id=\"car\" class=\"com.arash.models.multiconfigfiles.Car\">\n                <constructor-arg value=\"ford\"/>\n                <constructor-arg value=\"-16711936\"/>\n                </bean>\n\n                <bean id=\"person\" class=\"com.arash.models.multiconfigfiles.Person\">\n                <!--\n                constructor args are sent by order by default,\n                but you can provide more information such as type or index\n                -->\n                <constructor-arg value=\"Arash\"/>\n                <constructor-arg index=\"1\" value=\"arash.12@gmail.com\"/>\n                <constructor-arg type=\"int\" value=\"33\"/>\n\n                <!-- passing parameter by setter -->\n                <property name=\"hairColor\" value=\"-16777216\"/>\n                <property name=\"car\" ref=\"car\"/> <!-- sending by ref -->\n                </bean>\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 13\n    }, this), \"It is also possible to pass values to relevant field by namespace\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 78\n    }, this), /*#__PURE__*/_jsxDEV(Highlight, {\n      children: [\"Remember to load \", /*#__PURE__*/_jsxDEV(Red, {\n        children: \"xmlns:p=\\\"http://www.springframework.org/schema/p\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 41\n      }, this), \" in header\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Xml, {\n      children: `\n                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <beans xmlns=\"http://www.springframework.org/schema/beans\"\n                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xmlns:p=\"http://www.springframework.org/schema/p\"\n                xsi:schemaLocation=\"\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n                <bean id=\"person2\" class=\"com.arash.models.xml.namespace.Person\"\n                p:car-ref=\"car\"\n                p:hairColor=\"-16711936\">\n                <constructor-arg value=\"Arash\"/>\n                <constructor-arg index=\"1\" value=\"arash.12@gmail.com\"/>\n                <constructor-arg type=\"int\" value=\"33\"/>\n                </bean>\n                </bean>\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Important, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '35rem',\n          display: 'inline-table'\n        },\n        children: \"Using property is recommended over constructor when we face \\\"circular dependency\\\" or \\\"different life length\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 528,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getAnnotationBasic() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Passing arguments in annotation',\n    children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(Blue, {\n          children: \"Wiring:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 21\n        }, this), \" connecting objects to each other is called wiring.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(Blue, {\n          children: \"@Autowired\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 21\n        }, this), \" does not work on arrays\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(Purple, {\n          children: \"some equivalents for annotations:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 71\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Spring\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"javax\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 649,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 647,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Autowired\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 654,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Inject, @Resource\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 655,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Component\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Named, @ManagedBean\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 659,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Qualifier\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 662,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Qualifier, @Named\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 663,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 661,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 666,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"---\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 667,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 665,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Required\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 670,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"---\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 671,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Lazy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"---\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 675,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Scope(\\u201Csingleton\\u201D)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"@Singleton\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                @Component\n                public class Car {\n                private String name;\n                private int color;\n\n                public Car(@Value(\"ford\") String name, @Value(\"-16711936\") int color) {\n                this.name = name;\n                this.color = color;\n                }\n                }\n\n                @Component\n                public class Person {\n                private String name;\n\n                @Value(\"-16777216\")\n                private int hairColor;\n\n                @Autowired\n                private Car car;\n\n                @Value(\"Arash\")\n                public void setName(String name){\n                this.name = name;\n                }\n                }\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 635,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getAlias() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Alias',\n    children: [/*#__PURE__*/_jsxDEV(Xml, {\n      title: 1,\n      children: `\n                <bean id=\"car\" name=\"car\" class=\"com.arash.models.Car\"/>\n                <alias name=\"car\" alias=\"automobile\"/>\n                <alias name=\"car\" alias=\"vehicle\"/>\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      title: 1,\n      children: `\n                @Bean({\"car\", \"automobile\", \"vehicle\"})\n                private Car getCar() {\n                return new Car(\"ford\", -16711936);\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      description: 'usage',\n      children: `\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                Car car = (Car) ctx.getBean(\"car\");\n                Car car2 = (Car) ctx.getBean(\"automobile\");\n                Car car3 = (Car) ctx.getBean(\"vehicle\");`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 721,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getPrivateConstructor() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Private constructor',\n    children: [/*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                public class PrivateConstructor {\n\n                private PrivateConstructor() {\n                }\n\n                public static PrivateConstructor getInstance(){\n                return new PrivateConstructor();\n                }\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Xml, {\n      children: `\n                <!--\n                as spring is all about reflection, so program elements scope makes no problem.\n                It works pretty nice in spring 4. Also, some other ways are avaiable\n                -->\n                <bean id=\"privateConstructor\" class=\"com.arash.models.privateconstructor.PrivateConstructor\"/>\n\n                <!-- access through static method -->\n                <bean id=\"privateConstructor2\" class=\"com.arash.models.privateconstructor.PrivateConstructor\"\n                factory-method=\"getInstance\"/>\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 749,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getXmlLocalClass() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Inner & Nested class in xml',\n    children: [\"Instantiating nested class is easy as the class is static\", /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                public class ParentClass {\n\n                public static class NestedClass {\n                }\n\n                public class InnerClass {\n                }\n                }\n\n                //how to get instance in java\n                ParentClass parentClass = new ParentClass();\n                ParentClass.NestedClass nestedClass = new ParentClass.NestedClass();\n                ParentClass.InnerClass innerClass = pc.new InnerClass();`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 783,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Xml, {\n      children: `\n                <!-- parent class: -->\n                <bean id=\"parentClass\" class=\"ParentClass\"/>\n\n                <!-- creating public nested class is easy. Use '$' instead of '.' -->\n                <bean id=\"nestedClass\" class=\"ParentClass$NestedClass\"/>\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 13\n    }, this), \"Instantiating inner class is a bit more complicated as it needs its parent class instance.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 808,\n      columnNumber: 103\n    }, this), \"To do that, we should hire a generator\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 51\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 56\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      children: [/*#__PURE__*/_jsxDEV(BlueBold, {\n        children: \"factory-bean:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                public class ParentClass {\n\n                public static class NestedClass {\n                }\n\n                public class InnerClass {\n                }\n                }\n\n                public class InnerClassFactory implements FactoryBean<ParentClass.InnerClass> {\n\n                @Override\n                public ParentClass.InnerClass getObject() throws Exception {\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                ParentClass pc = (ParentClass) ctx.getBean(\"parentClass\");\n                return pc.new InnerClass();\n                }\n\n                @Override\n                public Class<?> getObjectType() {\n                return ParentClass.InnerClass.class;\n                }\n\n                @Override\n                public boolean isSingleton() {\n                return false;\n                }\n                }\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 811,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Xml, {\n        children: `\n                <bean id=\"parentClass\" class=\"ParentClass\"/>\n\n                <!-- creating InnerClass by factory bean. Factory class must implement FactoryBean -->\n                <bean id=\"innerClass\" class=\"com.arash.models.localclass.InnerClassFactory\">`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 843,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '2.',\n      children: [/*#__PURE__*/_jsxDEV(BlueBold, {\n        children: \"factory-method:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                public class ParentClass {\n                public static class NestedClass {\n                }\n\n                public class InnerClass {\n                }\n\n                public InnerClass getInnerClassInstance() {\n                return new InnerClass();\n                }\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Xml, {\n        children: `\n                <bean id=\"parentClass\" class=\"ParentClass\"/>\n\n                <!-- creating InnerClass by factory method -->\n                <bean id=\"innerClass\" class=\"com.arash.models.localclass.ParentClass.InnerClass\"\n                factory-bean=\"parentClass\" factory-method=\"getInnerClassInstance\"/>`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 781,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getAnnotationLocalClass() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Inner & Nested class in annotation',\n    children: /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                @Component\n                public class ParentClass {\n                @Component\n                public static class NestedClass {\n                }\n\n                @Component\n                public class InnerClass {\n                }\n                }\n\n                //usage>>>\n                ApplicationContext ctx = ContextProvider.getAnnotaionContext();\n                ParentClass pc = ctx.getBean(ParentClass.class);\n                ParentClass.NestedClass nc = ctx.getBean(ParentClass.NestedClass.class);\n                ParentClass.InnerClass ic=ctx.getBean(ParentClass.InnerClass.class);\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 882,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getXmlCircularDependencies() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Circular dependency in xml configuration',\n    children: [\"The problem is a set of commplicated dependencies which can not be resolved so easily.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 910,\n      columnNumber: 99\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: circularDependency,\n      alt: 'circular dependency'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 911,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 911,\n      columnNumber: 72\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 911,\n      columnNumber: 77\n    }, this), \"check the following examples out:\", /*#__PURE__*/_jsxDEV(FlexRow, {\n      children: [/*#__PURE__*/_jsxDEV(Java, {\n        title: true,\n        children: `\n                public class Student {\n                private Shoes shoes;\n\n                public Student(Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                public class Shoes {\n                private Student student;\n\n                public Shoes(Student student) {\n                this.student = student;\n                }\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Xml, {\n        title: true,\n        description: 'this config fails',\n        children: `\n                <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                <constructor-arg ref=\"shoes\"/>\n                </bean>\n                <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 932,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 913,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 943,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: 'purple',\n      children: \"To overcome this problem there are some suggestions:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      children: [\"Changing a constructor to setter\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 66\n      }, this), /*#__PURE__*/_jsxDEV(Important, {\n        children: \"Bean definition follows no order whilst usage order is, so this way is not recommended\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 946,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 44\n      }, this), /*#__PURE__*/_jsxDEV(Highlight, {\n        children: \"If you turn constructor of both mentioned classes to setter, there would be no matter with the order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 948,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FlexRow, {\n        children: [/*#__PURE__*/_jsxDEV(Java, {\n          title: true,\n          description: 'use setter instead of constructor',\n          children: `\n                public class Student {\n                private Shoes shoes;\n\n                public void setShoes(Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                public class Shoes {\n                private Student student;\n\n                public Shoes(Student student) {\n                this.student = student;\n                }\n                }\n\n                ------------------------------------------\n\n                //usage\n                ApplicationContext ctx;\n                ctx = ContextProvider.getXmlContext();\n\n                //correct order\n                Student student = ctx.getBean(Student.class);\n                Shoes shoes= (Shoes) ctx.getBean(\"shoes\");\n\n                //incorrect order\n                Shoes shoes= (Shoes) ctx.getBean(\"shoes\");\n                Student student = ctx.getBean(Student.class);\n                `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 952,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Xml, {\n          title: true,\n          description: 'one property & one constructor',\n          children: `\n                <bean id=\"student\"\n                class=\"com.arash.models.circulardep.Student\">\n                <property name=\"shoes\" ref=\"shoes\"/>\n                </bean>\n\n                <bean id=\"shoes\"\n                class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 985,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 945,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 999,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '2.',\n      children: [\"Using lazy-init\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 49\n      }, this), \"By this way, we can define that which bean must be initialized on demand, therefor order problem ignored.\", /*#__PURE__*/_jsxDEV(FlexRow, {\n        children: [/*#__PURE__*/_jsxDEV(Java, {\n          title: true,\n          description: 'only student drops its constructor',\n          children: `\n                public class Student {\n                private Shoes shoes;\n\n                public void setShoes(Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                public class Shoes {\n                private Student student;\n\n                public Shoes(Student student) {\n                this.student = student;\n                }\n                }\n                `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1004,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Xml, {\n          title: true,\n          description: 'define who has to laod at first',\n          children: `\n                <bean id=\"student\" lazy-init=\"false\"\n                class=\"com.arash.models.circulardep.Student\">\n                <property name=\"student\" ref=\"shoes\"/>\n                </bean>\n\n                <bean id=\"shoes\" lazy-init=\"true\"\n                class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1023,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1000,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1036,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '3.',\n      children: [\"Using idref (idref is id of a bean as string, but it checks the existence of the bean)\", /*#__PURE__*/_jsxDEV(FlexRow, {\n        children: [/*#__PURE__*/_jsxDEV(Java, {\n          title: true,\n          description: 'save idref and init before use',\n          children: `\n                public class Student {\n                private String shoesId;\n                private Shoes shoes;\n\n                public Student(String shoesId) {\n                this.shoesId = shoesId;\n                }\n\n                public void init(){\n                ApplicationContext ctx;\n                ctx = ContextProvider.getXmlContext();\n                shoes = (Shoes) ctx.getBean(shoesId);\n                }\n                }`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1039,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Xml, {\n          title: true,\n          description: 'pass idref instead of ref',\n          children: `\n                <bean id=\"student\"\n                class=\"com.arash.models.circulardep.Student\">\n                <constructor-arg>\n                <idref bean=\"shoes\"/>\n                </constructor-arg>\n                </bean>\n                <bean id=\"shoes\"\n                class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1056,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1038,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1070,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '4.',\n      children: [\"Using depends-on\", /*#__PURE__*/_jsxDEV(FlexRow, {\n        children: [/*#__PURE__*/_jsxDEV(Java, {\n          title: true,\n          children: `\n                public class Student {\n                private Shoes shoes;\n\n                public void setShoes(Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                public class Shoes {\n                private Student student;\n\n                public Shoes(Student student) {\n                this.student = student;\n                }\n                }\n                `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Xml, {\n          title: true,\n          description: 'define who depends on who',\n          children: `\n                <bean id=\"student\"\n                class=\"com.arash.models.circulardep.Student\">\n                <property name=\"student\" ref=\"shoes\"/>\n                </bean>\n\n                <bean id=\"shoes\" depends-on=\"student\"\n                class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1092,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1071,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 909,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getAnnotationCircularDependencies() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Circular dependency in annotation configuration',\n    children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n      children: [/*#__PURE__*/_jsxDEV(Blue, {\n        children: \"@Lazy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 17\n      }, this), \" is available in spring too to load a programming element on demand\", /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                @Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.FIELD})\n                @Retention(RetentionPolicy.RUNTIME)\n                @Documented\n                public @interface Lazy {\n                boolean value() default true;\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      description: 'resolve both via constructor; won\\'t work',\n      children: `\n                @Component\n                public class Student {\n                private Shoes shoes;\n\n                public Student(@Autowired Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                @Component\n                public class Shoes {\n                private Student student;\n\n                public Shoes(@Autowired Student student) {\n                this.student = student;\n                }\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      description: 'resolve only one via constructor; works painless',\n      children: `\n                @Component\n                public class Student {\n                private Shoes shoes;\n\n                public Student(@Autowired Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                @Component\n                public class Shoes {\n                @Autowired\n                private Student student;\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1112,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getXmlLoadFromFile() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Load properties from a file in xml',\n    children: [\"Let's have a property file containing:\", /*#__PURE__*/_jsxDEV(GenericCode, {\n      title: 'jdbc.properties',\n      children: `\n                jdbc.driverClassName=com.mysql.jdbc.Driver\n                jdbc.url=jdbc:mysql://localhost:3306/concretepage\n                jdbc.username=root\n                jdbc.password=`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1171,\n      columnNumber: 13\n    }, this), \"Now it's time to load the file\", /*#__PURE__*/_jsxDEV(Xml, {\n      description: 'using PropertySourcesPlaceholderConfigurer class',\n      children: `\n                <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n                <property name=\"location\" value=\"jdbc.properties\"/>\n                </bean>`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Xml, {\n      description: 'using spring itself place-holder manager',\n      children: '<context:property-placeholder location=\"jdbc.properties\"/>'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Xml, {\n      description: 'usage',\n      children: `\n                <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\">\n                <property name=\"username\" value=\"$\\{jdbc.username}\"/>\n                <property name=\"password\" value=\"$\\{jdbc.password}\"/>\n                <property name=\"url\" value=\"$\\{jdbc.url}\"/>\n                <property name=\"driverClassName\" value=\"$\\{jdbc.driverClassName}\"/>\n                </bean>`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1189,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1169,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getJavaLoadFromFile() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Load properties from a file in annotation',\n    children: [/*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      children: [\"Via context environment:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1206,\n        columnNumber: 41\n      }, this), \"add \", /*#__PURE__*/_jsxDEV(Blue, {\n        children: \"@PropertySource\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1207,\n        columnNumber: 21\n      }, this), \" to your configuration class and catch it by context.getEnvironment()\", /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                @Configuration\n                @ComponentScan(\"com.arash\")\n                @PropertySource(\"classpath:jdbc.properties\")\n                public class AppConfig {\n                }\n\n                //usage>>>\n                ApplicationContext ctx = ContextProvider.getAnnotaionContext();\n                Environment env = ctx.getEnvironment();\n                System.out.println(\"driver: \" + env.getProperty(\"jdbc.driverClassName\"));\n                System.out.println(\"url: \"+env.getProperty(\"jdbc.url\"));\n                System.out.println(\"username: \"+env.getProperty(\"jdbc.username\"));\n                System.out.println(\"password: \"+env.getProperty(\"jdbc.password\"));\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1208,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '2.',\n      children: [\"Via \", /*#__PURE__*/_jsxDEV(Blue, {\n        children: \"@Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1227,\n        columnNumber: 21\n      }, this), \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1227,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n        levle: 1,\n        title: '●',\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '30rem'\n          },\n          children: [\"return a \", /*#__PURE__*/_jsxDEV(Blue, {\n            children: \"PropertySourcesPlaceholderConfigurer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1230,\n            columnNumber: 34\n          }, this), \" bean which is loaded by \", /*#__PURE__*/_jsxDEV(Blue, {\n            children: \"@PropertySource\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1231,\n            columnNumber: 28\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1229,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                @Configuration\n                @ComponentScan(\"com.arash\")\n                @PropertySources({\n                @PropertySource(\"configs.properties\"),\n                @PropertySource(\"classpath:jdbc.properties\")\n                })\n                public class AppConfig {\n\n                @Bean\n                public PropertySourcesPlaceholderConfigurer propertyConfigInDev() {\n                return new PropertySourcesPlaceholderConfigurer();\n                }\n                }\n\n                // Notice that you must follow format \"#{'$\\{prop-name}'}\" for @Value\n                @Component\n                public class JdbcProp {\n                @Value(\"#{'$\\{jdbc.driverClassName}'}\")\n                private String driverClassName;\n\n                @Value(\"#{'$\\{jdbc.url}'}\")\n                private String url;\n\n                @Value(\"#{'$\\{jdbc.username}'}\")\n                private String username;\n\n                @Value(\"#{'$\\{jdbc.password}'}\")\n                private String password;\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1234,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1226,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1267,\n      columnNumber: 13\n    }, this), \"Loading generic file:\", /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      children: [\"Through \", /*#__PURE__*/_jsxDEV(Blue, {\n        children: \"@Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1270,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                @Component\n                public class TextFile {\n                @Value(\"classpath:data.bat\")\n                private String value;\n                }\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1271,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '2.',\n      children: [\"Through \", /*#__PURE__*/_jsxDEV(Blue, {\n        children: \"Resource\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1282,\n        columnNumber: 25\n      }, this), \":\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1282,\n        columnNumber: 47\n      }, this), \"Context has a Resource object embedded, So you can use that one too\", /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                @Component\n                public class AnyFile {\n                @Autowired\n                private ResourceLoader resourceLoader;\n\n                public Resource getBigFile(){\n                return resourceLoader.getResource(\"classpath:bigData.dat\");\n                }\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1284,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1281,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1204,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getXmlChangingMethodBody() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Changing method body',\n    children: [/*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      children: [\"Lookup method\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1305,\n        columnNumber: 30\n      }, this), \"To put it in simple words, lookup method injection is the process to override a Spring bean at the runtime.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1307,\n        columnNumber: 25\n      }, this), \"Use \\\"lookup\\\" to inject a method body without implementing an abstract class\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1308,\n        columnNumber: 92\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                public class CheeseBurger {\n                }\n\n                public class MushroomBurger {\n                }\n\n                public abstract class BurgerShop {\n                public abstract MushroomBurger getMushroomBurger();\n\n                public abstract CheeseBurger getCheeseBurger();\n                }\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1309,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Xml, {\n        children: `\n                <bean id=\"cheeseBurger\" class=\"com.arash.models.lookup.CheeseBurger\"/>\n                <bean id=\"mushroomBurger\" class=\"com.arash.models.lookup.MushroomBurger\"/>\n                <bean id=\"burgerShop\" class=\"com.arash.models.lookup.BurgerShop\">\n                <lookup-method bean=\"cheeseBurger\" name=\"getCheeseBurger\"/>\n                <lookup-method bean=\"mushroomBurger\" name=\"getMushroomBurger\"/>\n                </bean>\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1324,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1304,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '2.',\n      children: [\"Replacer method\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1337,\n        columnNumber: 32\n      }, this), \"Use \\\"method replacer\\\" to replace a method with the desired one by implementing MethodReplacer\", /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                public class MyCar {\n                public String getMyFavoriteCar() {\n                return \"Pagani\";\n                }\n                }\n\n                public class MyReplacer implements MethodReplacer {\n                @Override\n                public Object reimplement(Object o, Method method, Object[] objects) throws Throwable {\n                return \"Lamborghini\";\n                }\n                }\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1339,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Xml, {\n        children: `\n                <bean id=\"replacer\" class=\"com.arash.models.replacer.MyReplacer\"/>\n                <bean id=\"myCar\" class=\"com.arash.models.replacer.MyCar\">\n                <replaced-method name=\"getMyFavoriteCar\" replacer=\"replacer\"/>\n                </bean>\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1336,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1303,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getCollections() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Collections',\n    children: /*#__PURE__*/_jsxDEV(Xml, {\n      children: `\n                <bean id=\"propCollection\" class=\"com.arash.models.collections.PropertyCollection\">\n                <property name=\"map\">\n                <props>\n                <prop key=\"key1\">value1</prop>\n                <prop key=\"key2\">value2</prop>\n                </props>\n                </property>\n                </bean>\n\n                <bean id=\"mapCollection\" class=\"com.arash.models.collections.MapCollection\">\n                <property name=\"map\">\n                <map>\n                <entry key=\"key1\" value=\"value1\"/>\n                <entry key=\"key2\" value=\"value2\"/>\n                </map>\n                </property>\n                </bean>\n\n                <bean id=\"listCollection\" class=\"com.arash.models.collections.ListCollection\">\n                <property name=\"map\">\n                <list>\n                <value>entry1</value>\n                <ref bean=\"bean1\"/>\n                </list>\n                </property>\n                </bean>\n\n                <bean id=\"setCollection\" class=\"com.arash.models.collections.SetCollection\">\n                <property name=\"map\">\n                <set>\n                <value>entry1</value>\n                <ref bean=\"bean1\"/>\n                </set>\n                </property>\n                </bean>`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1371,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1370,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getSpel() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Spring Expression Language (SPEL)',\n    children: [\"this expression is useful when we are willing to pass some data via @Value or XML or to execute a tiny piece of code easily.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1418,\n      columnNumber: 25\n    }, this), \"The general format is \", /*#__PURE__*/_jsxDEV(Bold, {\n      children: '#{SPEL}'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1419,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1419,\n      columnNumber: 59\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1419,\n      columnNumber: 64\n    }, this), /*#__PURE__*/_jsxDEV(Purple, {\n      children: \"Usage:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1420,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      level: 1,\n      children: [/*#__PURE__*/_jsxDEV(Bold, {\n        children: \"java:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1422,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                ExpressionParser parser = new SpelExpressionParser();\n                Expression exp = parser.parseExpression(\"'Hello World'\");\n                String message = (String) exp.getValue();`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1423,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1421,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '2.',\n      level: 1,\n      children: [/*#__PURE__*/_jsxDEV(Bold, {\n        children: \"xml:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1431,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Xml, {\n        children: `\n                <!--calculate some value by spel-->\n                <bean id=\"numberGuess\" class=\"com.arash.models.ANumber\">\n                <property name=\"randomNumber\" value=\"#{T(java.lang.Math).random() * 100.0}\"/>\n                </bean>\n\n                <!--using a property of another class-->\n                <bean id=\"shapeGuess\" class=\"com.arash.models.ANumber\">\n                <property name=\"randomNumber\" value=\"#{someClass.prop}\"/>\n                </bean>`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1432,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1430,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      level: 1,\n      children: [/*#__PURE__*/_jsxDEV(Bold, {\n        children: \"annotation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                public class ANumber {\n                @Value(\"900\")\n                private int randomNumber;\n\n                public void setRandomNumber(int randomNumber) {\n                this.randomNumber = randomNumber;\n                }\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1447,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1445,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1459,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                /*** literal expression ***/\n                “'Hello World'”\n                \"6.0221415E+23\"\n                \"0x7FFFFFFF\"\n                \"true\"\n                \"null\"\n\n                /*** properties, arrays, lists, maps, indexers ***/\n                \"Birthdate.Year + 1900\"\n                \"Members[0].Inventions[6]\"\n                \"Officers['president'].PlaceOfBirth.City\"\n\n                StandardEvaluationContext context = new StandardEvaluationContext();\n\n                /*** inline lists, Maps ***/\n                List numbers = (List) parser.parseExpression(\"{1,2,3,4}\").getValue(context);\n                List listOfLists = (List) parser.parseExpression(\"{{'a','b'},{'x','y'}}\").getValue(context);\n                Map lst = (Map) parser.parseExpression(\"{'k1':'v1','k2':'v2'}\").getValue(context);\n\n                /*** array construction ***/\n                int[] numbers1 = (int[]) parser.parseExpression(\"new int[4]\").getValue(context);\n                int[] numbers2 = (int[]) parser.parseExpression(\"new int[]{1,2,3}\").getValue(context);\n                int[][] numbers3 = (int[][]) parser.parseExpression(\"new int[4][5]\").getValue(context);\n\n                /*** methods ***/\n                String c = parser.parseExpression(\"'abc'.substring(2, 3)\").getValue(String.class);\n\n                /*** operators ***/\n                boolean a = parser.parseExpression(\"2 == 2\").getValue(Boolean.class); //true\n                boolean b = parser.parseExpression(\"2 < -5.0\").getValue(Boolean.class); //false\n                boolean c = parser.parseExpression(\"'black' < 'block'\").getValue(Boolean.class); //true\n                boolean d = parser.parseExpression(\"'5.00' matches '^-?\\\\\\\\d+(\\\\\\\\.\\\\\\\\d{2})?$'\").getValue(Boolean.class); //true\n                boolean e = parser.parseExpression(\"true and false\").getValue(Boolean.class); //false\n                String expression = \"isMember('Nikola Tesla') and isMember('Mihajlo Pupin')\";\n                boolean f = parser.parseExpression(\"!true\").getValue(Boolean.class); //false\n                int two = parser.parseExpression(\"1 + 1\").getValue(Integer.class); // 2\n                String g = parser.parseExpression(\"'test' + ' ' + 'string'\").getValue(String.class);  // 'test string'\n                double h = parser.parseExpression(\"1000.00 - 1e4\").getValue(Double.class); // -9000\n                String i = parser.parseExpression(\"Name = 'Alexandar Seovic'\").getValue(context, String.class);\n\n                /*** types ***/\n                Class dateClass = parser.parseExpression(\"T(java.util.Date)\").getValue(Class.class);\n                Class stringClass = parser.parseExpression(\"T(String)\").getValue(Class.class);\n                boolean j = parser.parseExpression(\"T(java.math.RoundingMode).CEILING < T(java.math.RoundingMode).FLOOR\").getValue(Boolean.class); //true\n\n                /*** constructors ***/\n                Inventor einstein = parser.parseExpression(\"new com.arash.Inventor('Albert Einstein', 'German')\").getValue(Inventor.class);\n\n                /*** variables ***/\n                Inventor tesla = new Inventor(\"Nikola Tesla\", \"Serbian\");\n                StandardEvaluationContext context2 = new StandardEvaluationContext(tesla);\n                context2.setVariable(\"newName\", \"Mike Tesla\");\n                parser.parseExpression(\"Name = #newName\").getValue(context);\n                System.out.println(tesla.getName()); // \"Mike Tesla\"\n\n                /*** another sample ***/\n                List<Integer> primes = new ArrayList<Integer>();\n                primes.addAll(Arrays.asList(2, 3, 5, 7, 11, 13, 17));\n                context2.setVariable(\"primes\", primes);\n                List<Integer> primes2 = (List<Integer>) parser.parseExpression(\"#primes.?[#this>10]\").getValue(context); // select of numbers > 10\n\n                /*** functions ***/\n                context2.registerFunction(\"reverseString\", StringUtils.class.getDeclaredMethod(\"reverseString\", new Class[]{String.class}));\n                String helloWorldReversed = parser.parseExpression(\"#reverseString('hello')\").getValue(context, String.class);\n                context2.setBeanResolver(new MyBeanResolver());\n                Object bean = parser.parseExpression(\"@foo\").getValue(context);\n\n                /*** ternary Operator (If - Then - Else) ***/\n                String falseString = parser.parseExpression(\"false ? 'trueExp' : 'falseExp'\").getValue(String.class);\n\n                /*** collection Selection ***/\n                List<Inventor> list = (List<Inventor>) parser.parseExpression(\"Members.?[Nationality == 'Serbian']\").getValue(context2);\n                Map newMap = (Map) parser.parseExpression(\"map.?[value<27]\").getValue();\n                List placesOfBirth = (List) parser.parseExpression(\"Members.![placeOfBirth.city]\");\n\n\n                /*** expression templating ***/\n                String randomPhrase = parser.parseExpression(\"random number is #{T(java.lang.Math).random()}\", new TemplateParserContext()).getValue(String.class);\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1460,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1415,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getScopes() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Scopes',\n    children: [/*#__PURE__*/_jsxDEV(Blue, {\n      children: \"Defined scopes:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1549,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: 'singleton:',\n      children: \"only one instance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1550,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: 'prototype:',\n      children: \"new instance on each call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1551,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: 'request:',\n      children: \"one instance per network request. It saves on request object\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1552,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: 'session:',\n      children: \"one instance per session (again on the network)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1553,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: 'application:',\n      children: \"one instance per application. It stores in ServletContext\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1554,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: 'websocket:',\n      children: \"one instance per websocket.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1555,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Xml, {\n      description: 'xml configuration',\n      children: `<bean id=\"bean1\" class=\"Bean1\" scope=\"prototype\"/>`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1556,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      description: 'java configuration',\n      children: `\n                @Configuration\n                public class AppConfig {\n                @Bean()\n                @Scope(\"prototype\")\n                private Bean1 getBean1(){\n                return new Bean1();\n                }\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1559,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      description: 'annotation configuration',\n      children: `\n                @Component\n                @Scope(\"prototype\")\n                public class Bean1 {\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1570,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(Red, {\n        children: \"All web scopes need listener to get worked and listeners must be defined at web layer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1579,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1578,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1548,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getScopeIssue() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Different scope wiring issue',\n    children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n      children: [\"Some times we involve with Longer Lived objects and Shorter Lived objects. What really happens when you have different scopes? Who has to handle this situation.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1590,\n        columnNumber: 82\n      }, this), \"For example, you have a singleton class which contains some prototype classes. Singleton class is created only once and never changes but prototype classes must be changed each time.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1592,\n        columnNumber: 101\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1592,\n        columnNumber: 106\n      }, this), \"Consider the following example:\", /*#__PURE__*/_jsxDEV(FlexRow, {\n        children: [/*#__PURE__*/_jsxDEV(Java, {\n          children: `\n                public class PrototypeClass {\n                }\n\n                public class SingletonClass {\n                private PrototypeClass prototypeClass;\n\n                public PrototypeClass getPrototypeClass() {\n                return prototypeClass;\n                }\n\n                public void setPrototypeClass(PrototypeClass prototypeClass) {\n                this.prototypeClass = prototypeClass;\n                }\n                }`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1595,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Xml, {\n          children: `\n                <bean id=\"singletonClass\" class=\"com.arash.models.scopes.SingletonClass\" scope=\"singleton\">\n                <property name=\"prototypeClass\" ref=\"prototypeClass\"/>\n                </bean>\n                <bean id=\"prototypeClass\" class=\"com.arash.models.scopes.PrototypeClass\" scope=\"prototype\"/>`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1612,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1594,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        description: 'usage:',\n        children: `\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                SingletonClass sc = ctx.getBean(\"singletonClass\", SingletonClass.class);\n                Stream\n                .generate(sc::getPrototypeClass)\n                .limit(2)\n                .forEach(System.out::println);\n\n                result: >>>\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1620,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Red, {\n        children: \"You see that created objects are the same:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1634,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1588,\n      columnNumber: 13\n    }, this), \"To solve this issue\", /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '1.',\n      children: [/*#__PURE__*/_jsxDEV(Purple, {\n        children: \"lookup-method & replacer-method:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1637,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1637,\n        columnNumber: 83\n      }, this), \"lookup and replacer methods create object under defined circumstances.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1637,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n      title: '2.',\n      children: [/*#__PURE__*/_jsxDEV(Purple, {\n        children: \"Scoped proxy:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1640,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1640,\n        columnNumber: 64\n      }, this), \"we can declare a proxy to join a short-life time and long-life time classes.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1641,\n        columnNumber: 93\n      }, this), \"In fact, proxy comes stands in the middle and takes the responsibility of object creation.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1642,\n        columnNumber: 107\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1642,\n        columnNumber: 112\n      }, this), /*#__PURE__*/_jsxDEV(Important, {\n        children: \"Put the proxy on shorter-life time class\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1643,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Xml, {\n        title: 1,\n        children: `\n                <bean id=\"singletonClass\" class=\"com.arash.models.scopes.SingletonClass\" scope=\"singleton\">\n                <property name=\"prototypeClass\" ref=\"prototypeClass\"/>\n                </bean>\n                <bean id=\"prototypeClass\" class=\"com.arash.models.scopes.PrototypeClass\" scope=\"prototype\">\n                <aop:scoped-proxy/>\n                </bean>`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1644,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        title: 1,\n        children: `\n                @Component\n                @Singleton\n                public class SingletonClass {\n                }\n\n                @Component\n                @Scope(value = \"prototype\",proxyMode = ScopedProxyMode.TARGET_CLASS)\n                public class PrototypeClass {\n                }\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1653,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1640,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '40rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Highlight, {\n        children: [\"When \", '<aop:scoped-proxy/>', \" is in root node, all beans will be serialized at first, then on request, the bean will be deserialized, so the instance is a copy of the object.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1668,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1667,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1587,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getBeanAware() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Aware classes',\n    children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n      children: [/*#__PURE__*/_jsxDEV(Purple, {\n        children: \"Bean lifecycle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1679,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1679,\n        columnNumber: 48\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: beanLifecycle,\n        alt: 'bean lifecycle',\n        className: 'center-horizontally-relative',\n        style: {\n          width: '500px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1680,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1678,\n      columnNumber: 13\n    }, this), \"Some times we need that a bean be aware of its context features. To reach this, we can use aware interfaces.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1683,\n      columnNumber: 121\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '40rem'\n      },\n      children: \"To hook our code into bean lifecycle, there are some interfaces available which do the job, also you can do that via xml or annotaion in some cases.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1684,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                public class MyBean implements Phased, BeanNameAware, BeanFactoryAware, ApplicationContextAware,\n                BeanPostProcessor, InitializingBean, DisposableBean {\n                /*Phased*/\n                @Override\n                public int getPhase() {return 0;}\n\n                /*BeanNameAware*/\n                @Override\n                public void setBeanName(String s) {}\n\n                /*BeanFactoryAware*/\n                @Override\n                public void setBeanFactory(BeanFactory beanFactory) throws BeansException {}\n\n                /*ApplicationContextAware*/\n                @Override\n                public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {}\n\n                /*BeanPostProcessor.preInitialization*/\n                @Override\n                public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n                return null;\n                }\n\n                /*InitializingBean*/\n                @Override\n                public void afterPropertiesSet() throws Exception {}\n\n                /*BeanPostProcessor.postInitialization*/\n                @Override\n                public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n                return null;\n                }\n\n                /*DisposableBean*/\n                @Override\n                public void destroy() throws Exception {}\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1688,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Important, {\n      children: [\"To listen to all beans destruction: \", /*#__PURE__*/_jsxDEV(Bold, {\n        children: \"context.registerShutDownHook()\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1729,\n        columnNumber: 60\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1729,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1730,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1730,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(FlexRow, {\n      children: [/*#__PURE__*/_jsxDEV(Xml, {\n        description: 'pom.xml',\n        children: `\n                <dependency>\n                <groupId>org.apache.james</groupId>\n                <artifactId>james-server-lifecycle-spring</artifactId>\n                <version>3.0-beta4</version>\n                </dependency>\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1732,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Java, {\n        description: 'annotation',\n        children: `\n                public class MyBean2 {\n\n                @PostConstruct\n                void afterContruct(){}\n\n                @PreDestroy\n                void preDestroy(){}\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1741,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1731,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Java, {\n      title: 1,\n      children: `\n                @Configuration\n                public class AppConfig {\n\n                @Bean(initMethod = \"\")\n                public Bean1 getBean1(){\n                return new Bean1();\n                }\n                }`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1753,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Xml, {\n      description: 'Via xml',\n      children: `\n                <!-- post-init -->\n                <bean init-bean=\"...\"/>\n                <bean init-method=\"...\"/>\n\n                <!-- to init all bean as the same -->\n                <beans default-init-method=\"unique method\"/>\n\n                <!-- pre-destroy -->\n                <bean destroy-method=\"...\"/>\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1764,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1677,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getTemplateClass() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Template class',\n    children: [\"Template class come in when we are willing to initialize a set of beans refusing any much bothering.\", /*#__PURE__*/_jsxDEV(FlexRow, {\n      children: [/*#__PURE__*/_jsxDEV(Java, {\n        children: `\n                public class Student {\n                private String name;\n                private int age;\n                private String hairColor;\n\n                public void setName(String name) {\n                this.name = name;\n                }\n\n                public void setAge(int age) {\n                this.age = age;\n                }\n\n                public void setHairColor(String hairColor) {\n                this.hairColor = hairColor;\n                }\n                }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1786,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Xml, {\n        children: `\n                <!-- declare an abstract class -->\n                <bean id=\"templatePerson\" abstract=\"true\">\n                <property name=\"name\" value=\"arash\"/>\n                <property name=\"age\" value=\"33\"/>\n                </bean>\n\n                <!-- define the abstract class as parent -->\n                <bean id=\"student\" class=\"com.arash.models.Student\" parent=\"templatePerson\">\n                <property name=\"hairColor\" value=\"black\"/>\n                </bean>`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1806,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1785,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1783,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getEvent() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Events',\n    children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n      children: [/*#__PURE__*/_jsxDEV(Bold, {\n        children: /*#__PURE__*/_jsxDEV(Red, {\n          children: \"!!Notice that the event mechanism is synchronous and the process has to wait till the event process terminates!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1829,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1829,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"There are two types of event, \", /*#__PURE__*/_jsxDEV(Blue, {\n          children: \"standard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1832,\n          columnNumber: 51\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(Blue, {\n          children: \"custom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1832,\n          columnNumber: 77\n        }, this), \". Standard ones are limited:\", /*#__PURE__*/_jsxDEV(Bullet, {\n          title: 'ContextStartedEvent:',\n          children: \"When the ApplicationContext is started using the start() method on the ConfigurableApplicationContext interface. You can poll your database or you can restart any stopped application after receiving this event.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1834,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n          title: 'ContextStoppedEvent:',\n          children: \"When the ApplicationContext is stopped using the stop() method on the ConfigurableApplicationContext interface. You can do required housekeep work after receiving this event.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1837,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n          title: 'ContextClosedEvent:',\n          children: \"When the ApplicationContext is closed using the close() method on the ConfigurableApplicationContext interface.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1841,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n          title: 'ContextRefreshedEvent:',\n          children: \"When the ApplicationContext is either initialized or refreshed. This can also be raised using the refresh() method on the ConfigurableApplicationContext interface.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1843,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n          title: 'RequestHandledEvent:',\n          children: \"This is a web-specific event telling all beans that an HTTP request has been serviced.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1846,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bullet, {\n          title: 'ServletRequestHandledEvent:',\n          children: \"This one is child of the previous one and refers those requests from servlet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1848,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1831,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1828,\n      columnNumber: 13\n    }, this), \"In every event propagation 3 parties are involved: \", /*#__PURE__*/_jsxDEV(Bold, {\n      children: \"Publisher\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1853,\n      columnNumber: 23\n    }, this), \", \", /*#__PURE__*/_jsxDEV(Bold, {\n      children: \"Listener\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1853,\n      columnNumber: 47\n    }, this), \" and \", /*#__PURE__*/_jsxDEV(Bold, {\n      children: \"EventObject\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1853,\n      columnNumber: 73\n    }, this), \" itself.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1854,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1854,\n      columnNumber: 18\n    }, this), \"About standard events, event object and publisher are defined previously and you have to declare only listener.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1856,\n      columnNumber: 22\n    }, this), \"To raise a standard event:\", /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                @Component\n                public class RegisterPersonEventListener implements ApplicationListener<ContextStartedEvent> {\n\n                @Override\n                public void onApplicationEvent(ContextStartedEvent contextStartedEvent) {\n                System.out.println(\"context started\");\n                }\n                }\n\n                //usage>>>\n                ConfigurableApplicationContext ctx= (ConfigurableApplicationContext) ContextProvider.getAnnotaionContext();\n                ctx.start();\n\n                //output>>>\n                context started\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1858,\n      columnNumber: 13\n    }, this), \"But for publishing custom event you have to declare all three parties.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1877,\n      columnNumber: 83\n    }, this), \"To raise custom event:\", /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                // event object\n                public class RegisterPersonEvent extends ApplicationEvent {\n                public String registeredBy;\n\n                public RegisterPersonEvent(Object source, String registeredBy) {\n                super(source);\n                this.registeredBy = registeredBy;\n                }\n                }\n\n                // publisher object\n                @Component\n                public class RegisterPersonEventPublisher implements ApplicationEventPublisherAware {\n                /*you can also autowire this field and ignore 'ApplicationEventPublisherAware' implementation*/\n                private ApplicationEventPublisher publisher;\n\n                @Override\n                public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\n                this.publisher = applicationEventPublisher;\n                }\n\n                public void send(String registeredBy) {\n                publisher.publishEvent(new RegisterPersonEvent(this, registeredBy));\n                }\n                }\n\n                // listener object\n                @Component\n                public class RegisterPersonEventListener implements ApplicationListener<RegisterPersonEvent> {\n\n                @Override\n                public void onApplicationEvent(RegisterPersonEvent registerPersonEvent) {\n                System.out.println(\"register person raised by \" + registerPersonEvent.registeredBy);\n                }\n                }\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1879,\n      columnNumber: 13\n    }, this), \"Listener can be declared via annotation too. Notice that you may have more than 1 listeners, os you have to define some selection argument. By default, method argument determines what listener is suitable for an event and in some versions name become important to.\", /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                /*\n                * in some versions, name of the listener is important\n                * and you must follow rule \"process\"+EventName\n                * In this way listener is selected with the argument\n                */\n                @EventListener\n                public void processUserRegistrationEvent(UserRegistrationEvent event) {}\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1921,\n      columnNumber: 13\n    }, this), \"also you can identify the event in some other ways (class or spel):\", /*#__PURE__*/_jsxDEV(Java, {\n      children: `\n                @EventListener({UserRegistrationEvent.class, ContextStartedEvent.class})\n                or\n                @EventListener(condition = \"#blEvnet.name='someName'\") //check out this on the Internet\n                public void processUserRegistrationEvent(UserRegistrationEvent event) {}\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1933,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Blue, {\n      children: [\"If there are more than 1 listener available and you need to organize theme, use \", /*#__PURE__*/_jsxDEV(Bold, {\n        children: \"@Order(intValue)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1943,\n        columnNumber: 21\n      }, this), \" on method.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1941,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1827,\n    columnNumber: 9\n  }, this);\n}\n\nfunction getAsyncJob() {\n  return /*#__PURE__*/_jsxDEV(Frame, {\n    title: 'Asynchronous',\n    children: [\"You must define an executor and prepare spring for asynchronous operation, then you have to determine which method is going to be executed asynchronously by @Async annotation.\", /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(Blue, {\n        children: \"Notice that the method which annotated with @Async must be public and you can not do self-invocation as it bypasses a proxy \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1955,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1954,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"As asynched method is passed through a proxy, return value must be void or Future\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1958,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FlexRow, {\n      children: [/*#__PURE__*/_jsxDEV(Java, {\n        description: 'Configuring asynchronous operation via java',\n        children: `\n                @Configuration\n                @ComponentScan(\"com.arash\")\n                @EnableAsync\n                public class AnnoConfig {\n\n                @Bean(name = \"executor\")//give it a name\n                public Executor getAsyncExecutor() {\n                ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n                //configure executor as you want\n                executor.setCorePoolSize(2);\n                executor.setMaxPoolSize(10);\n                executor.setKeepAliveSeconds(20);\n                executor.setQueueCapacity(10);\n                executor.setThreadNamePrefix(\"listener\");\n                executor.initialize();\n                return executor;\n                }\n                }\n\n                @Component\n                public class Counter {\n                @Async(\"executor\") //this name points to the defined executor.\n                public void startCounting(int start, int end, String msg) throws InterruptedException {\n                System.out.println(\"counter: \" + Thread.currentThread().getName());\n                for (int i = start; i < end; i++) {\n                System.out.println(msg + \" -> \" + i);\n                Thread.currentThread().sleep(1000);\n                }\n                }\n                }\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1962,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Xml, {\n        description: 'Configuring asynchronous operation via xml',\n        children: `\n                <task:executor id=\"executor1\" pool-size=\"10\" queue-capacity=\"10\"/>\n                <task:annotation-driven executor=\"executor1\"/>\n                `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1996,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1961,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1951,\n    columnNumber: 9\n  }, this);\n} // function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n\n\nvar _c;\n\n$RefreshReg$(_c, \"CoreCheats\");","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/contents/spring5/core/core-cheats.js"],"names":["React","Bash","Frame","GenericCode","Java","Xml","InfoIcon","Blue","BlueBold","Bold","Bullet","FlexRow","Highlight","HorizontalLine","Important","Purple","Red","Float","appContext","circularDependency","beanLifecycle","components","DrawBoxComponent","DrawBoxWrapper","CoreCheats","getBeanContainer","getScanningFilter","getMerging","getProfile","getMultipleCandidate","getXmlBasic","getAnnotationBasic","getAlias","getPrivateConstructor","getXmlLocalClass","getAnnotationLocalClass","getXmlCircularDependencies","getAnnotationCircularDependencies","getXmlLoadFromFile","getJavaLoadFromFile","getXmlChangingMethodBody","getCollections","getSpel","getScopes","getScopeIssue","getBeanAware","getTemplateClass","getEvent","getAsyncJob","addShape","shape","id","label","t","pos","width","align","offset","between","display","maxWidth"],"mappings":"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CM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCY;AAAA;AAAA;AAAA;AAAA,YApDJ,2RA8FI,QAAC,IAAD;AAAA,gBACM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATY;AAAA;AAAA;AAAA;AAAA,YA9FJ,sFA0GI,QAAC,IAAD;AAAA,gBACM;AAClB;AACA;AACA;AACA;AACA;AANY;AAAA;AAAA;AAAA;AAAA,YA1GJ,eAkHI,QAAC,IAAD;AAAA,kHAEQ,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR;AAAA;AAAA;AAAA;AAAA;AAAA,YAlHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyHH;;AAED,SAASC,WAAT,GAAuB;AACnB,sBACI,QAAC,KAAD;AAAO,IAAA,KAAK,EAAE,cAAd;AAAA,+MAGI;AAAA,6BACI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAUI,QAAC,OAAD;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,WAAW,EAAE,6CAAnB;AAAA,kBACM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhCgB;AAAA;AAAA;AAAA;AAAA,cADJ,eAmCI,QAAC,GAAD;AAAK,QAAA,WAAW,EAAE,4CAAlB;AAAA,kBACM;AACtB;AACA;AACA;AAJgB;AAAA;AAAA;AAAA;AAAA,cAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuDH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport {Bash, Frame, GenericCode, Java, Xml} from \"../../../components/blocks\";\nimport {InfoIcon} from \"../../../components/bubble\";\nimport {\n    Blue, BlueBold, Bold, Bullet, FlexRow, Highlight, HorizontalLine, Important, Purple, Red\n} from \"../../../components/components\";\nimport {Float} from \"../../../components/float\";\nimport appContext from '../../../res/images/ApplicationContext.png';\nimport circularDependency from \"../../../res/images/circular-dependency.png\";\nimport beanLifecycle from \"../../../res/images/bean-life-cycle.png\";\nimport components from \"../../../res/images/components.png\";\nimport {DrawBoxComponent} from \"../../git/git-components\";\nimport {DrawBoxWrapper} from \"../../../components/drawbox/draw-box-wrapper\";\n\nexport function CoreCheats() {\n    return (\n        <>\n            {getBeanContainer()}\n            {getScanningFilter()}\n            {getMerging()}\n            {getProfile()}\n            {getMultipleCandidate()}\n            {getXmlBasic()}\n            {getAnnotationBasic()}\n            {getAlias()}\n            {getPrivateConstructor()}\n            {getXmlLocalClass()}\n            {getAnnotationLocalClass()}\n            {getXmlCircularDependencies()}\n            {getAnnotationCircularDependencies()}\n            {getXmlLoadFromFile()}\n            {getJavaLoadFromFile()}\n            {getXmlChangingMethodBody()}\n            {getCollections()}\n            {getSpel()}\n            {getScopes()}\n            {getScopeIssue()}\n            {getBeanAware()}\n            {getTemplateClass()}\n            {getEvent()}\n            {getAsyncJob()}\n        </>\n    )\n}\n\nfunction getBeanContainer() {\n    return (\n        <Frame title={'Catching bean'}>\n            <InfoIcon>\n                <Important>!the path in which we put java source and resource files is called ClassPath. It also can\n                    hold resources too.<br/>\n                </Important>\n                This is why, we use ClassPathXmlResource class to bring in our desired configuration file.<br/>\n                Every thing under main dir is called ClassPath, so test is out of that.\n            </InfoIcon>\n            <FlexRow>\n                <Java description={'using BeanFactory is deprecated'}>\n                    {`\n                    ClassPathResource resource = new ClassPathResource(\"containerconfig.xml\");\n                    BeanFactory beanFactory = new XmlBeanFactory(resource);\n                    return beanFactory.getBean(\"targetId\");\n                    `}\n                </Java>\n                <Java description={'new fasion'}>\n                    {`\n                    ApplicationContext context = new ClassPathXmlApplicationContext(\"containerconfig.xml\");\n                    return (Car) context.getBean(\"car\");`}\n                </Java>\n            </FlexRow>\n            <Important>ApplicationContext provides multiple configuration file registration.</Important>\n            <div className={'float-holder center-horizontally-relative inline'}>\n                <DrawBoxComponent wh={[1200, 800]} shapeFactory={\n                    new DrawBoxWrapper()\n                        .addShape({shape: 'type', id: 'i1', label: 'ResourceLoader', t: 'i', pos: [40, 20], width: 125})\n                        .addShape({\n                            shape: 'type', id: 'i2', label: 'ResourcePatternResolver', t: 'i', align: 'i1',\n                            offset: [-87.5, 60], width: 175\n                        })\n                        .addShape({\n                            shape: 'type', id: 'i3', label: 'ListableBeanFactory', t: 'i', align: 'i2',\n                            offset: [100, -12], width: 150\n                        })\n                        .addShape({\n                            shape: 'type', id: 'i4', label: 'HierarchicalBeanFactory', t: 'i', align: 'i3',\n                            offset: [87, -12], width: 168\n                        })\n                        .addShape({\n                            shape: 'type', id: 'i5', label: 'MessageSource', t: 'i', align: 'i4', offset: [95, -12],\n                            width: 125\n                        })\n                        .addShape({\n                            shape: 'type', id: 'i6', label: 'EnvironmentCapable', t: 'i', align: 'i5',\n                            offset: [75, -12], width: 150\n                        })\n                        .addShape({\n                            shape: 'type', id: 'i7', label: 'ApplicationEventPublisher', t: 'i', align: 'i6',\n                            offset: [87, -12], width: 175\n                        })\n                        .addShape({\n                            shape: 'type', id: 'i8', label: 'BeanFactory', t: 'i', align: 'i1', offset: [200, -12],\n                            width: 105\n                        })\n                        .addShape({\n                            shape: 'type', id: 'i9', label: 'FunctionalInterface', t: '@', align: 'i8',\n                            offset: [503, -12], width: 145\n                        })\n                        .addShape({\n                            shape: 'type', id: 'i10', label: 'ApplicationContext', t: 'i', align: 'i4', offset: [0, 90],\n                            width: 145\n                        })\n                        .addShape({\n                            shape: 'type', id: 'c1', label: 'GenericApplicationContext', t: 'c', align: 'i10',\n                            offset: [-304, 60], width: 180\n                        })\n                        .addShape({\n                            shape: 'type', id: 'c2', label: 'FileSystemXmlApplicationContext', t: 'c', align: 'c1',\n                            offset: [105, -12], width: 218\n                        })\n                        .addShape({\n                            shape: 'type', id: 'c3', label: 'ClassPathXmlApplicationContext', t: 'c', align: 'c2',\n                            offset: [123, -12], width: 215\n                        })\n                        .addShape({\n                            shape: 'type', id: 'c4', label: 'StaticApplicationContext', t: 'c', align: 'c1',\n                            offset: [-295, 60], width: 170\n                        })\n                        .addShape({\n                            shape: 'type', id: 'c5', label: 'AnnotationConfigApplicationContext', t: 'c', align: 'c4',\n                            offset: [95, -12], width: 230\n                        })\n                        .addShape({\n                            shape: 'type', id: 'c6', label: 'GenericGroovyApplicationContext', t: 'c', align: 'c5',\n                            offset: [123, -12], width: 220\n                        })\n                        .addShape({shape: 'typerel', t: 'ii', between: [['i2'], ['i1'], [20, '_']]})\n                        .addShape({shape: 'typerel', t: 'ii', between: [['i3'], ['i8', -10, 0], [20, '_', -6]]})\n                        .addShape({shape: 'typerel', t: 'ii', between: [['i4'], ['i8', 10, 0], [20, '_', -6]]})\n                        .addShape({shape: 'typerel', t: 'i@', between: [['i7'], ['i9', 0, -1], [20, '_']]})\n                        .addShape({shape: 'typerel', t: 'ii', between: [['i10', -25, 0], ['i2'], [20, '_']]})\n                        .addShape({shape: 'typerel', t: 'ii', between: [['i10', -15, 0], ['i3'], [30, '_']]})\n                        .addShape({shape: 'typerel', t: 'ii', between: [['i10', -5, 0], ['i4'], [40, '_']]})\n                        .addShape({shape: 'typerel', t: 'ii', between: [['i10', 5, 0], ['i5'], [40, '_']]})\n                        .addShape({shape: 'typerel', t: 'ii', between: [['i10', 15, 0], ['i6'], [30, '_']]})\n                        .addShape({shape: 'typerel', t: 'ii', between: [['i10', 25, 0], ['i7'], [10, '_']]})\n                        .addShape({shape: 'typerel', t: 'ci', between: [['c1'], ['i10', -20, 0], [20, '_', -11]]})\n                        .addShape({shape: 'typerel', t: 'ci', between: [['c2'], ['i10'], [20, '_']]})\n                        .addShape({shape: 'typerel', t: 'ci', between: [['c3'], ['i10', 20, 0], [20, '_', -10]]})\n                        .addShape({shape: 'typerel', t: 'cc', between: [['c4'], ['c1', -20, 0], [20, '_', -11]]})\n                        .addShape({shape: 'typerel', t: 'cc', between: [['c5'], ['c1'], [20, '_']]})\n                        .addShape({shape: 'typerel', t: 'cc', between: [['c6'], ['c1', 20, 0], [20, '_', -11]]})\n                }/>\n                <img src={appContext} alt={'application context implementations'} style={{width: '1200px'}}/>\n                <Float l={900} t={250} lineTo={[864, 280]}>\n                    <div style={{width: '190px'}}>To fetch xml configuration from a file inside the application itself\n                    </div>\n                </Float>\n                <Float l={700} t={190} lineTo={[600, 263]}>\n                    <div style={{width: '260px'}}>To read xml configuration from a file system. Path must be relative\n                    </div>\n                </Float>\n                <Float l={890} t={362} lineTo={[873, 364]}>\n                    <div style={{width: '300px'}}>To read configuration from groovy file</div>\n                </Float>\n                <Float l={150} t={380} lineTo={[625, 365]}>\n                    <div style={{width: '300px'}}>To configure beans by annotations</div>\n                </Float>\n                <Float l={10} t={260} lineTo={[383, 330]}>\n                    <div style={{width: '350px'}}>To setup features via programmatic registration, rather than reading\n                        bean definitions from external configuration sources. Mainly useful for testing\n                    </div>\n                </Float>\n            </div>\n            <br/><br/>\n            Configuration file is due to determine instantiating mechanism.<br/>\n            <Blue>How to provide configuration file:</Blue>\n            <Bullet title={'1.'}>XML based configuration:\n                provide a xml file to define instantiation mechanism. We name it \"containerconfix.xml\" in here:\n                <Xml>\n                    {`\n                    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n                           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                           xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n                    \n                        <bean id=\"bean1\" class=\"Bean1\"/>\n                    </beans>`}\n                </Xml>\n                <Java>{`\n                    public static void main(String[] args){\n                        ApplicationContext context = new ClassPathXmlApplicationContext(\"containerconfig.xml\");\n                        Bean1 bean1 = context.getBean(\"bean1\");\n                    }`}</Java>\n            </Bullet>\n            <Bullet title={'2.'}>Java based configuration:\n                <Java>\n                    {`\n                    /* provide a class to create instances and annotate it with @Configuration */\n                    @Configuration\n                    public class AppConfig {\n                    \n                        @Bean\n                        public Bean1 getBean1(){\n                            return new Bean1();\n                        }\n                    }\n                    \n                    public static void main(String[] args){\n                        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n                        context.register(AppConfig.class);\n                        context.refresh();\n                        \n                        Bean1 bean1 = context.getBean(Bean1.class);\n                    }`}\n                </Java>\n            </Bullet>\n            <Bullet title={'3.'}>Annotation based configuration:<br/>\n                Using annotation instead of direct java codes such\n                as <Bold>@Component</Bold>, <Bold>@Repository</Bold>, <Bold>@Service</Bold>, <Bold>@Configuration</Bold>,\n                <Bold>@Controller</Bold><br/>\n                Then we should aware spring of these classes by <Bold>@ComponentScan</Bold>\n                <FlexRow>\n                    <Java>\n                        {`\n                        @Configuration\n                        @ComponentScan(\"com.arash\")\n                        public class AppConfig {\n                        }\n                        \n                        /* bean class */\n                        @Component\n                        public class Bean1 {\n                        }\n                        \n                        /* catching bean */\n                        public static void main(String[] args){\n                            AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n                            context.register(AppConfig.class);\n                            context.refresh();\n                            \n                            Bean1 bean1 = context.getBean(Bean1.class);\n                        }\n                        `}\n                    </Java>\n                    <div>\n                        <img src={components} alt={'Component hierarchy'}/>\n                    </div>\n                </FlexRow>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getScanningFilter() {\n    return (\n        <Frame title={'Filtering through component scan'}>\n            It is wise to exclude unwanted classes from being scanned by spring.<br/>\n            <Java title={1}>\n                {`\n                @Configuration\n                /*\n                * type = FilterType.REGEX\n                * type = FilterType.ANNOTATION\n                * type = FilterType.ASPECTJ\n                * type = FilterType.ASSIGNABLE_TYPE\n                * type = FilterType.CUSTOM\n                */\n                @ComponentScan(basePackages = \"com\", includeFilters = {\n                @ComponentScan.Filter(type = FilterType.REGEX, pattern = \"*.*spring.obje*\"),\n                @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = MyAnnotation.class),\n                @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = Person.class)\n                })\n                public class AppConfig {\n                }`}\n            </Java>\n            <Xml title={1}>\n                {`\n                <beans ...>\n                <context:component-scan base-package=\"com\">\n                <context:include-filter type=\"regex\" expression=\"soWhat*\"/>\n                <context:include-filter type=\"annotation\" expression=\"com.arash.models.common.MyAnnotation\"/>\n                </context:component-scan>\n                </beans>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getMerging() {\n    return (\n        <Frame title={'Merging configuration files'}>\n            <Xml description={'merging other configurations into xml'}>\n                {`\n                <beans ...>\n                <context:annotation-config/>\n\n                <!-- scan a package to figure out its Components -->\n                <context:component-scan base-package=\"com\"/>\n                </beans>\n                `}\n            </Xml>\n            <Java description={'merging other configurations into java class'}>\n                {`\n                //merge other classes\n                @Import(OtherAppConfig.class)\n\n                //merge xml files\n                @ImportResource(locations = \"classpath:containerconfig.xml\")\n\n                @Configuration\n                public class AppConfig {\n                }\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getProfile() {\n    return (\n        <Frame title={'Profile selection'}>\n            <InfoIcon>\n                <Java>\n                    {`\n                // To check a property existence:\n                context.getEnvironment().containsProperty(\"who's_your_daddy\");\n\n                //all environments are not available in spring and some are provide by jvm\n                System.getProperty(\"propertyName\");\n                `}\n                </Java>\n                <br/>\n                To change profile at runtime:\n                <Red>!Not tested!</Red>\n                <Bash>{'java -Dspring.profiles.active.pro -jar myJar.jar'}</Bash>\n            </InfoIcon>\n            We can switch to another config via profile.<br/>\n            First of, mark all classes belong to a profile\n            <Java description={'source code'}>\n                {`\n                @Profile(\"develop\",\"!dev\")//! => active profile\n                public class Bean1 {\n\n                //access your desired environment\n                @Autowired\n                public EnvironmentConfiguration env;\n                }`}\n            </Java>\n            In xml, we have to assign a file for a profile:\n            <Xml>\n                {`\n                <beans\n                ...\n                profile=\"develop\">\n                ...\n                </beans>`}\n            </Xml>\n            <HorizontalLine/>\n            Now, select a profile:\n            <Xml description={'pom.xml'}>\n                {`\n                <profiles>\n                <profile>\n                <id>develop</id>\n                <activation>\n                <activeByDefault>true</activeByDefault>\n                </activation>\n                </profile>\n                </profiles>`}\n            </Xml>\n            <HorizontalLine/>\n            To catch active profile:\n            <Java>\n                {`\n                @Component\n                public class Bean1 {\n                @Autowired\n                public Environment env;\n\n                public void loopThroughActiveProfiles() {\n                Arrays.stream(env.getActiveProfiles())\n                .forEach(System.out::println);\n                }\n\n                @Value(\"#{$\\{spring.profiles.active}}\")\n                String activeProfile;\n\n                @Autowired\n                private ConfigurableEnvironment cfgEnv;\n\n                public void setActiveProfile(String pName) {\n                //other information is available here\n                cfgEnv.setActiveProfiles(\"develop\");\n                }\n                }`}\n            </Java>\n            <div style={{width: '22rem'}}>\n                <Highlight>You have to follow <Bold>profile</Bold> structure in the whole of project when you mention\n                    it.</Highlight>\n            </div>\n        </Frame>\n    )\n}\n\nfunction getMultipleCandidate() {\n    return (\n        <Frame title={'multiple candidate'}>\n            <div style={{width: '50rem'}}>\n                There is possibility to have more than 1 candidate when you request a bean. To make spring to return\n                true\n            </div>\n            object you can use <Bold>primary</Bold> and <Bold>qualifier</Bold> key words.\n            <Bullet title={'1.'}>\n                <Bold>Primary:</Bold><br/>\n                Set a bean as primary\n                <FlexRow>\n                    <Xml title={1}>\n                        {`\n                <bean class=\"com.arash.models.multicandidate.Ferrari\"\n                id=\"ferrai\" primary=\"true\"/>\n                <bean class=\"com.arash.models.multicandidate.Lamborghini\"\n                id=\"lamborghini\" >`}\n                    </Xml>\n                    <Java title={1}>\n                        {`\n                @Configuration\n                public class AppConfig {\n                @Primary\n                @Bean\n                public Car getLamborghini() {\n                return new Lamborghini();\n                }\n\n                @Bean\n                public Car getFerrari() {\n                return new Ferrari();\n                }\n                }`}\n                    </Java>\n                </FlexRow>\n            </Bullet>\n            <Bullet title={'2.'}>\n                <Bold>Qualifier:</Bold><br/>\n                determine what object should be injected based on the given information\n                <Java description={'custom qualifier'}>\n                    {`\n                @Target(ElementType.FIELD)\n                @Retention(RetentionPolicy.RUNTIME)\n                @Qualifier\n                public @interface MyQualifier {\n                String value() default \"\";\n                String color();\n                }`}\n                </Java>\n                <FlexRow>\n                    <Xml title={1}>\n                        {`\n                <!--qualifier with a simple string-->\n                <bean className=\"com.arash.models.multicandidate.Ferrari\"\n                id=\"ferrai\">\n                <qualifier value=\"ferrari\"/>\n                </bean>\n\n                <!--qualifier with custom selection property-->\n                <bean className=\"com.arash.models.multicandidate.Lamborghini\"\n                id=\"lamborghini\">\n                <qualifier type=\"com.arash.models.multicandidate.MyQualifier\">\n                <attribute key=\"color\" value=\"green\"/>\n                </qualifier>\n                </bean>\n\n                <bean className=\"com.arash.models.multicandidate.Pagani\"\n                id=\"pagani\">\n                <qualifier type=\"com.arash.models.multicandidate.MyQualifier\">\n                <attribute key=\"color\" value=\"black\"/>\n                </qualifier>\n                </bean>`}\n                    </Xml>\n                    <Java title={1}>\n                        {`\n                @Configuration\n                public class AppConfig {\n                @Qualifier(\"ferrari\")\n                @Bean\n                public Car getFerrari() {\n                return new Ferrari();\n                }\n\n                @MyQualifier(\n                name = \"lambo\", color = \"green\")\n                @Bean\n                public Car getLamborghini() {\n                return new Lamborghini();\n                }\n\n                @Bean\n                @MyQualifier(\n                name = \"lambo\", color = \"black\")\n                public Car getPagani(){\n                return new Pagani();\n                }\n                }`}\n                    </Java>\n                </FlexRow>\n                <Java description={'usage'}>\n                    {`\n                public class Engineer extends Person {\n                @MyQualifier(name = \"lambo\", color = \"black\")\n                @Autowired\n                private Car car1;\n\n                @Autowired\n                @MyQualifier(name = \"lambo\", color = \"green\")\n                private Car car2;\n\n                @Autowired\n                @Qualifier(\"ferrari\")\n                private Car car3;\n                }`}\n                </Java>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getXmlBasic() {\n    return (\n        <Frame title={'Passing arguments in xml'}>\n            <InfoIcon>\n                Catching data source for mysql sample:\n                <Xml>\n                    {`\n                <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\">\n                <property name=\"username\" value=\"root\"/>\n                <property name=\"password\" value=\"\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/spring\"/>\n                </bean>`}\n                </Xml>\n            </InfoIcon>\n            Passing arguments through xml configuration file is available via constructor and setters.\n            <Java>\n                {`\n                public class Car {\n                private String name;\n                private int color;\n\n                public Car(String name, int color) {\n                this.name = name;\n                this.color = color;\n                }\n                }\n\n                public class Person {\n                private String name;\n                private String email;\n                private int age;\n                private int hairColor;\n                private Car car;\n\n                public Person(String name, String email, int age) {\n                this.name = name;\n                this.email = email;\n                this.age = age;\n                }\n\n                public void setHairColor(int hairColor) {\n                this.hairColor = hairColor;\n                }\n\n                public void setCar(Car car) {\n                this.car = car;\n                }\n                }\n                `}\n            </Java>\n            <Xml>\n                {`\n                <bean id=\"car\" class=\"com.arash.models.multiconfigfiles.Car\">\n                <constructor-arg value=\"ford\"/>\n                <constructor-arg value=\"-16711936\"/>\n                </bean>\n\n                <bean id=\"person\" class=\"com.arash.models.multiconfigfiles.Person\">\n                <!--\n                constructor args are sent by order by default,\n                but you can provide more information such as type or index\n                -->\n                <constructor-arg value=\"Arash\"/>\n                <constructor-arg index=\"1\" value=\"arash.12@gmail.com\"/>\n                <constructor-arg type=\"int\" value=\"33\"/>\n\n                <!-- passing parameter by setter -->\n                <property name=\"hairColor\" value=\"-16777216\"/>\n                <property name=\"car\" ref=\"car\"/> <!-- sending by ref -->\n                </bean>\n                `}\n            </Xml>\n            <HorizontalLine/>\n            It is also possible to pass values to relevant field by namespace<br/>\n            <Highlight>Remember to load <Red>xmlns:p=\"http://www.springframework.org/schema/p\"</Red> in\n                header</Highlight>\n            <Xml>\n                {`\n                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <beans xmlns=\"http://www.springframework.org/schema/beans\"\n                xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xmlns:p=\"http://www.springframework.org/schema/p\"\n                xsi:schemaLocation=\"\n                http://www.springframework.org/schema/beans\n                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n                <bean id=\"person2\" class=\"com.arash.models.xml.namespace.Person\"\n                p:car-ref=\"car\"\n                p:hairColor=\"-16711936\">\n                <constructor-arg value=\"Arash\"/>\n                <constructor-arg index=\"1\" value=\"arash.12@gmail.com\"/>\n                <constructor-arg type=\"int\" value=\"33\"/>\n                </bean>\n                </bean>\n                `}\n            </Xml>\n\n            <Important>\n                <div style={{width: '35rem', display: 'inline-table'}}>Using property is recommended over constructor\n                    when we face \"circular dependency\" or \"different life length\"\n                </div>\n            </Important>\n\n        </Frame>\n    )\n}\n\nfunction getAnnotationBasic() {\n    return (\n        <Frame title={'Passing arguments in annotation'}>\n            <InfoIcon>\n                <p>\n                    <Blue>Wiring:</Blue> connecting objects to each other is called wiring.\n                </p>\n                <p>\n                    <Blue>@Autowired</Blue> does not work on arrays\n                </p>\n                <p>\n                    <Purple>some equivalents for annotations:</Purple><br/>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>Spring</th>\n                            <th>javax</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td>@Autowired</td>\n                            <td>@Inject, @Resource</td>\n                        </tr>\n                        <tr>\n                            <td>@Component</td>\n                            <td>@Named, @ManagedBean</td>\n                        </tr>\n                        <tr>\n                            <td>@Qualifier</td>\n                            <td>@Qualifier, @Named</td>\n                        </tr>\n                        <tr>\n                            <td>@Value</td>\n                            <td>---</td>\n                        </tr>\n                        <tr>\n                            <td>@Required</td>\n                            <td>---</td>\n                        </tr>\n                        <tr>\n                            <td>@Lazy</td>\n                            <td>---</td>\n                        </tr>\n                        <tr>\n                            <td>@Scope(“singleton”)</td>\n                            <td>@Singleton</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </p>\n            </InfoIcon>\n            <Java>\n                {`\n                @Component\n                public class Car {\n                private String name;\n                private int color;\n\n                public Car(@Value(\"ford\") String name, @Value(\"-16711936\") int color) {\n                this.name = name;\n                this.color = color;\n                }\n                }\n\n                @Component\n                public class Person {\n                private String name;\n\n                @Value(\"-16777216\")\n                private int hairColor;\n\n                @Autowired\n                private Car car;\n\n                @Value(\"Arash\")\n                public void setName(String name){\n                this.name = name;\n                }\n                }\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getAlias() {\n    return (\n        <Frame title={'Alias'}>\n            <Xml title={1}>\n                {`\n                <bean id=\"car\" name=\"car\" class=\"com.arash.models.Car\"/>\n                <alias name=\"car\" alias=\"automobile\"/>\n                <alias name=\"car\" alias=\"vehicle\"/>\n                `}\n            </Xml>\n            <Java title={1}>\n                {`\n                @Bean({\"car\", \"automobile\", \"vehicle\"})\n                private Car getCar() {\n                return new Car(\"ford\", -16711936);\n                }`}\n            </Java>\n            <Java description={'usage'}>\n                {`\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                Car car = (Car) ctx.getBean(\"car\");\n                Car car2 = (Car) ctx.getBean(\"automobile\");\n                Car car3 = (Car) ctx.getBean(\"vehicle\");`}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getPrivateConstructor() {\n    return (\n        <Frame title={'Private constructor'}>\n            <Java>\n                {`\n                public class PrivateConstructor {\n\n                private PrivateConstructor() {\n                }\n\n                public static PrivateConstructor getInstance(){\n                return new PrivateConstructor();\n                }\n                }`}\n            </Java>\n            <Xml>\n                {`\n                <!--\n                as spring is all about reflection, so program elements scope makes no problem.\n                It works pretty nice in spring 4. Also, some other ways are avaiable\n                -->\n                <bean id=\"privateConstructor\" class=\"com.arash.models.privateconstructor.PrivateConstructor\"/>\n\n                <!-- access through static method -->\n                <bean id=\"privateConstructor2\" class=\"com.arash.models.privateconstructor.PrivateConstructor\"\n                factory-method=\"getInstance\"/>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getXmlLocalClass() {\n    return (\n        <Frame title={'Inner & Nested class in xml'}>\n            Instantiating nested class is easy as the class is static\n            <Java>\n                {`\n                public class ParentClass {\n\n                public static class NestedClass {\n                }\n\n                public class InnerClass {\n                }\n                }\n\n                //how to get instance in java\n                ParentClass parentClass = new ParentClass();\n                ParentClass.NestedClass nestedClass = new ParentClass.NestedClass();\n                ParentClass.InnerClass innerClass = pc.new InnerClass();`}\n            </Java>\n            <Xml>\n                {`\n                <!-- parent class: -->\n                <bean id=\"parentClass\" class=\"ParentClass\"/>\n\n                <!-- creating public nested class is easy. Use '$' instead of '.' -->\n                <bean id=\"nestedClass\" class=\"ParentClass$NestedClass\"/>\n                `}\n            </Xml>\n            Instantiating inner class is a bit more complicated as it needs its parent class instance.<br/>\n            To do that, we should hire a generator<br/><br/>\n            <Bullet title={'1.'}><BlueBold>factory-bean:</BlueBold>\n                <Java>\n                    {`\n                public class ParentClass {\n\n                public static class NestedClass {\n                }\n\n                public class InnerClass {\n                }\n                }\n\n                public class InnerClassFactory implements FactoryBean<ParentClass.InnerClass> {\n\n                @Override\n                public ParentClass.InnerClass getObject() throws Exception {\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                ParentClass pc = (ParentClass) ctx.getBean(\"parentClass\");\n                return pc.new InnerClass();\n                }\n\n                @Override\n                public Class<?> getObjectType() {\n                return ParentClass.InnerClass.class;\n                }\n\n                @Override\n                public boolean isSingleton() {\n                return false;\n                }\n                }\n                `}\n                </Java>\n                <Xml>\n                    {`\n                <bean id=\"parentClass\" class=\"ParentClass\"/>\n\n                <!-- creating InnerClass by factory bean. Factory class must implement FactoryBean -->\n                <bean id=\"innerClass\" class=\"com.arash.models.localclass.InnerClassFactory\">`}\n                </Xml>\n\n            </Bullet>\n            <Bullet title={'2.'}><BlueBold>factory-method:</BlueBold>\n                <Java>\n                    {`\n                public class ParentClass {\n                public static class NestedClass {\n                }\n\n                public class InnerClass {\n                }\n\n                public InnerClass getInnerClassInstance() {\n                return new InnerClass();\n                }\n                }`}\n                </Java>\n                <Xml>\n                    {`\n                <bean id=\"parentClass\" class=\"ParentClass\"/>\n\n                <!-- creating InnerClass by factory method -->\n                <bean id=\"innerClass\" class=\"com.arash.models.localclass.ParentClass.InnerClass\"\n                factory-bean=\"parentClass\" factory-method=\"getInnerClassInstance\"/>`}\n                </Xml>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getAnnotationLocalClass() {\n    return (\n        <Frame title={'Inner & Nested class in annotation'}>\n            <Java>\n                {`\n                @Component\n                public class ParentClass {\n                @Component\n                public static class NestedClass {\n                }\n\n                @Component\n                public class InnerClass {\n                }\n                }\n\n                //usage>>>\n                ApplicationContext ctx = ContextProvider.getAnnotaionContext();\n                ParentClass pc = ctx.getBean(ParentClass.class);\n                ParentClass.NestedClass nc = ctx.getBean(ParentClass.NestedClass.class);\n                ParentClass.InnerClass ic=ctx.getBean(ParentClass.InnerClass.class);\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getXmlCircularDependencies() {\n    return (\n        <Frame title={'Circular dependency in xml configuration'}>\n            The problem is a set of commplicated dependencies which can not be resolved so easily.<br/>\n            <img src={circularDependency} alt={'circular dependency'}/><br/><br/>\n            check the following examples out:\n            <FlexRow>\n                <Java title={true}>\n                    {`\n                public class Student {\n                private Shoes shoes;\n\n                public Student(Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                public class Shoes {\n                private Student student;\n\n                public Shoes(Student student) {\n                this.student = student;\n                }\n                }`}\n                </Java>\n                <Xml title={true} description={'this config fails'}>\n                    {`\n                <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                <constructor-arg ref=\"shoes\"/>\n                </bean>\n                <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>\n                `}\n                </Xml>\n            </FlexRow>\n            <HorizontalLine/>\n            <span className={'purple'}>To overcome this problem there are some suggestions:</span>\n            <Bullet title={'1.'}>Changing a constructor to setter<br/>\n                <Important>Bean definition follows no order whilst usage order is, so this way is not\n                    recommended</Important><br/>\n                <Highlight>If you turn constructor of both mentioned classes to setter, there would be no matter with\n                    the\n                    order</Highlight>\n                <FlexRow>\n                    <Java title={true} description={'use setter instead of constructor'}>\n                        {`\n                public class Student {\n                private Shoes shoes;\n\n                public void setShoes(Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                public class Shoes {\n                private Student student;\n\n                public Shoes(Student student) {\n                this.student = student;\n                }\n                }\n\n                ------------------------------------------\n\n                //usage\n                ApplicationContext ctx;\n                ctx = ContextProvider.getXmlContext();\n\n                //correct order\n                Student student = ctx.getBean(Student.class);\n                Shoes shoes= (Shoes) ctx.getBean(\"shoes\");\n\n                //incorrect order\n                Shoes shoes= (Shoes) ctx.getBean(\"shoes\");\n                Student student = ctx.getBean(Student.class);\n                `}\n                    </Java>\n                    <Xml title={true}\n                         description={'one property & one constructor'}>\n                        {`\n                <bean id=\"student\"\n                class=\"com.arash.models.circulardep.Student\">\n                <property name=\"shoes\" ref=\"shoes\"/>\n                </bean>\n\n                <bean id=\"shoes\"\n                class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet><br/>\n            <Bullet title={'2.'}>Using lazy-init<br/>\n                By this way, we can define that which bean must be initialized on demand, therefor order problem\n                ignored.\n                <FlexRow>\n                    <Java title={true} description={'only student drops its constructor'}>\n                        {`\n                public class Student {\n                private Shoes shoes;\n\n                public void setShoes(Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                public class Shoes {\n                private Student student;\n\n                public Shoes(Student student) {\n                this.student = student;\n                }\n                }\n                `}\n                    </Java>\n                    <Xml title={true} description={'define who has to laod at first'}>\n                        {`\n                <bean id=\"student\" lazy-init=\"false\"\n                class=\"com.arash.models.circulardep.Student\">\n                <property name=\"student\" ref=\"shoes\"/>\n                </bean>\n\n                <bean id=\"shoes\" lazy-init=\"true\"\n                class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet><br/>\n            <Bullet title={'3.'}>Using idref (idref is id of a bean as string, but it checks the existence of the bean)\n                <FlexRow>\n                    <Java title={true} description={'save idref and init before use'}>\n                        {`\n                public class Student {\n                private String shoesId;\n                private Shoes shoes;\n\n                public Student(String shoesId) {\n                this.shoesId = shoesId;\n                }\n\n                public void init(){\n                ApplicationContext ctx;\n                ctx = ContextProvider.getXmlContext();\n                shoes = (Shoes) ctx.getBean(shoesId);\n                }\n                }`}\n                    </Java>\n                    <Xml title={true} description={'pass idref instead of ref'}>\n                        {`\n                <bean id=\"student\"\n                class=\"com.arash.models.circulardep.Student\">\n                <constructor-arg>\n                <idref bean=\"shoes\"/>\n                </constructor-arg>\n                </bean>\n                <bean id=\"shoes\"\n                class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet><br/>\n            <Bullet title={'4.'}>Using depends-on\n                <FlexRow>\n                    <Java title={true}>\n                        {`\n                public class Student {\n                private Shoes shoes;\n\n                public void setShoes(Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                public class Shoes {\n                private Student student;\n\n                public Shoes(Student student) {\n                this.student = student;\n                }\n                }\n                `}\n                    </Java>\n                    <Xml title={true} description={'define who depends on who'}>\n                        {`\n                <bean id=\"student\"\n                class=\"com.arash.models.circulardep.Student\">\n                <property name=\"student\" ref=\"shoes\"/>\n                </bean>\n\n                <bean id=\"shoes\" depends-on=\"student\"\n                class=\"com.arash.models.circulardep.Shoes\">\n                <constructor-arg ref=\"student\"/>\n                </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getAnnotationCircularDependencies() {\n    return (\n        <Frame title={'Circular dependency in annotation configuration'}>\n            <InfoIcon>\n                <Blue>@Lazy</Blue> is available in spring too to load a programming element on demand\n                <Java>\n                    {`\n                @Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.FIELD})\n                @Retention(RetentionPolicy.RUNTIME)\n                @Documented\n                public @interface Lazy {\n                boolean value() default true;\n                }`}\n                </Java>\n            </InfoIcon>\n            <Java description={'resolve both via constructor; won\\'t work'}>\n                {`\n                @Component\n                public class Student {\n                private Shoes shoes;\n\n                public Student(@Autowired Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                @Component\n                public class Shoes {\n                private Student student;\n\n                public Shoes(@Autowired Student student) {\n                this.student = student;\n                }\n                }`}\n            </Java>\n            <HorizontalLine/>\n            <Java description={'resolve only one via constructor; works painless'}>\n                {`\n                @Component\n                public class Student {\n                private Shoes shoes;\n\n                public Student(@Autowired Shoes shoes) {\n                this.shoes = shoes;\n                }\n                }\n\n                @Component\n                public class Shoes {\n                @Autowired\n                private Student student;\n                }`}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getXmlLoadFromFile() {\n    return (\n        <Frame title={'Load properties from a file in xml'}>\n            Let's have a property file containing:\n            <GenericCode title={'jdbc.properties'}>\n                {`\n                jdbc.driverClassName=com.mysql.jdbc.Driver\n                jdbc.url=jdbc:mysql://localhost:3306/concretepage\n                jdbc.username=root\n                jdbc.password=`}\n            </GenericCode>\n\n            Now it's time to load the file\n            <Xml description={'using PropertySourcesPlaceholderConfigurer class'}>\n                {`\n                <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n                <property name=\"location\" value=\"jdbc.properties\"/>\n                </bean>`}\n            </Xml>\n            <Xml description={'using spring itself place-holder manager'}>\n                {'<context:property-placeholder location=\"jdbc.properties\"/>'}\n            </Xml>\n            <Xml description={'usage'}>\n                {`\n                <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\">\n                <property name=\"username\" value=\"$\\{jdbc.username}\"/>\n                <property name=\"password\" value=\"$\\{jdbc.password}\"/>\n                <property name=\"url\" value=\"$\\{jdbc.url}\"/>\n                <property name=\"driverClassName\" value=\"$\\{jdbc.driverClassName}\"/>\n                </bean>`}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getJavaLoadFromFile() {\n    return (\n        <Frame title={'Load properties from a file in annotation'}>\n            <Bullet title={'1.'}>\n                Via context environment:<br/>\n                add <Blue>@PropertySource</Blue> to your configuration class and catch it by context.getEnvironment()\n                <Java>\n                    {`\n                @Configuration\n                @ComponentScan(\"com.arash\")\n                @PropertySource(\"classpath:jdbc.properties\")\n                public class AppConfig {\n                }\n\n                //usage>>>\n                ApplicationContext ctx = ContextProvider.getAnnotaionContext();\n                Environment env = ctx.getEnvironment();\n                System.out.println(\"driver: \" + env.getProperty(\"jdbc.driverClassName\"));\n                System.out.println(\"url: \"+env.getProperty(\"jdbc.url\"));\n                System.out.println(\"username: \"+env.getProperty(\"jdbc.username\"));\n                System.out.println(\"password: \"+env.getProperty(\"jdbc.password\"));\n                `}\n                </Java>\n            </Bullet>\n            <Bullet title={'2.'}>\n                Via <Blue>@Value</Blue>:<br/>\n                <Bullet levle={1} title={'●'}>\n                    <div style={{width: '30rem'}}>\n                        return a <Blue>PropertySourcesPlaceholderConfigurer</Blue> bean which is loaded\n                        by <Blue>@PropertySource</Blue>\n                    </div>\n                </Bullet>\n                <Java>\n                    {`\n                @Configuration\n                @ComponentScan(\"com.arash\")\n                @PropertySources({\n                @PropertySource(\"configs.properties\"),\n                @PropertySource(\"classpath:jdbc.properties\")\n                })\n                public class AppConfig {\n\n                @Bean\n                public PropertySourcesPlaceholderConfigurer propertyConfigInDev() {\n                return new PropertySourcesPlaceholderConfigurer();\n                }\n                }\n\n                // Notice that you must follow format \"#{'$\\{prop-name}'}\" for @Value\n                @Component\n                public class JdbcProp {\n                @Value(\"#{'$\\{jdbc.driverClassName}'}\")\n                private String driverClassName;\n\n                @Value(\"#{'$\\{jdbc.url}'}\")\n                private String url;\n\n                @Value(\"#{'$\\{jdbc.username}'}\")\n                private String username;\n\n                @Value(\"#{'$\\{jdbc.password}'}\")\n                private String password;\n                }`}\n                </Java>\n            </Bullet>\n            <HorizontalLine/>\n            Loading generic file:\n            <Bullet title={'1.'}>\n                Through <Blue>@Value</Blue>\n                <Java>\n                    {`\n                @Component\n                public class TextFile {\n                @Value(\"classpath:data.bat\")\n                private String value;\n                }\n                `}\n                </Java>\n            </Bullet>\n            <Bullet title={'2.'}>\n                Through <Blue>Resource</Blue>:<br/>\n                Context has a Resource object embedded, So you can use that one too\n                <Java>\n                    {`\n                @Component\n                public class AnyFile {\n                @Autowired\n                private ResourceLoader resourceLoader;\n\n                public Resource getBigFile(){\n                return resourceLoader.getResource(\"classpath:bigData.dat\");\n                }\n                }`}\n                </Java>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getXmlChangingMethodBody() {\n    return (\n        <Frame title={'Changing method body'}>\n            <Bullet title={'1.'}>\n                Lookup method<br/>\n                To put it in simple words, lookup method injection is the process to override a Spring bean at the\n                runtime.<br/>\n                Use \"lookup\" to inject a method body without implementing an abstract class<br/>\n                <Java>\n                    {`\n                public class CheeseBurger {\n                }\n\n                public class MushroomBurger {\n                }\n\n                public abstract class BurgerShop {\n                public abstract MushroomBurger getMushroomBurger();\n\n                public abstract CheeseBurger getCheeseBurger();\n                }\n                `}\n                </Java>\n                <Xml>\n                    {`\n                <bean id=\"cheeseBurger\" class=\"com.arash.models.lookup.CheeseBurger\"/>\n                <bean id=\"mushroomBurger\" class=\"com.arash.models.lookup.MushroomBurger\"/>\n                <bean id=\"burgerShop\" class=\"com.arash.models.lookup.BurgerShop\">\n                <lookup-method bean=\"cheeseBurger\" name=\"getCheeseBurger\"/>\n                <lookup-method bean=\"mushroomBurger\" name=\"getMushroomBurger\"/>\n                </bean>\n                `}\n                </Xml>\n            </Bullet>\n            <HorizontalLine/>\n            <Bullet title={'2.'}>\n                Replacer method<br/>\n                Use \"method replacer\" to replace a method with the desired one by implementing MethodReplacer\n                <Java>\n                    {`\n                public class MyCar {\n                public String getMyFavoriteCar() {\n                return \"Pagani\";\n                }\n                }\n\n                public class MyReplacer implements MethodReplacer {\n                @Override\n                public Object reimplement(Object o, Method method, Object[] objects) throws Throwable {\n                return \"Lamborghini\";\n                }\n                }\n                `}\n                </Java>\n                <Xml>\n                    {`\n                <bean id=\"replacer\" class=\"com.arash.models.replacer.MyReplacer\"/>\n                <bean id=\"myCar\" class=\"com.arash.models.replacer.MyCar\">\n                <replaced-method name=\"getMyFavoriteCar\" replacer=\"replacer\"/>\n                </bean>\n                `}\n                </Xml>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getCollections() {\n    return (\n        <Frame title={'Collections'}>\n            <Xml>\n                {`\n                <bean id=\"propCollection\" class=\"com.arash.models.collections.PropertyCollection\">\n                <property name=\"map\">\n                <props>\n                <prop key=\"key1\">value1</prop>\n                <prop key=\"key2\">value2</prop>\n                </props>\n                </property>\n                </bean>\n\n                <bean id=\"mapCollection\" class=\"com.arash.models.collections.MapCollection\">\n                <property name=\"map\">\n                <map>\n                <entry key=\"key1\" value=\"value1\"/>\n                <entry key=\"key2\" value=\"value2\"/>\n                </map>\n                </property>\n                </bean>\n\n                <bean id=\"listCollection\" class=\"com.arash.models.collections.ListCollection\">\n                <property name=\"map\">\n                <list>\n                <value>entry1</value>\n                <ref bean=\"bean1\"/>\n                </list>\n                </property>\n                </bean>\n\n                <bean id=\"setCollection\" class=\"com.arash.models.collections.SetCollection\">\n                <property name=\"map\">\n                <set>\n                <value>entry1</value>\n                <ref bean=\"bean1\"/>\n                </set>\n                </property>\n                </bean>`}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getSpel() {\n    return (\n        <Frame title={'Spring Expression Language (SPEL)'}>\n            this expression is useful when we are willing to pass some data via @Value or XML or to execute a tiny piece\n            of\n            code easily.<br/>\n            The general format is <Bold>{'#{SPEL}'}</Bold><br/><br/>\n            <Purple>Usage:</Purple>\n            <Bullet title={'1.'} level={1}>\n                <Bold>java:</Bold>\n                <Java>\n                    {`\n                ExpressionParser parser = new SpelExpressionParser();\n                Expression exp = parser.parseExpression(\"'Hello World'\");\n                String message = (String) exp.getValue();`}\n                </Java>\n            </Bullet>\n            <Bullet title={'2.'} level={1}>\n                <Bold>xml:</Bold>\n                <Xml>\n                    {`\n                <!--calculate some value by spel-->\n                <bean id=\"numberGuess\" class=\"com.arash.models.ANumber\">\n                <property name=\"randomNumber\" value=\"#{T(java.lang.Math).random() * 100.0}\"/>\n                </bean>\n\n                <!--using a property of another class-->\n                <bean id=\"shapeGuess\" class=\"com.arash.models.ANumber\">\n                <property name=\"randomNumber\" value=\"#{someClass.prop}\"/>\n                </bean>`}\n                </Xml>\n            </Bullet>\n            <Bullet title={'1.'} level={1}>\n                <Bold>annotation:</Bold>\n                <Java>\n                    {`\n                public class ANumber {\n                @Value(\"900\")\n                private int randomNumber;\n\n                public void setRandomNumber(int randomNumber) {\n                this.randomNumber = randomNumber;\n                }\n                }`}\n                </Java>\n            </Bullet>\n            <HorizontalLine/>\n            <Java>\n                {`\n                /*** literal expression ***/\n                “'Hello World'”\n                \"6.0221415E+23\"\n                \"0x7FFFFFFF\"\n                \"true\"\n                \"null\"\n\n                /*** properties, arrays, lists, maps, indexers ***/\n                \"Birthdate.Year + 1900\"\n                \"Members[0].Inventions[6]\"\n                \"Officers['president'].PlaceOfBirth.City\"\n\n                StandardEvaluationContext context = new StandardEvaluationContext();\n\n                /*** inline lists, Maps ***/\n                List numbers = (List) parser.parseExpression(\"{1,2,3,4}\").getValue(context);\n                List listOfLists = (List) parser.parseExpression(\"{{'a','b'},{'x','y'}}\").getValue(context);\n                Map lst = (Map) parser.parseExpression(\"{'k1':'v1','k2':'v2'}\").getValue(context);\n\n                /*** array construction ***/\n                int[] numbers1 = (int[]) parser.parseExpression(\"new int[4]\").getValue(context);\n                int[] numbers2 = (int[]) parser.parseExpression(\"new int[]{1,2,3}\").getValue(context);\n                int[][] numbers3 = (int[][]) parser.parseExpression(\"new int[4][5]\").getValue(context);\n\n                /*** methods ***/\n                String c = parser.parseExpression(\"'abc'.substring(2, 3)\").getValue(String.class);\n\n                /*** operators ***/\n                boolean a = parser.parseExpression(\"2 == 2\").getValue(Boolean.class); //true\n                boolean b = parser.parseExpression(\"2 < -5.0\").getValue(Boolean.class); //false\n                boolean c = parser.parseExpression(\"'black' < 'block'\").getValue(Boolean.class); //true\n                boolean d = parser.parseExpression(\"'5.00' matches '^-?\\\\\\\\d+(\\\\\\\\.\\\\\\\\d{2})?$'\").getValue(Boolean.class); //true\n                boolean e = parser.parseExpression(\"true and false\").getValue(Boolean.class); //false\n                String expression = \"isMember('Nikola Tesla') and isMember('Mihajlo Pupin')\";\n                boolean f = parser.parseExpression(\"!true\").getValue(Boolean.class); //false\n                int two = parser.parseExpression(\"1 + 1\").getValue(Integer.class); // 2\n                String g = parser.parseExpression(\"'test' + ' ' + 'string'\").getValue(String.class);  // 'test string'\n                double h = parser.parseExpression(\"1000.00 - 1e4\").getValue(Double.class); // -9000\n                String i = parser.parseExpression(\"Name = 'Alexandar Seovic'\").getValue(context, String.class);\n\n                /*** types ***/\n                Class dateClass = parser.parseExpression(\"T(java.util.Date)\").getValue(Class.class);\n                Class stringClass = parser.parseExpression(\"T(String)\").getValue(Class.class);\n                boolean j = parser.parseExpression(\"T(java.math.RoundingMode).CEILING < T(java.math.RoundingMode).FLOOR\").getValue(Boolean.class); //true\n\n                /*** constructors ***/\n                Inventor einstein = parser.parseExpression(\"new com.arash.Inventor('Albert Einstein', 'German')\").getValue(Inventor.class);\n\n                /*** variables ***/\n                Inventor tesla = new Inventor(\"Nikola Tesla\", \"Serbian\");\n                StandardEvaluationContext context2 = new StandardEvaluationContext(tesla);\n                context2.setVariable(\"newName\", \"Mike Tesla\");\n                parser.parseExpression(\"Name = #newName\").getValue(context);\n                System.out.println(tesla.getName()); // \"Mike Tesla\"\n\n                /*** another sample ***/\n                List<Integer> primes = new ArrayList<Integer>();\n                primes.addAll(Arrays.asList(2, 3, 5, 7, 11, 13, 17));\n                context2.setVariable(\"primes\", primes);\n                List<Integer> primes2 = (List<Integer>) parser.parseExpression(\"#primes.?[#this>10]\").getValue(context); // select of numbers > 10\n\n                /*** functions ***/\n                context2.registerFunction(\"reverseString\", StringUtils.class.getDeclaredMethod(\"reverseString\", new Class[]{String.class}));\n                String helloWorldReversed = parser.parseExpression(\"#reverseString('hello')\").getValue(context, String.class);\n                context2.setBeanResolver(new MyBeanResolver());\n                Object bean = parser.parseExpression(\"@foo\").getValue(context);\n\n                /*** ternary Operator (If - Then - Else) ***/\n                String falseString = parser.parseExpression(\"false ? 'trueExp' : 'falseExp'\").getValue(String.class);\n\n                /*** collection Selection ***/\n                List<Inventor> list = (List<Inventor>) parser.parseExpression(\"Members.?[Nationality == 'Serbian']\").getValue(context2);\n                Map newMap = (Map) parser.parseExpression(\"map.?[value<27]\").getValue();\n                List placesOfBirth = (List) parser.parseExpression(\"Members.![placeOfBirth.city]\");\n\n\n                /*** expression templating ***/\n                String randomPhrase = parser.parseExpression(\"random number is #{T(java.lang.Math).random()}\", new TemplateParserContext()).getValue(String.class);\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getScopes() {\n    return (\n        <Frame title={'Scopes'}>\n            <Blue>Defined scopes:</Blue>\n            <Bullet title={'singleton:'}>only one instance</Bullet>\n            <Bullet title={'prototype:'}>new instance on each call</Bullet>\n            <Bullet title={'request:'}>one instance per network request. It saves on request object</Bullet>\n            <Bullet title={'session:'}>one instance per session (again on the network)</Bullet>\n            <Bullet title={'application:'}>one instance per application. It stores in ServletContext</Bullet>\n            <Bullet title={'websocket:'}>one instance per websocket.</Bullet>\n            <Xml description={'xml configuration'}>\n                {`<bean id=\"bean1\" class=\"Bean1\" scope=\"prototype\"/>`}\n            </Xml>\n            <Java description={'java configuration'}>\n                {`\n                @Configuration\n                public class AppConfig {\n                @Bean()\n                @Scope(\"prototype\")\n                private Bean1 getBean1(){\n                return new Bean1();\n                }\n                }`}\n            </Java>\n            <Java description={'annotation configuration'}>\n                {`\n                @Component\n                @Scope(\"prototype\")\n                public class Bean1 {\n                }`}\n\n            </Java>\n            <p>\n                <Red>All web scopes need listener to get worked and listeners must be defined at web layer</Red>\n            </p>\n        </Frame>\n    )\n}\n\nfunction getScopeIssue() {\n    return (\n        <Frame title={'Different scope wiring issue'}>\n            <InfoIcon>\n                Some times we involve with Longer Lived objects and Shorter Lived objects. What really happens\n                when you have different scopes? Who has to handle this situation.<br/>\n                For example, you have a singleton class which contains some prototype classes. Singleton class is\n                created only once and never changes but prototype classes must be changed each time.<br/><br/>\n                Consider the following example:\n                <FlexRow>\n                    <Java>\n                        {`\n                public class PrototypeClass {\n                }\n\n                public class SingletonClass {\n                private PrototypeClass prototypeClass;\n\n                public PrototypeClass getPrototypeClass() {\n                return prototypeClass;\n                }\n\n                public void setPrototypeClass(PrototypeClass prototypeClass) {\n                this.prototypeClass = prototypeClass;\n                }\n                }`}\n                    </Java>\n                    <Xml>\n                        {`\n                <bean id=\"singletonClass\" class=\"com.arash.models.scopes.SingletonClass\" scope=\"singleton\">\n                <property name=\"prototypeClass\" ref=\"prototypeClass\"/>\n                </bean>\n                <bean id=\"prototypeClass\" class=\"com.arash.models.scopes.PrototypeClass\" scope=\"prototype\"/>`}\n                    </Xml>\n                </FlexRow>\n                <Java description={'usage:'}>\n                    {`\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                SingletonClass sc = ctx.getBean(\"singletonClass\", SingletonClass.class);\n                Stream\n                .generate(sc::getPrototypeClass)\n                .limit(2)\n                .forEach(System.out::println);\n\n                result: >>>\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\n                `}\n                </Java>\n                <Red>You see that created objects are the same:</Red>\n            </InfoIcon>\n            To solve this issue\n            <Bullet title={'1.'}><Purple>lookup-method & replacer-method:</Purple><br/>\n                lookup and replacer methods create object under defined circumstances.\n            </Bullet>\n            <Bullet title={'2.'}><Purple>Scoped proxy:</Purple><br/>\n                we can declare a proxy to join a short-life time and long-life time classes.<br/>\n                In fact, proxy comes stands in the middle and takes the responsibility of object creation.<br/><br/>\n                <Important>Put the proxy on shorter-life time class</Important>\n                <Xml title={1}>\n                    {`\n                <bean id=\"singletonClass\" class=\"com.arash.models.scopes.SingletonClass\" scope=\"singleton\">\n                <property name=\"prototypeClass\" ref=\"prototypeClass\"/>\n                </bean>\n                <bean id=\"prototypeClass\" class=\"com.arash.models.scopes.PrototypeClass\" scope=\"prototype\">\n                <aop:scoped-proxy/>\n                </bean>`}\n                </Xml>\n                <Java title={1}>\n                    {`\n                @Component\n                @Singleton\n                public class SingletonClass {\n                }\n\n                @Component\n                @Scope(value = \"prototype\",proxyMode = ScopedProxyMode.TARGET_CLASS)\n                public class PrototypeClass {\n                }\n                `}\n                </Java>\n            </Bullet>\n            <div style={{maxWidth: '40rem'}}>\n                <Highlight>When {'<aop:scoped-proxy/>'} is in root node, all beans will be serialized at first, then\n                    on request, the bean will be deserialized, so the instance is a copy of the object.</Highlight>\n            </div>\n        </Frame>\n    )\n}\n\nfunction getBeanAware() {\n    return (\n        <Frame title={'Aware classes'}>\n            <InfoIcon>\n                <Purple>Bean lifecycle</Purple><br/>\n                <img src={beanLifecycle} alt={'bean lifecycle'} className={'center-horizontally-relative'}\n                     style={{width: '500px'}}/>\n            </InfoIcon>\n            Some times we need that a bean be aware of its context features. To reach this, we can use aware interfaces.<br/>\n            <div style={{maxWidth: '40rem'}}>\n                To hook our code into bean lifecycle, there are some interfaces available which do the job, also you can\n                do that via xml or annotaion in some cases.\n            </div>\n            <Java>\n                {`\n                public class MyBean implements Phased, BeanNameAware, BeanFactoryAware, ApplicationContextAware,\n                BeanPostProcessor, InitializingBean, DisposableBean {\n                /*Phased*/\n                @Override\n                public int getPhase() {return 0;}\n\n                /*BeanNameAware*/\n                @Override\n                public void setBeanName(String s) {}\n\n                /*BeanFactoryAware*/\n                @Override\n                public void setBeanFactory(BeanFactory beanFactory) throws BeansException {}\n\n                /*ApplicationContextAware*/\n                @Override\n                public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {}\n\n                /*BeanPostProcessor.preInitialization*/\n                @Override\n                public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n                return null;\n                }\n\n                /*InitializingBean*/\n                @Override\n                public void afterPropertiesSet() throws Exception {}\n\n                /*BeanPostProcessor.postInitialization*/\n                @Override\n                public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n                return null;\n                }\n\n                /*DisposableBean*/\n                @Override\n                public void destroy() throws Exception {}\n                }`}\n            </Java>\n            <Important>To listen to all beans destruction: <Bold>context.registerShutDownHook()</Bold></Important>\n            <br/><br/>\n            <FlexRow>\n                <Xml description={'pom.xml'}>\n                    {`\n                <dependency>\n                <groupId>org.apache.james</groupId>\n                <artifactId>james-server-lifecycle-spring</artifactId>\n                <version>3.0-beta4</version>\n                </dependency>\n                `}\n                </Xml>\n                <Java description={'annotation'}>\n                    {`\n                public class MyBean2 {\n\n                @PostConstruct\n                void afterContruct(){}\n\n                @PreDestroy\n                void preDestroy(){}\n                }`}\n                </Java>\n            </FlexRow>\n            <Java title={1}>\n                {`\n                @Configuration\n                public class AppConfig {\n\n                @Bean(initMethod = \"\")\n                public Bean1 getBean1(){\n                return new Bean1();\n                }\n                }`}\n            </Java>\n            <Xml description={'Via xml'}>\n                {`\n                <!-- post-init -->\n                <bean init-bean=\"...\"/>\n                <bean init-method=\"...\"/>\n\n                <!-- to init all bean as the same -->\n                <beans default-init-method=\"unique method\"/>\n\n                <!-- pre-destroy -->\n                <bean destroy-method=\"...\"/>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getTemplateClass() {\n    return (\n        <Frame title={'Template class'}>\n            Template class come in when we are willing to initialize a set of beans refusing any much bothering.\n            <FlexRow>\n                <Java>\n                    {`\n                public class Student {\n                private String name;\n                private int age;\n                private String hairColor;\n\n                public void setName(String name) {\n                this.name = name;\n                }\n\n                public void setAge(int age) {\n                this.age = age;\n                }\n\n                public void setHairColor(String hairColor) {\n                this.hairColor = hairColor;\n                }\n                }`}\n                </Java>\n                <Xml>\n                    {`\n                <!-- declare an abstract class -->\n                <bean id=\"templatePerson\" abstract=\"true\">\n                <property name=\"name\" value=\"arash\"/>\n                <property name=\"age\" value=\"33\"/>\n                </bean>\n\n                <!-- define the abstract class as parent -->\n                <bean id=\"student\" class=\"com.arash.models.Student\" parent=\"templatePerson\">\n                <property name=\"hairColor\" value=\"black\"/>\n                </bean>`}\n                </Xml>\n            </FlexRow>\n\n        </Frame>\n    )\n}\n\nfunction getEvent() {\n    return (\n        <Frame title={'Events'}>\n            <InfoIcon>\n                <Bold><Red>!!Notice that the event mechanism is synchronous and the process has to wait till the event\n                    process terminates!!</Red></Bold>\n                <p>\n                    There are two types of event, <Blue>standard</Blue> and <Blue>custom</Blue>. Standard ones are\n                    limited:\n                    <Bullet title={'ContextStartedEvent:'}>When the ApplicationContext is started using the start()\n                        method on the ConfigurableApplicationContext interface. You can poll your database or you can\n                        restart any stopped application after receiving this event.</Bullet>\n                    <Bullet title={'ContextStoppedEvent:'}>When the ApplicationContext is stopped using the stop()\n                        method\n                        on the ConfigurableApplicationContext interface. You can do required housekeep work after\n                        receiving this event.</Bullet>\n                    <Bullet title={'ContextClosedEvent:'}>When the ApplicationContext is closed using the close() method\n                        on the ConfigurableApplicationContext interface.</Bullet>\n                    <Bullet title={'ContextRefreshedEvent:'}>When the ApplicationContext is either initialized or\n                        refreshed. This can also be raised using the refresh() method on the\n                        ConfigurableApplicationContext interface.</Bullet>\n                    <Bullet title={'RequestHandledEvent:'}>This is a web-specific event telling all beans that an HTTP\n                        request has been serviced.</Bullet>\n                    <Bullet title={'ServletRequestHandledEvent:'}>This one is child of the previous one and refers those\n                        requests from servlet</Bullet>\n                </p>\n            </InfoIcon>\n            In every event propagation 3 parties are\n            involved: <Bold>Publisher</Bold>, <Bold>Listener</Bold> and <Bold>EventObject</Bold> itself.\n            <br/><br/>\n            About standard events, event object and publisher are defined previously and you have to declare only\n            listener.<br/>\n            To raise a standard event:\n            <Java>\n                {`\n                @Component\n                public class RegisterPersonEventListener implements ApplicationListener<ContextStartedEvent> {\n\n                @Override\n                public void onApplicationEvent(ContextStartedEvent contextStartedEvent) {\n                System.out.println(\"context started\");\n                }\n                }\n\n                //usage>>>\n                ConfigurableApplicationContext ctx= (ConfigurableApplicationContext) ContextProvider.getAnnotaionContext();\n                ctx.start();\n\n                //output>>>\n                context started\n                `}\n            </Java>\n            But for publishing custom event you have to declare all three parties.<br/>\n            To raise custom event:\n            <Java>\n                {`\n                // event object\n                public class RegisterPersonEvent extends ApplicationEvent {\n                public String registeredBy;\n\n                public RegisterPersonEvent(Object source, String registeredBy) {\n                super(source);\n                this.registeredBy = registeredBy;\n                }\n                }\n\n                // publisher object\n                @Component\n                public class RegisterPersonEventPublisher implements ApplicationEventPublisherAware {\n                /*you can also autowire this field and ignore 'ApplicationEventPublisherAware' implementation*/\n                private ApplicationEventPublisher publisher;\n\n                @Override\n                public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\n                this.publisher = applicationEventPublisher;\n                }\n\n                public void send(String registeredBy) {\n                publisher.publishEvent(new RegisterPersonEvent(this, registeredBy));\n                }\n                }\n\n                // listener object\n                @Component\n                public class RegisterPersonEventListener implements ApplicationListener<RegisterPersonEvent> {\n\n                @Override\n                public void onApplicationEvent(RegisterPersonEvent registerPersonEvent) {\n                System.out.println(\"register person raised by \" + registerPersonEvent.registeredBy);\n                }\n                }\n                `}\n            </Java>\n            Listener can be declared via annotation too. Notice that you may have more than 1 listeners, os you have to\n            define some selection argument. By default, method argument determines what listener is suitable for an\n            event and in some versions name become important to.\n            <Java>\n                {`\n                /*\n                * in some versions, name of the listener is important\n                * and you must follow rule \"process\"+EventName\n                * In this way listener is selected with the argument\n                */\n                @EventListener\n                public void processUserRegistrationEvent(UserRegistrationEvent event) {}\n                `}\n            </Java>\n            also you can identify the event in some other ways (class or spel):\n            <Java>\n                {`\n                @EventListener({UserRegistrationEvent.class, ContextStartedEvent.class})\n                or\n                @EventListener(condition = \"#blEvnet.name='someName'\") //check out this on the Internet\n                public void processUserRegistrationEvent(UserRegistrationEvent event) {}\n                `}\n            </Java>\n            <Blue>\n                If there are more than 1 listener available and you need to organize theme,\n                use <Bold>@Order(intValue)</Bold> on method.\n            </Blue>\n        </Frame>\n    )\n}\n\nfunction getAsyncJob() {\n    return (\n        <Frame title={'Asynchronous'}>\n            You must define an executor and prepare spring for asynchronous operation, then you have to determine which\n            method is going to be executed asynchronously by @Async annotation.\n            <p>\n                <Blue>Notice that the method which annotated with @Async must be public and you can not do\n                    self-invocation as it bypasses a proxy </Blue>\n            </p>\n            <p>\n                As asynched method is passed through a proxy, return value must be void or Future\n            </p>\n            <FlexRow>\n                <Java description={'Configuring asynchronous operation via java'}>\n                    {`\n                @Configuration\n                @ComponentScan(\"com.arash\")\n                @EnableAsync\n                public class AnnoConfig {\n\n                @Bean(name = \"executor\")//give it a name\n                public Executor getAsyncExecutor() {\n                ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n                //configure executor as you want\n                executor.setCorePoolSize(2);\n                executor.setMaxPoolSize(10);\n                executor.setKeepAliveSeconds(20);\n                executor.setQueueCapacity(10);\n                executor.setThreadNamePrefix(\"listener\");\n                executor.initialize();\n                return executor;\n                }\n                }\n\n                @Component\n                public class Counter {\n                @Async(\"executor\") //this name points to the defined executor.\n                public void startCounting(int start, int end, String msg) throws InterruptedException {\n                System.out.println(\"counter: \" + Thread.currentThread().getName());\n                for (int i = start; i < end; i++) {\n                System.out.println(msg + \" -> \" + i);\n                Thread.currentThread().sleep(1000);\n                }\n                }\n                }\n                `}\n                </Java>\n                <Xml description={'Configuring asynchronous operation via xml'}>\n                    {`\n                <task:executor id=\"executor1\" pool-size=\"10\" queue-capacity=\"10\"/>\n                <task:annotation-driven executor=\"executor1\"/>\n                `}\n                </Xml>\n            </FlexRow>\n        </Frame>\n    )\n}\n\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}