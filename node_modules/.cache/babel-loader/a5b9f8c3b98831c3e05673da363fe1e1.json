{"ast":null,"code":"import { Shape } from \"./shape\";\nimport { Line } from \"./line\";\nexport class Path extends Shape {\n  constructor() {\n    super();\n    this.points = [];\n    this.setStrokeWidth(1);\n  }\n  /**\n   * @param point [x,y,ox,oy]\n   */\n\n\n  setStart(point) {\n    this.points[0] = point;\n    return this;\n  }\n\n  setEnd(point) {\n    throw new Error('use lineTo(point) instead');\n  }\n\n  setQuadraticPoint(point) {\n    throw new Error('use quadraticTo(qCurvePoint, endPoint) instead');\n  }\n  /**\n   * @param point [x,y,ox,oy] or [intR,length,ox,oy] for radian, [intD,length,ox,oy] for degree or [shape,gap,ox,oy].<br/>\n   */\n\n\n  lineTo(point) {\n    this.points.push(new Line().setEnd(point));\n    return this;\n  }\n  /**\n   * @param curve [x,y,ox,oy] or [intR,length,ox,oy] for radian, [intD,length,ox,oy] for degree or [shape,gap,ox,oy].<br/>\n   * @param end [x,y,ox,oy] or [intR,length,ox,oy] for radian, [intD,length,ox,oy] for degree or [shape,gap,ox,oy].<br/>\n   */\n\n\n  quadraticTo(curve, end) {\n    this.points.push(new Line().setQuadraticPoint(curve).setEnd(end));\n    return this;\n  }\n  /**\n   * show arrows on the line\n   * @param direction 0 or 1\n   * @param places array of float values, each is 0 - 1;\n   * @return Shape\n   */\n\n\n  showArrow(direction, places) {\n    this.direction = direction;\n    this.places = typeof places === 'number' ? [places] : places;\n    return this;\n  }\n\n  render(canvasCtx) {\n    this.prepareLines();\n\n    for (let i = 1; i < this.points.length; i++) {\n      this.points[i].render(canvasCtx);\n    }\n  }\n\n  prepareLines() {\n    let lengths = [0]; // extract each line length to determine exact place of arrow\n\n    this.points[1].setStart(this.points[0]);\n    this.points[1].setOffset(this.offset);\n    this.initLine(this.points[1]);\n    lengths.push(this.points[1].getLength());\n\n    for (let i = 2; i < this.points.length; i++) {\n      this.points[i].setStart(this.points[i - 1].getEnd());\n      this.points[i].setOffset(this.offset);\n      this.initLine(this.points[i]);\n      lengths.push(lengths[i - 1] + this.points[i].getLength());\n    } //deter mine arrow position\n\n\n    if (this.places != null && this.places.length > 0) {\n      let repo = this.getDistributedArrowPlaces(lengths);\n\n      for (let k in repo) {\n        this.points[repo[k].key + 1].showArrow(this.direction, repo[k].items);\n      }\n    }\n  }\n\n  getDistributedArrowPlaces(lengths) {\n    let max = lengths[lengths.length - 1];\n    let p, temp;\n    let repo = [];\n\n    for (let i = 0; i < this.places.length; i++) {\n      p = this.places[i] * max;\n\n      for (let j = 0; j < lengths.length - 1; j++) {\n        if (p >= lengths[j] && p <= lengths[j + 1]) {\n          temp = this.getRepoObject(repo, j);\n          temp.items.push((p - lengths[j]) / (lengths[j + 1] - lengths[j]));\n          break;\n        }\n      }\n    }\n\n    return repo;\n  }\n\n  getRepoObject(repo, key) {\n    if (repo[key] == null) repo[key] = {\n      key: key,\n      items: [],\n      places: []\n    };\n    return repo[key];\n  }\n\n  initLine(line) {\n    line.setFillColor(this.fillColor);\n    line.setStrokeColor(this.strokeColor);\n    line.setStrokeWidth(this.strokeWidth);\n    line.setStrokeStyle(this.strokeStyle);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/path.js"],"names":["Shape","Line","Path","constructor","points","setStrokeWidth","setStart","point","setEnd","Error","setQuadraticPoint","lineTo","push","quadraticTo","curve","end","showArrow","direction","places","render","canvasCtx","prepareLines","i","length","lengths","setOffset","offset","initLine","getLength","getEnd","repo","getDistributedArrowPlaces","k","key","items","max","p","temp","j","getRepoObject","line","setFillColor","fillColor","setStrokeColor","strokeColor","strokeWidth","setStrokeStyle","strokeStyle"],"mappings":"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","sourcesContent":["import {Shape} from \"./shape\";\nimport {Line} from \"./line\";\n\nexport class Path extends Shape {\n    points = [];\n\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n    }\n\n    /**\n     * @param point [x,y,ox,oy]\n     */\n    setStart(point) {\n        this.points[0] = point;\n        return this;\n    }\n\n    setEnd(point) {\n        throw new Error('use lineTo(point) instead');\n    }\n\n    setQuadraticPoint(point) {\n        throw new Error('use quadraticTo(qCurvePoint, endPoint) instead');\n    }\n\n    /**\n     * @param point [x,y,ox,oy] or [intR,length,ox,oy] for radian, [intD,length,ox,oy] for degree or [shape,gap,ox,oy].<br/>\n     */\n    lineTo(point) {\n        this.points.push(new Line().setEnd(point));\n        return this;\n    }\n\n    /**\n     * @param curve [x,y,ox,oy] or [intR,length,ox,oy] for radian, [intD,length,ox,oy] for degree or [shape,gap,ox,oy].<br/>\n     * @param end [x,y,ox,oy] or [intR,length,ox,oy] for radian, [intD,length,ox,oy] for degree or [shape,gap,ox,oy].<br/>\n     */\n    quadraticTo(curve, end) {\n        this.points.push(new Line().setQuadraticPoint(curve).setEnd(end));\n        return this;\n    }\n\n    /**\n     * show arrows on the line\n     * @param direction 0 or 1\n     * @param places array of float values, each is 0 - 1;\n     * @return Shape\n     */\n    showArrow(direction, places) {\n        this.direction = direction;\n        this.places = typeof places === 'number' ? [places] : places;\n        return this;\n    }\n\n    render(canvasCtx) {\n        this.prepareLines();\n        for (let i = 1; i < this.points.length; i++) {\n            this.points[i].render(canvasCtx);\n        }\n    }\n\n    prepareLines() {\n        let lengths = [0]; // extract each line length to determine exact place of arrow\n\n        this.points[1].setStart(this.points[0]);\n        this.points[1].setOffset(this.offset);\n        this.initLine(this.points[1]);\n        lengths.push(this.points[1].getLength());\n\n        for (let i = 2; i < this.points.length; i++) {\n            this.points[i].setStart(this.points[i - 1].getEnd());\n            this.points[i].setOffset(this.offset);\n            this.initLine(this.points[i]);\n            lengths.push(lengths[i - 1] + this.points[i].getLength());\n        }\n\n        //deter mine arrow position\n        if (this.places != null && this.places.length > 0) {\n            let repo = this.getDistributedArrowPlaces(lengths);\n            for (let k in repo) {\n                this.points[repo[k].key + 1].showArrow(this.direction, repo[k].items);\n            }\n        }\n    }\n\n    getDistributedArrowPlaces(lengths) {\n        let max = lengths[lengths.length - 1];\n        let p, temp;\n        let repo = [];\n        for (let i = 0; i < this.places.length; i++) {\n            p = this.places[i] * max;\n            for (let j = 0; j < lengths.length - 1; j++) {\n                if (p >= lengths[j] && p <= lengths[j + 1]) {\n                    temp = this.getRepoObject(repo, j);\n                    temp.items.push((p - lengths[j]) / (lengths[j + 1] - lengths[j]));\n                    break;\n                }\n            }\n        }\n        return repo;\n    }\n\n    getRepoObject(repo, key) {\n        if (repo[key] == null)\n            repo[key] = {key: key, items: [], places: []};\n        return repo[key];\n    }\n\n    initLine(line) {\n        line.setFillColor(this.fillColor);\n        line.setStrokeColor(this.strokeColor);\n        line.setStrokeWidth(this.strokeWidth);\n        line.setStrokeStyle(this.strokeStyle);\n    }\n}"]},"metadata":{},"sourceType":"module"}