{"ast":null,"code":"const _pi6 = Math.PI / 6; //30deg\n// const _pi2 = Math.PI / 2;   //90deg\n// const _3pi2 = 3 * _pi2;     //270deg\n\n\nconst _2pi = 2 * Math.PI; //360deg\n\n\nfunction getAngle(x1, y1, x2, y2) {\n  let dx = x2 - x1;\n  let dy = y2 - y1;\n  return Math.atan2(dy, dx);\n}\n\nfunction normalizeDegree(deg) {\n  if (deg > 360) deg %= 360;else if (deg < 0) deg = deg % 360 + 360;\n  return deg;\n}\n\nfunction normalizeRadian(rad) {\n  if (rad > _2pi) rad %= _2pi;else if (rad < 0) rad = rad % _2pi + _2pi;\n  return rad;\n} // function rad2Deg(rad) {\n//     return 180 * rad / Math.PI;\n// }\n\n\nfunction deg2Rad(deg) {\n  return Math.PI * normalizeDegree(deg) / 180;\n}\n\nclass Shape {\n  constructor() {\n    this.fillColor = undefined;\n    this.label = undefined;\n    this.strokeWidth = 0;\n    this.strokeColor = '#000';\n    this.strokeStyle = [1, 0];\n    this.offset = [0, 0];\n    this.basePosition = [0, 0];\n    this.xy = [0, 0];\n  }\n  /**\n   * calculate final position\n   */\n\n\n  calculateFinalPosition() {\n    this.xy = [this.basePosition[0] + this.offset[0], this.basePosition[1] + this.offset[1]];\n  }\n  /**\n   * @param fillColor internal color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n   * @returns {Shape}\n   */\n\n\n  setFillColor(fillColor) {\n    this.fillColor = fillColor;\n    return this;\n  }\n  /**\n   * @param strokeWidth int value\n   * @returns {Shape}\n   */\n\n\n  setStrokeWidth(strokeWidth) {\n    this.strokeWidth = strokeWidth;\n    return this;\n  }\n  /**\n   * set both fill color and stroke color\n   * @param color [green, blue, red, yellow, purple, brown, orange, pink]\n   * @return {Shape}\n   */\n\n\n  setColor(color) {\n    this.setFillColor(Shape.colors[color][0]);\n    this.setStrokeColor(Shape.colors[color][1]);\n    return this;\n  }\n  /**\n   * @param strokeColor stroke color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n   * @returns {Shape}\n   */\n\n\n  setStrokeColor(strokeColor) {\n    this.strokeColor = strokeColor;\n    return this;\n  }\n  /**\n   * make line dashed\n   * @param strokeStyle [int,int]. It means [fill, empty]\n   * @returns {Shape}\n   */\n\n\n  setStrokeStyle(strokeStyle) {\n    this.strokeStyle = strokeStyle;\n    return this;\n  }\n  /**\n   * label is going to be shown at center of this shape\n   * @param label string or Text object\n   * @returns {Shape}\n   */\n\n\n  setLabel(label) {\n    if (typeof label === \"string\") {\n      label = new Text().setPosition(this.getCenterPoint()).setLabel(label);\n    }\n\n    this.label = label;\n    return this;\n  }\n  /**\n   * @param position [x,y]\n   * @returns {Shape}\n   */\n\n\n  setPosition(position) {\n    this.basePosition = position;\n    this.calculateFinalPosition();\n    return this;\n  }\n  /**\n   * @param offset [xOffset,yOffset]\n   * @returns {Shape}\n   */\n\n\n  setOffset(offset) {\n    this.offset = offset;\n    this.calculateFinalPosition();\n    return this;\n  }\n  /**\n   * @param shape another shape object\n   * @returns {Shape}\n   */\n\n\n  alignTo(shape) {\n    this.setPosition(shape.getCenterPoint());\n    return this;\n  }\n  /**\n   * get final position\n   * @returns {*[]}\n   */\n\n\n  getPosition() {\n    return this.xy;\n  }\n  /**\n   * get center point of this shape\n   */\n\n\n  getCenterPoint() {\n    return this.getPosition();\n  }\n\n  getExternalPoint(angle, gap) {\n    return this.getPosition();\n  }\n  /**\n   * render label object\n   * @param ctx\n   */\n\n\n  showLabel(ctx) {\n    let p = this.getCenterPoint();\n    this.label.setPosition(p);\n    this.label.render(ctx);\n  }\n  /**\n   * apply configurations\n   * @param canvasCtx\n   */\n\n\n  render(canvasCtx) {\n    canvasCtx.fillStyle = this.fillColor;\n    canvasCtx.lineWidth = this.strokeWidth;\n    canvasCtx.strokeStyle = this.strokeColor;\n    canvasCtx.setLineDash(this.strokeStyle);\n    if (this.fillColor) canvasCtx.fill();\n    if (this.strokeWidth > 0) canvasCtx.stroke();\n    if (this.label) this.showLabel(canvasCtx);\n  }\n\n}\n\nShape.colors = {\n  'green': ['rgb(51, 204, 51)', 'rgb(0, 153, 51)'],\n  'blue': ['rgb(51, 102, 255)', 'rgb(0, 0, 255)'],\n  'red': ['rgb(255,0,0)', 'rgb(137,16,16)'],\n  'yellow': ['rgb(255, 255, 102)', 'rgb(255, 204, 0)'],\n  'purple': ['rgb(153, 51, 255)', 'rgb(121,7,191)'],\n  'brown': ['rgb(153, 102, 0)', 'rgb(102, 51, 0)'],\n  'orange': ['rgb(255, 153, 51)', 'rgb(255, 102, 0)'],\n  'pink': ['rgb(255, 102, 153)', 'rgb(255, 51, 153)']\n};\nexport class Text extends Shape {\n  constructor() {\n    super();\n    this.setFillColor('black');\n    this.setFontSize('12px');\n    this.setFontStyle('');\n  }\n\n  setLabel(label) {\n    this.txt = label;\n    return this;\n  }\n  /**\n   * @param fontSize ex. 12px\n   * @returns {Text}\n   */\n\n\n  setFontSize(fontSize) {\n    this.fontSize = fontSize;\n    return this;\n  }\n  /**\n   * @param fontStyle ex. 'italic' or 'bold' or both 'italic bold'\n   * * @returns {Text}\n   */\n\n\n  setFontStyle(fontStyle) {\n    this.fontStyle = fontStyle;\n    return this;\n  }\n\n  render(canvasCtx) {\n    canvasCtx.beginPath();\n    super.render(canvasCtx);\n    canvasCtx.font = this.fontStyle + ' ' + this.fontSize + \" Arial\";\n    canvasCtx.textAlign = \"center\";\n    let c = this.getPosition();\n    canvasCtx.fillText(this.txt, c[0], c[1]);\n    canvasCtx.closePath();\n  }\n\n}\nexport class Circle extends Shape {\n  setRadius(radius) {\n    this.r = radius;\n    return this;\n  }\n\n  getExternalPoint(angle, gap) {\n    let c = this.getPosition();\n    return [c[0] + (this.r + gap) * Math.cos(angle), c[1] + (this.r + gap) * Math.sin(angle)];\n  }\n\n  render(canvasCtx) {\n    canvasCtx.beginPath();\n    let c = this.getPosition();\n    canvasCtx.arc(c[0], c[1], this.r, 0, _2pi);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n}\nexport class Line extends Shape {\n  constructor() {\n    super();\n    this.setStrokeWidth(1);\n  }\n  /**\n   * @param shape1 shape 1\n   * @param shape2 shape 2\n   * @param gap the gap between line and target shapes. gap>=0\n   */\n\n\n  between(shape1, shape2, gap = 0) {\n    let c1 = shape1.getCenterPoint();\n    let c2 = shape2.getCenterPoint();\n    c1 = shape1.getExternalPoint(getAngle(c1[0], c1[1], c2[0], c2[1]), gap);\n    c2 = shape2.getExternalPoint(getAngle(c2[0], c2[1], c1[0], c1[1]), gap);\n    this.setPosition(c1);\n    this.lineTo(c2);\n    return this;\n  }\n  /**\n   * @param point [x,y] or [intR, length] for radian or [intD, length] for degree\n   */\n\n\n  lineTo(point) {\n    if (typeof point[0] === 'string') {\n      let i = point[0].length - 1;\n      let c = point[0][i];\n      let v = Number(point[0].substring(0, i));\n\n      if (c === 'R' || c === 'r') {\n        this.secondP = this.getTargetPoint(v, point[1]);\n      } else if (c === 'D' || c === 'd') {\n        this.secondP = this.getTargetPoint(deg2Rad(v), point[1]);\n      } else {\n        throw new Error('wrong input');\n      }\n    } else {\n      this.secondP = point;\n    }\n  }\n\n  getTargetPoint(r, d) {\n    let p = this.getPosition();\n    return [p[0] + Math.cos(r) * d, p[1] + Math.sin(r) * d];\n  }\n\n  getCenterPoint() {\n    let p = this.getPosition();\n    return [(p[0] + this.secondP[0]) / 2, (p[1] + this.secondP[1]) / 2];\n  }\n  /**\n   * show arrows on the line\n   * @param direction 0 or 1\n   * @param places array of float values, each is 0 - 1;\n   * @return Shape\n   */\n\n\n  showArrow(direction, places) {\n    this.direction = direction;\n    this.places = places;\n    return this;\n  }\n\n  drawArrow(canvasCtx, length, angle, x, y) {\n    canvasCtx.beginPath();\n    let p1 = [x + length * Math.cos(angle - _pi6), y + length * Math.sin(angle - _pi6)];\n    let p2 = [x + length * Math.cos(angle + _pi6), y + length * Math.sin(angle + _pi6)];\n    canvasCtx.moveTo(x, y);\n    canvasCtx.lineTo(p1[0], p1[1]);\n    canvasCtx.lineTo(p2[0], p2[1]);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n  render(canvasCtx) {\n    let p1 = this.getPosition();\n    canvasCtx.beginPath();\n    canvasCtx.moveTo(p1[0], p1[1]);\n    canvasCtx.lineTo(this.secondP[0], this.secondP[1]);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n\n    if (this.direction !== undefined && this.places !== undefined) {\n      if (!this.places[0]) this.places = [this.places];\n      let angle = this.direction ? getAngle(this.secondP[0], this.secondP[1], p1[0], p1[1]) : getAngle(p1[0], p1[1], this.secondP[0], this.secondP[1]);\n\n      for (let i = 0; i < this.places.length; i++) {\n        let x = p1[0] + (this.secondP[0] - p1[0]) * this.places[i];\n        let y = p1[1] + (this.secondP[1] - p1[1]) * this.places[i];\n        this.drawArrow(canvasCtx, 10, angle, x, y);\n      }\n    }\n  }\n\n}\nexport class Rectangle extends Shape {\n  setWidth(width) {\n    this.width = width;\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = height;\n    return this;\n  }\n\n  getCenterPoint() {\n    let p = this.getPosition();\n    return [p[0] + this.width / 2, p[1] + this.height / 2];\n  }\n\n  getExternalPoint(angle, gap) {\n    let c = this.getCenterPoint();\n    let p = this.getPosition();\n    let rbc = getAngle(c[0], c[1], p[0] + this.width, p[1] + this.height); //right-bottom corner\n\n    let lbc = Math.PI - rbc; //left-bottom corner\n\n    let ltc = Math.PI + rbc; //left-top corner\n\n    let rtc = _2pi - rbc; //right-top corner\n\n    angle = normalizeRadian(angle); //get angle between 0 - ~629\n\n    if (angle >= rbc && angle < lbc) {\n      //cross bottom edge\n      return this.getTBTarget(c, angle, gap, 1);\n    } else if (angle >= lbc && angle < ltc) {\n      //cross left edge\n      return this.getLRTarget(c, angle, gap, -1);\n    } else if (angle >= ltc && angle < rtc) {\n      //cross top edge\n      return this.getTBTarget(c, angle, gap, -1);\n    } else {\n      //cross right edge\n      return this.getLRTarget(c, angle, gap, 1);\n    }\n  }\n\n  getTBTarget(c, angle, gap, sign) {\n    let l = this.height / 2 / Math.sin(angle);\n    l += sign * gap;\n    return [c[0] + sign * l * Math.cos(angle), c[1] + sign * l * Math.sin(angle)];\n  }\n\n  getLRTarget(c, angle, gap, sign) {\n    let l = this.width / 2 / Math.cos(angle);\n    l += sign * gap;\n    return [c[0] + sign * l * Math.cos(angle), c[1] + sign * l * Math.sin(angle)];\n  }\n\n  render(canvasCtx) {\n    canvasCtx.beginPath();\n    let p = this.getPosition();\n    canvasCtx.rect(p[0], p[1], this.width, this.height);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n}\nexport class DrawBox {\n  constructor() {\n    this.lst = [];\n  }\n\n  addShape(shape) {\n    this.lst.push(shape);\n    return this;\n  }\n\n  render(canvas) {\n    let ctx = canvas.getContext('2d');\n    this.lst.forEach(v => v.render(ctx));\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/draw-box.js"],"names":["_pi6","Math","PI","_2pi","getAngle","x1","y1","x2","y2","dx","dy","atan2","normalizeDegree","deg","normalizeRadian","rad","deg2Rad","Shape","constructor","fillColor","undefined","label","strokeWidth","strokeColor","strokeStyle","offset","basePosition","xy","calculateFinalPosition","setFillColor","setStrokeWidth","setColor","color","colors","setStrokeColor","setStrokeStyle","setLabel","Text","setPosition","getCenterPoint","position","setOffset","alignTo","shape","getPosition","getExternalPoint","angle","gap","showLabel","ctx","p","render","canvasCtx","fillStyle","lineWidth","setLineDash","fill","stroke","setFontSize","setFontStyle","txt","fontSize","fontStyle","beginPath","font","textAlign","c","fillText","closePath","Circle","setRadius","radius","r","cos","sin","arc","Line","between","shape1","shape2","c1","c2","lineTo","point","i","length","v","Number","substring","secondP","getTargetPoint","Error","d","showArrow","direction","places","drawArrow","x","y","p1","p2","moveTo","Rectangle","setWidth","width","setHeight","height","rbc","lbc","ltc","rtc","getTBTarget","getLRTarget","sign","l","rect","DrawBox","lst","addShape","push","canvas","getContext","forEach"],"mappings":"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","sourcesContent":["const _pi6 = Math.PI / 6;   //30deg\n// const _pi2 = Math.PI / 2;   //90deg\n// const _3pi2 = 3 * _pi2;     //270deg\nconst _2pi = 2 * Math.PI;   //360deg\n\nfunction getAngle(x1, y1, x2, y2) {\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n    return Math.atan2(dy, dx);\n}\n\nfunction normalizeDegree(deg) {\n    if (deg > 360)\n        deg %= 360;\n    else if (deg < 0)\n        deg = deg % 360 + 360;\n    return deg;\n}\n\nfunction normalizeRadian(rad) {\n    if (rad > _2pi)\n        rad %= _2pi;\n    else if (rad < 0)\n        rad = rad % _2pi + _2pi;\n    return rad;\n}\n\n// function rad2Deg(rad) {\n//     return 180 * rad / Math.PI;\n// }\n\nfunction deg2Rad(deg) {\n    return Math.PI * normalizeDegree(deg) / 180;\n}\n\nclass Shape {\n    static colors = {\n        'green': ['rgb(51, 204, 51)', 'rgb(0, 153, 51)'],\n        'blue': ['rgb(51, 102, 255)', 'rgb(0, 0, 255)'],\n        'red': ['rgb(255,0,0)', 'rgb(137,16,16)'],\n        'yellow': ['rgb(255, 255, 102)', 'rgb(255, 204, 0)'],\n        'purple': ['rgb(153, 51, 255)', 'rgb(121,7,191)'],\n        'brown': ['rgb(153, 102, 0)', 'rgb(102, 51, 0)'],\n        'orange': ['rgb(255, 153, 51)', 'rgb(255, 102, 0)'],\n        'pink': ['rgb(255, 102, 153)', 'rgb(255, 51, 153)'],\n    };\n\n    constructor() {\n        this.fillColor = undefined;\n        this.label = undefined;\n        this.strokeWidth = 0;\n        this.strokeColor = '#000';\n        this.strokeStyle = [1, 0];\n        this.offset = [0, 0];\n        this.basePosition = [0, 0];\n        this.xy = [0, 0];\n    }\n\n    /**\n     * calculate final position\n     */\n    calculateFinalPosition() {\n        this.xy = [this.basePosition[0] + this.offset[0], this.basePosition[1] + this.offset[1]];\n    }\n\n    /**\n     * @param fillColor internal color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n     * @returns {Shape}\n     */\n    setFillColor(fillColor) {\n        this.fillColor = fillColor;\n        return this;\n    }\n\n    /**\n     * @param strokeWidth int value\n     * @returns {Shape}\n     */\n    setStrokeWidth(strokeWidth) {\n        this.strokeWidth = strokeWidth;\n        return this;\n    }\n\n    /**\n     * set both fill color and stroke color\n     * @param color [green, blue, red, yellow, purple, brown, orange, pink]\n     * @return {Shape}\n     */\n    setColor(color) {\n        this.setFillColor(Shape.colors[color][0]);\n        this.setStrokeColor(Shape.colors[color][1]);\n        return this;\n    }\n\n    /**\n     * @param strokeColor stroke color. ex. 'black' or '#000' or rgb(0,0,0) or hsl(0,0%,0%)\n     * @returns {Shape}\n     */\n    setStrokeColor(strokeColor) {\n        this.strokeColor = strokeColor;\n        return this;\n    }\n\n    /**\n     * make line dashed\n     * @param strokeStyle [int,int]. It means [fill, empty]\n     * @returns {Shape}\n     */\n    setStrokeStyle(strokeStyle) {\n        this.strokeStyle = strokeStyle;\n        return this;\n    }\n\n    /**\n     * label is going to be shown at center of this shape\n     * @param label string or Text object\n     * @returns {Shape}\n     */\n    setLabel(label) {\n        if (typeof label === \"string\") {\n            label = new Text()\n                .setPosition(this.getCenterPoint())\n                .setLabel(label)\n        }\n        this.label = label;\n        return this;\n    }\n\n    /**\n     * @param position [x,y]\n     * @returns {Shape}\n     */\n    setPosition(position) {\n        this.basePosition = position;\n        this.calculateFinalPosition();\n        return this;\n    }\n\n    /**\n     * @param offset [xOffset,yOffset]\n     * @returns {Shape}\n     */\n    setOffset(offset) {\n        this.offset = offset;\n        this.calculateFinalPosition();\n        return this;\n    }\n\n    /**\n     * @param shape another shape object\n     * @returns {Shape}\n     */\n    alignTo(shape) {\n        this.setPosition(shape.getCenterPoint());\n        return this;\n    }\n\n    /**\n     * get final position\n     * @returns {*[]}\n     */\n    getPosition() {\n        return this.xy;\n    }\n\n    /**\n     * get center point of this shape\n     */\n    getCenterPoint() {\n        return this.getPosition();\n    }\n\n    getExternalPoint(angle, gap) {\n        return this.getPosition();\n    }\n\n    /**\n     * render label object\n     * @param ctx\n     */\n    showLabel(ctx) {\n        let p = this.getCenterPoint();\n        this.label.setPosition(p);\n        this.label.render(ctx);\n    }\n\n    /**\n     * apply configurations\n     * @param canvasCtx\n     */\n    render(canvasCtx) {\n        canvasCtx.fillStyle = this.fillColor;\n        canvasCtx.lineWidth = this.strokeWidth;\n        canvasCtx.strokeStyle = this.strokeColor;\n        canvasCtx.setLineDash(this.strokeStyle);\n        if (this.fillColor)\n            canvasCtx.fill();\n        if (this.strokeWidth > 0)\n            canvasCtx.stroke();\n        if (this.label)\n            this.showLabel(canvasCtx);\n    }\n}\n\nexport class Text extends Shape {\n    constructor() {\n        super();\n        this.setFillColor('black');\n        this.setFontSize('12px');\n        this.setFontStyle('');\n    }\n\n    setLabel(label) {\n        this.txt = label;\n        return this;\n    }\n\n    /**\n     * @param fontSize ex. 12px\n     * @returns {Text}\n     */\n    setFontSize(fontSize) {\n        this.fontSize = fontSize;\n        return this;\n    }\n\n    /**\n     * @param fontStyle ex. 'italic' or 'bold' or both 'italic bold'\n     * * @returns {Text}\n     */\n    setFontStyle(fontStyle) {\n        this.fontStyle = fontStyle;\n        return this;\n    }\n\n    render(canvasCtx) {\n        canvasCtx.beginPath();\n        super.render(canvasCtx);\n        canvasCtx.font = this.fontStyle + ' ' + this.fontSize + \" Arial\";\n        canvasCtx.textAlign = \"center\";\n        let c = this.getPosition();\n        canvasCtx.fillText(this.txt, c[0], c[1]);\n        canvasCtx.closePath();\n    }\n}\n\nexport class Circle extends Shape {\n\n    setRadius(radius) {\n        this.r = radius;\n        return this;\n    }\n\n    getExternalPoint(angle, gap) {\n        let c = this.getPosition();\n        return [c[0] + (this.r + gap) * Math.cos(angle), c[1] + (this.r + gap) * Math.sin(angle)]\n    }\n\n    render(canvasCtx) {\n        canvasCtx.beginPath();\n        let c = this.getPosition();\n        canvasCtx.arc(c[0], c[1], this.r, 0, _2pi);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n}\n\nexport class Line extends Shape {\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n    }\n\n    /**\n     * @param shape1 shape 1\n     * @param shape2 shape 2\n     * @param gap the gap between line and target shapes. gap>=0\n     */\n    between(shape1, shape2, gap = 0) {\n        let c1 = shape1.getCenterPoint();\n        let c2 = shape2.getCenterPoint();\n        c1 = shape1.getExternalPoint(getAngle(c1[0], c1[1], c2[0], c2[1]), gap);\n        c2 = shape2.getExternalPoint(getAngle(c2[0], c2[1], c1[0], c1[1]), gap);\n        this.setPosition(c1);\n        this.lineTo(c2);\n        return this;\n    }\n\n    /**\n     * @param point [x,y] or [intR, length] for radian or [intD, length] for degree\n     */\n    lineTo(point) {\n        if (typeof point[0] === 'string') {\n            let i = point[0].length - 1;\n            let c = point[0][i];\n            let v = Number(point[0].substring(0, i));\n            if (c === 'R' || c === 'r') {\n                this.secondP = this.getTargetPoint(v, point[1]);\n            } else if (c === 'D' || c === 'd') {\n                this.secondP = this.getTargetPoint(deg2Rad(v), point[1]);\n            } else {\n                throw new Error('wrong input');\n            }\n        } else {\n            this.secondP = point;\n        }\n    }\n\n    getTargetPoint(r, d) {\n        let p = this.getPosition();\n        return [p[0] + Math.cos(r) * d, p[1] + Math.sin(r) * d];\n    }\n\n    getCenterPoint() {\n        let p = this.getPosition();\n        return [(p[0] + this.secondP[0]) / 2, (p[1] + this.secondP[1]) / 2]\n    }\n\n    /**\n     * show arrows on the line\n     * @param direction 0 or 1\n     * @param places array of float values, each is 0 - 1;\n     * @return Shape\n     */\n    showArrow(direction, places) {\n        this.direction = direction;\n        this.places = places;\n        return this;\n    }\n\n    drawArrow(canvasCtx, length, angle, x, y) {\n        canvasCtx.beginPath();\n        let p1 = [x + length * Math.cos(angle - _pi6), y + length * Math.sin(angle - _pi6)];\n        let p2 = [x + length * Math.cos(angle + _pi6), y + length * Math.sin(angle + _pi6)];\n        canvasCtx.moveTo(x, y);\n        canvasCtx.lineTo(p1[0], p1[1]);\n        canvasCtx.lineTo(p2[0], p2[1]);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n\n    render(canvasCtx) {\n        let p1 = this.getPosition();\n        canvasCtx.beginPath();\n        canvasCtx.moveTo(p1[0], p1[1]);\n        canvasCtx.lineTo(this.secondP[0], this.secondP[1]);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n        if (this.direction !== undefined && this.places !== undefined) {\n            if (!this.places[0])\n                this.places = [this.places];\n            let angle = this.direction ? getAngle(this.secondP[0], this.secondP[1], p1[0], p1[1]) : getAngle(p1[0], p1[1], this.secondP[0], this.secondP[1]);\n            for (let i = 0; i < this.places.length; i++) {\n                let x = p1[0] + (this.secondP[0] - p1[0]) * this.places[i];\n                let y = p1[1] + (this.secondP[1] - p1[1]) * this.places[i];\n                this.drawArrow(canvasCtx, 10, angle, x, y);\n            }\n        }\n    }\n}\n\nexport class Rectangle extends Shape {\n\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n\n    getCenterPoint() {\n        let p = this.getPosition();\n        return [p[0] + this.width / 2, p[1] + this.height / 2]\n    }\n\n    getExternalPoint(angle, gap) {\n        let c = this.getCenterPoint();\n        let p = this.getPosition();\n        let rbc = getAngle(c[0], c[1], p[0] + this.width, p[1] + this.height);//right-bottom corner\n        let lbc = Math.PI - rbc;//left-bottom corner\n        let ltc = Math.PI + rbc;//left-top corner\n        let rtc = _2pi - rbc;//right-top corner\n\n        angle = normalizeRadian(angle);//get angle between 0 - ~629\n\n        if (angle >= rbc && angle < lbc) {//cross bottom edge\n            return this.getTBTarget(c, angle, gap, 1);\n        } else if (angle >= lbc && angle < ltc) {//cross left edge\n            return this.getLRTarget(c, angle, gap, -1);\n        } else if (angle >= ltc && angle < rtc) {//cross top edge\n            return this.getTBTarget(c, angle, gap, -1);\n        } else {//cross right edge\n            return this.getLRTarget(c, angle, gap, 1);\n        }\n    }\n\n    getTBTarget(c, angle, gap, sign) {\n        let l = (this.height / 2) / Math.sin(angle);\n        l += sign * gap;\n        return [c[0] + sign * l * Math.cos(angle), c[1] + sign * l * Math.sin(angle)];\n    }\n\n    getLRTarget(c, angle, gap, sign) {\n        let l = (this.width / 2) / Math.cos(angle)\n        l += sign * gap;\n        return [c[0] + sign * l * Math.cos(angle), c[1] + sign * l * Math.sin(angle)];\n    }\n\n    render(canvasCtx) {\n        canvasCtx.beginPath();\n        let p = this.getPosition();\n        canvasCtx.rect(p[0], p[1], this.width, this.height);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n}\n\nexport class DrawBox {\n    lst = [];\n\n    addShape(shape) {\n        this.lst.push(shape);\n        return this;\n    }\n\n    render(canvas) {\n        let ctx = canvas.getContext('2d');\n        this.lst.forEach(v => v.render(ctx));\n    }\n}"]},"metadata":{},"sourceType":"module"}