{"ast":null,"code":"import { Utils } from \"../../../tools/utils\";\nimport { Shape } from \"./shape\";\nexport class Circle extends Shape {\n  setRadius(radius) {\n    this.r = radius;\n    return this;\n  }\n\n  getExternalPoint(angle, gap) {\n    let c = this.getPosition();\n    return [c[0] + (this.r + gap) * Math.cos(angle), c[1] + (this.r + gap) * Math.sin(angle)];\n  }\n\n  render(canvasCtx) {\n    canvasCtx.beginPath();\n    let c = this.getPosition();\n    canvasCtx.arc(c[0], c[1], this.r, 0, Utils._2PI);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/circle.js"],"names":["Utils","Shape","Circle","setRadius","radius","r","getExternalPoint","angle","gap","c","getPosition","Math","cos","sin","render","canvasCtx","beginPath","arc","_2PI","closePath"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,sBAApB;AACA,SAAQC,KAAR,QAAoB,SAApB;AAEA,OAAO,MAAMC,MAAN,SAAqBD,KAArB,CAA2B;AAC9BE,EAAAA,SAAS,CAACC,MAAD,EAAS;AACd,SAAKC,CAAL,GAASD,MAAT;AACA,WAAO,IAAP;AACH;;AAEDE,EAAAA,gBAAgB,CAACC,KAAD,EAAQC,GAAR,EAAa;AACzB,QAAIC,CAAC,GAAG,KAAKC,WAAL,EAAR;AACA,WAAO,CAACD,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,KAAKJ,CAAL,GAASG,GAAV,IAAiBG,IAAI,CAACC,GAAL,CAASL,KAAT,CAAzB,EAA0CE,CAAC,CAAC,CAAD,CAAD,GAAO,CAAC,KAAKJ,CAAL,GAASG,GAAV,IAAiBG,IAAI,CAACE,GAAL,CAASN,KAAT,CAAlE,CAAP;AACH;;AAEDO,EAAAA,MAAM,CAACC,SAAD,EAAY;AACdA,IAAAA,SAAS,CAACC,SAAV;AACA,QAAIP,CAAC,GAAG,KAAKC,WAAL,EAAR;AACAK,IAAAA,SAAS,CAACE,GAAV,CAAcR,CAAC,CAAC,CAAD,CAAf,EAAoBA,CAAC,CAAC,CAAD,CAArB,EAA0B,KAAKJ,CAA/B,EAAkC,CAAlC,EAAqCL,KAAK,CAACkB,IAA3C;AACAH,IAAAA,SAAS,CAACI,SAAV;AACA,UAAML,MAAN,CAAaC,SAAb;AACH;;AAjB6B","sourcesContent":["import {Utils} from \"../../../tools/utils\";\nimport {Shape} from \"./shape\";\n\nexport class Circle extends Shape {\n    setRadius(radius) {\n        this.r = radius;\n        return this;\n    }\n\n    getExternalPoint(angle, gap) {\n        let c = this.getPosition();\n        return [c[0] + (this.r + gap) * Math.cos(angle), c[1] + (this.r + gap) * Math.sin(angle)]\n    }\n\n    render(canvasCtx) {\n        canvasCtx.beginPath();\n        let c = this.getPosition();\n        canvasCtx.arc(c[0], c[1], this.r, 0, Utils._2PI);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n}"]},"metadata":{},"sourceType":"module"}