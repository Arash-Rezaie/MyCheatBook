{"ast":null,"code":"import { Circle } from \"../simple/circle\";\nimport { Text } from \"../simple/shape\";\nimport { Caption } from \"./caption\";\nimport { ExtendedVector } from \"./extended-line\";\nexport class Node extends Circle {\n  constructor(handler) {\n    super();\n    this.handler = handler;\n    this.setRadius(20).setStrokeWidth(3).setStrokeColor('black').setFillColor('yellow');\n  }\n\n  getLabel() {\n    let lbl = super.getLabel();\n\n    if (typeof lbl === 'string') {\n      lbl = new Text().setLabel(lbl).setFontSize('20px').setOffset([0, 6]);\n    } else {\n      lbl = this.handler.generateShape(lbl);\n    }\n\n    return lbl.alignTo(this);\n  }\n\n  connectTo(refId) {\n    this.handler.addDirectShape(new ExtendedVector(this.handler).between(this, this.handler.getTargetShape(refId), 5));\n    return this;\n  }\n\n  setCaptions(caps) {\n    if (caps[0] === undefined) caps = [caps];\n    caps.forEach((v, i) => {\n      this.handler.addDirectShape(new Caption(this.handler).alignTo(this).setOffset(v.offset ? v.offset : [28, caps.length * -11.5 + i * 25]).setWidth(v.w).setHeight(20).setLabel(v.t).setColor(v.c).setStrokeWidth(2));\n    });\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/wrappered/node.js"],"names":["Circle","Text","Caption","ExtendedVector","Node","constructor","handler","setRadius","setStrokeWidth","setStrokeColor","setFillColor","getLabel","lbl","setLabel","setFontSize","setOffset","generateShape","alignTo","connectTo","refId","addDirectShape","between","getTargetShape","setCaptions","caps","undefined","forEach","v","i","offset","length","setWidth","w","setHeight","t","setColor","c"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,kBAArB;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,cAAR,QAA6B,iBAA7B;AAEA,OAAO,MAAMC,IAAN,SAAmBJ,MAAnB,CAA0B;AAC7BK,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,CAAe,EAAf,EACKC,cADL,CACoB,CADpB,EAEKC,cAFL,CAEoB,OAFpB,EAGKC,YAHL,CAGkB,QAHlB;AAIH;;AAEDC,EAAAA,QAAQ,GAAG;AACP,QAAIC,GAAG,GAAG,MAAMD,QAAN,EAAV;;AACA,QAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AACzBA,MAAAA,GAAG,GAAG,IAAIX,IAAJ,GACDY,QADC,CACQD,GADR,EAEDE,WAFC,CAEW,MAFX,EAGDC,SAHC,CAGS,CAAC,CAAD,EAAI,CAAJ,CAHT,CAAN;AAIH,KALD,MAKO;AACHH,MAAAA,GAAG,GAAG,KAAKN,OAAL,CAAaU,aAAb,CAA2BJ,GAA3B,CAAN;AACH;;AACD,WAAOA,GAAG,CAACK,OAAJ,CAAY,IAAZ,CAAP;AACH;;AAEDC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,SAAKb,OAAL,CAAac,cAAb,CAA4B,IAAIjB,cAAJ,CAAmB,KAAKG,OAAxB,EACvBe,OADuB,CACf,IADe,EACT,KAAKf,OAAL,CAAagB,cAAb,CAA4BH,KAA5B,CADS,EAC2B,CAD3B,CAA5B;AAEA,WAAO,IAAP;AACH;;AAEDI,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,QAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYC,SAAhB,EACID,IAAI,GAAG,CAACA,IAAD,CAAP;AACJA,IAAAA,IAAI,CAACE,OAAL,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACnB,WAAKtB,OAAL,CAAac,cAAb,CACI,IAAIlB,OAAJ,CAAY,KAAKI,OAAjB,EACKW,OADL,CACa,IADb,EAEKF,SAFL,CAEeY,CAAC,CAACE,MAAF,GAAWF,CAAC,CAACE,MAAb,GAAsB,CAAC,EAAD,EAAML,IAAI,CAACM,MAAL,GAAc,CAAC,IAAf,GAAuBF,CAAC,GAAG,EAAjC,CAFrC,EAGKG,QAHL,CAGcJ,CAAC,CAACK,CAHhB,EAIKC,SAJL,CAIe,EAJf,EAKKpB,QALL,CAKcc,CAAC,CAACO,CALhB,EAMKC,QANL,CAMcR,CAAC,CAACS,CANhB,EAOK5B,cAPL,CAOoB,CAPpB,CADJ;AAUH,KAXD;AAYA,WAAO,IAAP;AACH;;AA7C4B","sourcesContent":["import {Circle} from \"../simple/circle\";\nimport {Text} from \"../simple/shape\";\nimport {Caption} from \"./caption\";\nimport {ExtendedVector} from \"./extended-line\";\n\nexport class Node extends Circle {\n    constructor(handler) {\n        super();\n        this.handler = handler;\n        this.setRadius(20)\n            .setStrokeWidth(3)\n            .setStrokeColor('black')\n            .setFillColor('yellow');\n    }\n\n    getLabel() {\n        let lbl = super.getLabel();\n        if (typeof lbl === 'string') {\n            lbl = new Text()\n                .setLabel(lbl)\n                .setFontSize('20px')\n                .setOffset([0, 6]);\n        } else {\n            lbl = this.handler.generateShape(lbl);\n        }\n        return lbl.alignTo(this);\n    }\n\n    connectTo(refId) {\n        this.handler.addDirectShape(new ExtendedVector(this.handler)\n            .between(this, this.handler.getTargetShape(refId), 5));\n        return this;\n    }\n\n    setCaptions(caps) {\n        if (caps[0] === undefined)\n            caps = [caps];\n        caps.forEach((v, i) => {\n            this.handler.addDirectShape(\n                new Caption(this.handler)\n                    .alignTo(this)\n                    .setOffset(v.offset ? v.offset : [28, (caps.length * -11.5 + (i * 25))])\n                    .setWidth(v.w)\n                    .setHeight(20)\n                    .setLabel(v.t)\n                    .setColor(v.c)\n                    .setStrokeWidth(2)\n            )\n        });\n        return this;\n    }\n}"]},"metadata":{},"sourceType":"module"}