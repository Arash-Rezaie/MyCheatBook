{"ast":null,"code":"import { DrawBox } from \"../components/drawbox/draw-box\";\nexport class Utils {\n  //30deg\n  //360deg\n  static getAngle(x1, y1, x2, y2) {\n    let dx = x2 - x1;\n    let dy = y2 - y1;\n    return Math.atan2(dy, dx);\n  }\n\n  static getAngleByPoint(p1, p2) {\n    let a = Utils.getAngle(p1[0], p1[1], p2[0], p2[1]);\n    console.log(Utils.rad2Deg(a));\n    return Utils.getAngle(p1[0], p1[1], p2[0], p2[1]);\n  }\n\n  static normalizeDegree(deg) {\n    if (deg > 360) deg %= 360;else if (deg < 0) deg = deg % 360 + 360;\n    return deg;\n  }\n\n  static normalizeRadian(rad) {\n    if (rad > Utils._2PI) rad %= Utils._2PI;else if (rad < 0) rad = rad % Utils._2PI + Utils._2PI;\n    return rad;\n  }\n\n  static rad2Deg(rad) {\n    return 180 * rad / Math.PI;\n  }\n\n  static deg2Rad(deg) {\n    return Math.PI * deg / 180;\n  }\n\n  static reverseRad(rad) {\n    return rad - Math.PI;\n  }\n\n  static reverseDeg(deg) {\n    return deg - 180;\n  }\n\n  static getPointByAngle(basePoint, angle, length) {\n    return [basePoint[0] + length * Math.cos(angle), basePoint[1] + length * Math.sin(angle)];\n  }\n\n  static getLengthByPoints(p1, p2) {\n    return Math.sqrt(Math.pow(Math.abs(p1[0] - p2[0]), 2) + Math.pow(Math.abs(p1[1] - p2[1]), 2));\n  }\n\n}\nUtils.db = new DrawBox();\nUtils._PI6 = Math.PI / 6;\nUtils._2PI = 2 * Math.PI;","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/tools/utils.js"],"names":["DrawBox","Utils","getAngle","x1","y1","x2","y2","dx","dy","Math","atan2","getAngleByPoint","p1","p2","a","console","log","rad2Deg","normalizeDegree","deg","normalizeRadian","rad","_2PI","PI","deg2Rad","reverseRad","reverseDeg","getPointByAngle","basePoint","angle","length","cos","sin","getLengthByPoints","sqrt","pow","abs","db","_PI6"],"mappings":"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","sourcesContent":["import {DrawBox} from \"../components/drawbox/draw-box\";\n\nexport class Utils {\n    static db = new DrawBox();\n    static _PI6 = Math.PI / 6;   //30deg\n    static _2PI = 2 * Math.PI;   //360deg\n\n    static getAngle(x1, y1, x2, y2) {\n        let dx = x2 - x1;\n        let dy = y2 - y1;\n        return Math.atan2(dy, dx);\n    }\n\n    static getAngleByPoint(p1, p2) {\n        let a = Utils.getAngle(p1[0], p1[1], p2[0], p2[1]);\n        console.log(Utils.rad2Deg(a));\n        return Utils.getAngle(p1[0], p1[1], p2[0], p2[1]);\n    }\n\n    static normalizeDegree(deg) {\n        if (deg > 360)\n            deg %= 360;\n        else if (deg < 0)\n            deg = deg % 360 + 360;\n        return deg;\n    }\n\n    static normalizeRadian(rad) {\n        if (rad > Utils._2PI)\n            rad %= Utils._2PI;\n        else if (rad < 0)\n            rad = rad % Utils._2PI + Utils._2PI;\n        return rad;\n    }\n\n    static rad2Deg(rad) {\n        return 180 * rad / Math.PI;\n    }\n\n    static deg2Rad(deg) {\n        return Math.PI * deg / 180;\n    }\n\n    static reverseRad(rad) {\n        return rad - Math.PI;\n    }\n\n    static reverseDeg(deg) {\n        return deg - 180;\n    }\n\n    static getPointByAngle(basePoint, angle, length) {\n        return [basePoint[0] + length * Math.cos(angle), basePoint[1] + length * Math.sin(angle)];\n    }\n\n    static getLengthByPoints(p1, p2) {\n        return Math.sqrt(Math.pow(Math.abs(p1[0] - p2[0]), 2) + Math.pow(Math.abs(p1[1] - p2[1]), 2));\n    }\n}"]},"metadata":{},"sourceType":"module"}