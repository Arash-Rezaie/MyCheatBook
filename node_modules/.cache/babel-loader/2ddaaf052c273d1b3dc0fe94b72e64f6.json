{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import React from\"react\";import{Frame}from\"../../components/blocks\";import{Bold,Bullet}from\"../../components/components\";export function RegexCheats(){return/*#__PURE__*/_jsxs(_Fragment,{children:[getBasics(),getQualifiers(),getJavaMethods()]});}function getBasics(){return/*#__PURE__*/_jsxs(Frame,{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'#fcc520',fontWeight:'bold',fontSize:'20px',margingBottom:'10px'},children:\"Character classes\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Bullet,{title:'[abc]',children:[\"matches \",/*#__PURE__*/_jsx(Bold,{children:\"a\"}),\" or \",/*#__PURE__*/_jsx(Bold,{children:\"b\"}),\" or \",/*#__PURE__*/_jsx(Bold,{children:\"c\"}),\".\"]}),/*#__PURE__*/_jsxs(Bullet,{title:'[^abc]',children:[\"negation, matches every thing except \",/*#__PURE__*/_jsx(Bold,{children:\"a\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"b\"}),\" or \",/*#__PURE__*/_jsx(Bold,{children:\"c\"}),\".\"]}),/*#__PURE__*/_jsxs(Bullet,{title:'[a-c]',children:[\"range, matches \",/*#__PURE__*/_jsx(Bold,{children:\"a\"}),\" or \",/*#__PURE__*/_jsx(Bold,{children:\"b\"}),\", or \",/*#__PURE__*/_jsx(Bold,{children:\"c\"}),\".\"]}),/*#__PURE__*/_jsxs(Bullet,{title:'[a-c[f-h]]',children:[\"union, matches \",/*#__PURE__*/_jsx(Bold,{children:\"a\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"b\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"c\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"f\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"g\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"h\"}),\".\"]}),/*#__PURE__*/_jsxs(Bullet,{title:'[a-c&&[b-c]]',children:[\"intersection, matches \",/*#__PURE__*/_jsx(Bold,{children:\"b\"}),\" or \",/*#__PURE__*/_jsx(Bold,{children:\"c\"}),\".\"]}),/*#__PURE__*/_jsxs(Bullet,{title:'[a-c&&[^b-c]]',children:[\"subtraction, matches \",/*#__PURE__*/_jsx(Bold,{children:\"a\"}),\".\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{style:{color:'#dea726',fontWeight:'bold',fontSize:'20px',margingBottom:'10px'},children:\"Predefined character classes\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bullet,{title:'.',children:\"Any character.\"}),/*#__PURE__*/_jsxs(Bullet,{title:'\\\\d',children:[\"A digit: \",/*#__PURE__*/_jsx(Bold,{children:\"[0-9]\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'\\\\D',children:[\"A non-digit: \",/*#__PURE__*/_jsx(Bold,{children:\"[^0-9]\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'\\\\s',children:[\"A whitespace character: \",/*#__PURE__*/_jsx(Bold,{children:\"[ \\\\t\\\\n\\\\x0B\\\\f\\\\r]\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'\\\\S',children:[\"A non-whitespace character: \",/*#__PURE__*/_jsx(Bold,{children:\"[^\\\\s]\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'\\\\w',children:[\"A word character: \",/*#__PURE__*/_jsx(Bold,{children:\"[a-zA-Z_0-9]\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'\\\\W',children:[\"A non-word character: \",/*#__PURE__*/_jsx(Bold,{children:\"[^\\\\w]\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{style:{color:'#a76e1e',fontWeight:'bold',fontSize:'20px',margingBottom:'10px'},children:\"Boundary matches\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bullet,{title:'^',children:\"The beginning of a line.\"}),/*#__PURE__*/_jsx(Bullet,{title:'$',children:\"The end of a line.\"}),/*#__PURE__*/_jsx(Bullet,{title:'\\\\b',children:\"A word boundary.\"}),/*#__PURE__*/_jsx(Bullet,{title:'\\\\B',children:\"A non-word boundary.\"}),/*#__PURE__*/_jsx(Bullet,{title:'\\\\A',children:\"The beginning of the input.\"}),/*#__PURE__*/_jsx(Bullet,{title:'\\\\G',children:\"The end of the previous match.\"}),/*#__PURE__*/_jsx(Bullet,{title:'\\\\Z',children:\"The end of the input but for the final terminator, if any.\"}),/*#__PURE__*/_jsx(Bullet,{title:'\\\\z',children:\"The end of the input.\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{style:{color:'#e14c20',fontWeight:'bold',fontSize:'20px',margingBottom:'10px'},children:\"Look around\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Bullet,{title:'(?=x)',children:[\" Lookahead - Asserts that what immediately follows the current position in the string is \",/*#__PURE__*/_jsx(Bold,{children:\"x\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'(?<=x)',children:[\" Lookbehind - Asserts that what immediately precedes the current position in the string is \",/*#__PURE__*/_jsx(Bold,{children:\"x\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'(?!x)',children:[\" Negative Lookahead - Asserts that what immediately follows the current position in the string is not \",/*#__PURE__*/_jsx(Bold,{children:\"x\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'(?<!x)',children:[\" Negative Lookbehind - Asserts that what immediately precedes the current position in the string is not \",/*#__PURE__*/_jsx(Bold,{children:\"x\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{style:{color:'#f16738',fontWeight:'bold',fontSize:'20px',margingBottom:'10px'},children:\"Pattern flags\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"Pattern.CASE_INSENSITIVE\"}),\" - enables case-insensitive matching.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"Pattern.COMMENTS\"}),\" - whitespace and comments starting with \",/*#__PURE__*/_jsx(Bold,{children:\"#\"}),\" are ignored until the end of a line.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"Pattern.MULTILINE\"}),\" - one expression can match multiple lines.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"Pattern.UNIX_LINES\"}),\" - only the '\",/*#__PURE__*/_jsx(Bold,{children:\"\\\\n\"}),\"' line terminator is recognized in the behavior of \",/*#__PURE__*/_jsx(Bold,{children:\".\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"^\"}),\" and \",/*#__PURE__*/_jsx(Bold,{children:\"$\"})]});}function getJavaMethods(){return/*#__PURE__*/_jsxs(Frame,{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'#8fc647',fontWeight:'bold',fontSize:'20px',margingBottom:'10px'},children:\"Useful java classes & methods\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{style:{color:'#79a546',// fontWeight: 'bold',\nfontSize:'20px',margingBottom:'10px'},children:\"Pattern\"}),/*#__PURE__*/_jsx(\"br\",{}),\"A pattern is a compiler representation of a regular expression.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"Pattern compile (String regex)\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Compiles the given regular expression into a pattern.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"Pattern compile (String regex, int flags)\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Compiles the given regular expression into a pattern with the given flags.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"boolean matches(String regex)\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Tell whether or not this string matches the given regular expression.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"String[] split(CharacterSequence input)\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Splits the given input sequence aroung matches of this pattern.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"String quote(String s)\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Returns a literal pattern String of the specified String.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Bold,{children:[\"Predicate\",'<String>',\" asPredicate()\"]}),/*#__PURE__*/_jsx(\"br\",{}),\"Creates a predicate which can used to match a string.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{style:{color:'#44751c',// fontWeight: 'bold',\nfontSize:'20px',margingBottom:'10px'},children:\"Matcher\"}),/*#__PURE__*/_jsx(\"br\",{}),\"An engine that performs match operations on a character sequence by interpreting a Pattern.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"boolean matches()\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Attempts to match the entire region against the pattern.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"boolean find()\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Attempts to find the next subsequence of the input sequence that matches the pattern.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"int start()\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Returns the start index of the previous match.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"int end()\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Returns the offset after the last character matched.\"]});}function getQualifiers(){return/*#__PURE__*/_jsxs(Frame,{children:[/*#__PURE__*/_jsx(\"span\",{style:{color:'#71b1cc',fontWeight:'bold',fontSize:'20px'},children:\"Qualifiers\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"table\",{className:'customTbl1',children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Greedy\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Reluctant\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Possessive\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Description\"})]})}),/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"X?\"}),/*#__PURE__*/_jsx(\"td\",{children:\"X??\"}),/*#__PURE__*/_jsx(\"td\",{children:\"X?+\"}),/*#__PURE__*/_jsx(\"td\",{children:\"X, once or not at all\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"X*\"}),/*#__PURE__*/_jsx(\"td\",{children:\"X*?\"}),/*#__PURE__*/_jsx(\"td\",{children:\"X*+\"}),/*#__PURE__*/_jsx(\"td\",{children:\"X, zero or more times.\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"X+\"}),/*#__PURE__*/_jsx(\"td\",{children:\"X+?\"}),/*#__PURE__*/_jsx(\"td\",{children:\"X++\"}),/*#__PURE__*/_jsx(\"td\",{children:\"X, one or more times\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{children:[\"X\",'{n}']}),/*#__PURE__*/_jsxs(\"td\",{children:[\"X\",'{n}',\"?\"]}),/*#__PURE__*/_jsxs(\"td\",{children:[\"X\",'{n}',\"+\"]}),/*#__PURE__*/_jsx(\"td\",{children:\"X, exactly n times.\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{children:[\"X\",'{n,}']}),/*#__PURE__*/_jsxs(\"td\",{children:[\"X\",'{n,}',\"?\"]}),/*#__PURE__*/_jsxs(\"td\",{children:[\"X\",'{n,}',\"+\"]}),/*#__PURE__*/_jsx(\"td\",{children:\"X, at least n times.\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{children:[\"X\",'{n,m}']}),/*#__PURE__*/_jsxs(\"td\",{children:[\"X\",'{n,m}',\"?\"]}),/*#__PURE__*/_jsxs(\"td\",{children:[\"X\",'{n,m}',\"+\"]}),/*#__PURE__*/_jsx(\"td\",{children:\"X, at least n but not more than m times.\"})]})]})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"Greedy - \"}),\"matches the longest matching group.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"Reluctant - \"}),\"matches the shortest group.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bold,{children:\"Possessive - \"}),\"longest match or bust (no backoff).\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{style:{color:'#5f99af',fontWeight:'bold',fontSize:'20px'},children:\"Groups & backreference\"}),/*#__PURE__*/_jsx(\"br\",{}),\"A group is a captured subsequence of characters which may be used later in the expression with a backreference.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bullet,{title:'(...)',children:\"defines a group.\"}),/*#__PURE__*/_jsx(Bullet,{title:'\\\\N',children:\"refers to a matched group.\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bullet,{title:'(\\\\d\\\\d)',children:\"a group of two digits.\"}),/*#__PURE__*/_jsx(Bullet,{title:'(\\\\d\\\\d)/\\\\1',children:\"two digits repeated twice.\"}),/*#__PURE__*/_jsx(Bullet,{title:'\\\\1',children:\"refers to the matched group.\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{style:{color:'#4b7792',fontWeight:'bold',fontSize:'20px'},children:\"Logical operations\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Bullet,{title:'XY',children:[/*#__PURE__*/_jsx(Bold,{children:\"X\"}),\" then \",/*#__PURE__*/_jsx(Bold,{children:\"Y\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'X|Y',children:[/*#__PURE__*/_jsx(Bold,{children:\"X\"}),\" or \",/*#__PURE__*/_jsx(Bold,{children:\"Y\"})]})]});}","map":{"version":3,"sources":["/media/arash/usb_stick/my-cheat-book/src/contents/regex/regex-cheats.js"],"names":["React","Frame","Bold","Bullet","RegexCheats","getBasics","getQualifiers","getJavaMethods","color","fontWeight","fontSize","margingBottom"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Frame} from \"../../components/blocks\";\nimport {Bold, Bullet} from \"../../components/components\";\n\nexport function RegexCheats() {\n    return (\n        <>\n            {getBasics()}\n            {getQualifiers()}\n            {getJavaMethods()}\n\n        </>\n    )\n}\n\nfunction getBasics() {\n    return (\n        <Frame>\n            <span style={{\n                color: '#fcc520',\n                fontWeight: 'bold',\n                fontSize: '20px',\n                margingBottom: '10px'\n            }}>Character classes</span><br/>\n            <Bullet title={'[abc]'}>matches <Bold>a</Bold> or <Bold>b</Bold> or <Bold>c</Bold>.</Bullet>\n            <Bullet title={'[^abc]'}>negation, matches every thing\n                except <Bold>a</Bold>, <Bold>b</Bold> or <Bold>c</Bold>.</Bullet>\n            <Bullet title={'[a-c]'}>range, matches <Bold>a</Bold> or <Bold>b</Bold>, or <Bold>c</Bold>.</Bullet>\n            <Bullet title={'[a-c[f-h]]'}>union,\n                matches <Bold>a</Bold>, <Bold>b</Bold>, <Bold>c</Bold>, <Bold>f</Bold>, <Bold>g</Bold>, <Bold>h</Bold>.</Bullet>\n            <Bullet title={'[a-c&&[b-c]]'}>intersection, matches <Bold>b</Bold> or <Bold>c</Bold>.</Bullet>\n            <Bullet title={'[a-c&&[^b-c]]'}>subtraction, matches <Bold>a</Bold>.</Bullet>\n            <br/><br/>\n            <span style={{\n                color: '#dea726',\n                fontWeight: 'bold',\n                fontSize: '20px',\n                margingBottom: '10px'\n            }}>Predefined character classes</span><br/>\n            <Bullet title={'.'}>Any character.</Bullet>\n            <Bullet title={'\\\\d'}>A digit: <Bold>[0-9]</Bold></Bullet>\n            <Bullet title={'\\\\D'}>A non-digit: <Bold>[^0-9]</Bold></Bullet>\n            <Bullet title={'\\\\s'}>A whitespace character: <Bold>[ \\t\\n\\x0B\\f\\r]</Bold></Bullet>\n            <Bullet title={'\\\\S'}>A non-whitespace character: <Bold>[^\\s]</Bold></Bullet>\n            <Bullet title={'\\\\w'}>A word character: <Bold>[a-zA-Z_0-9]</Bold></Bullet>\n            <Bullet title={'\\\\W'}>A non-word character: <Bold>[^\\w]</Bold></Bullet>\n            <br/><br/>\n            <span style={{\n                color: '#a76e1e',\n                fontWeight: 'bold',\n                fontSize: '20px',\n                margingBottom: '10px'\n            }}>Boundary matches</span><br/>\n            <Bullet title={'^'}>The beginning of a line.</Bullet>\n            <Bullet title={'$'}>The end of a line.</Bullet>\n            <Bullet title={'\\\\b'}>A word boundary.</Bullet>\n            <Bullet title={'\\\\B'}>A non-word boundary.</Bullet>\n            <Bullet title={'\\\\A'}>The beginning of the input.</Bullet>\n            <Bullet title={'\\\\G'}>The end of the previous match.</Bullet>\n            <Bullet title={'\\\\Z'}>The end of the input but for the final terminator, if any.</Bullet>\n            <Bullet title={'\\\\z'}>The end of the input.</Bullet>\n            <br/><br/>\n            <span style={{\n                color: '#e14c20',\n                fontWeight: 'bold',\n                fontSize: '20px',\n                margingBottom: '10px'\n            }}>Look around</span><br/>\n            <Bullet\n                title={'(?=x)'}> Lookahead - Asserts that what immediately follows the current position in the string\n                is <Bold>x</Bold></Bullet>\n            <Bullet title={'(?<=x)'}> Lookbehind - Asserts that what immediately precedes the current position in the\n                string is <Bold>x</Bold></Bullet>\n            <Bullet title={'(?!x)'}> Negative Lookahead - Asserts that what immediately follows the current position\n                in the string is not <Bold>x</Bold></Bullet>\n            <Bullet title={'(?<!x)'}> Negative Lookbehind - Asserts that what immediately precedes the current\n                position in the string is not <Bold>x</Bold></Bullet>\n            <br/><br/>\n            <span style={{\n                color: '#f16738',\n                fontWeight: 'bold',\n                fontSize: '20px',\n                margingBottom: '10px'\n            }}>Pattern flags</span><br/>\n            <Bold>Pattern.CASE_INSENSITIVE</Bold> - enables case-insensitive matching.<br/>\n            <Bold>Pattern.COMMENTS</Bold> - whitespace and comments starting with <Bold>#</Bold> are ignored until the\n            end of a line.<br/>\n            <Bold>Pattern.MULTILINE</Bold> - one expression can match multiple lines.<br/>\n            <Bold>Pattern.UNIX_LINES</Bold> - only the '<Bold>\\n</Bold>' line terminator is recognized in the behavior\n            of <Bold>.</Bold>, <Bold>^</Bold> and <Bold>$</Bold>\n        </Frame>\n    )\n}\n\nfunction getJavaMethods() {\n    return (\n        <Frame>\n                                <span style={{\n                                    color: '#8fc647',\n                                    fontWeight: 'bold',\n                                    fontSize: '20px',\n                                    margingBottom: '10px'\n                                }}>Useful java classes & methods</span>\n            <br/><br/>\n            <span style={{\n                color: '#79a546',\n                // fontWeight: 'bold',\n                fontSize: '20px',\n                margingBottom: '10px'\n            }}>Pattern</span>\n            <br/>\n            A pattern is a compiler representation of a regular expression.\n            <br/><br/>\n            <Bold>Pattern compile (String regex)</Bold><br/>\n            Compiles the given regular expression into a pattern.\n            <br/><br/>\n            <Bold>Pattern compile (String regex, int flags)</Bold><br/>\n            Compiles the given regular expression into a pattern with the given flags.\n            <br/><br/>\n            <Bold>boolean matches(String regex)</Bold><br/>\n            Tell whether or not this string matches the given regular expression.\n            <br/><br/>\n            <Bold>String[] split(CharacterSequence input)</Bold><br/>\n            Splits the given input sequence aroung matches of this pattern.\n            <br/><br/>\n            <Bold>String quote(String s)</Bold><br/>\n            Returns a literal pattern String of the specified String.\n            <br/><br/>\n            <Bold>Predicate{'<String>'} asPredicate()</Bold><br/>\n            Creates a predicate which can used to match a string.\n            <br/><br/>\n            <span style={{\n                color: '#44751c',\n                // fontWeight: 'bold',\n                fontSize: '20px',\n                margingBottom: '10px'\n            }}>Matcher</span>\n            <br/>\n            An engine that performs match operations on a character sequence by interpreting a Pattern.\n            <br/><br/>\n            <Bold>boolean matches()</Bold><br/>\n            Attempts to match the entire region against the pattern.\n            <br/><br/>\n            <Bold>boolean find()</Bold><br/>\n            Attempts to find the next subsequence of the input sequence that matches the pattern.\n            <br/><br/>\n            <Bold>int start()</Bold><br/>\n            Returns the start index of the previous match.\n            <br/><br/>\n            <Bold>int end()</Bold><br/>\n            Returns the offset after the last character matched.\n        </Frame>\n    )\n}\n\nfunction getQualifiers() {\n    return (\n        <Frame>\n                                <span style={{\n                                    color: '#71b1cc',\n                                    fontWeight: 'bold',\n                                    fontSize: '20px',\n                                }}>Qualifiers</span>\n            <br/>\n            <table className={'customTbl1'}>\n                <thead>\n                <tr>\n                    <th>Greedy</th>\n                    <th>Reluctant</th>\n                    <th>Possessive</th>\n                    <th>Description</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <td>X?</td>\n                    <td>X??</td>\n                    <td>X?+</td>\n                    <td>X, once or not at all</td>\n                </tr>\n                <tr>\n                    <td>X*</td>\n                    <td>X*?</td>\n                    <td>X*+</td>\n                    <td>X, zero or more times.</td>\n                </tr>\n                <tr>\n                    <td>X+</td>\n                    <td>X+?</td>\n                    <td>X++</td>\n                    <td>X, one or more times</td>\n                </tr>\n                <tr>\n                    <td>X{'{n}'}</td>\n                    <td>X{'{n}'}?</td>\n                    <td>X{'{n}'}+</td>\n                    <td>X, exactly n times.</td>\n                </tr>\n                <tr>\n                    <td>X{'{n,}'}</td>\n                    <td>X{'{n,}'}?</td>\n                    <td>X{'{n,}'}+</td>\n                    <td>X, at least n times.</td>\n                </tr>\n                <tr>\n                    <td>X{'{n,m}'}</td>\n                    <td>X{'{n,m}'}?</td>\n                    <td>X{'{n,m}'}+</td>\n                    <td>X, at least n but not more than m times.</td>\n                </tr>\n                </tbody>\n            </table>\n            <br/>\n            <Bold>Greedy - </Bold>matches the longest matching group.<br/>\n            <Bold>Reluctant - </Bold>matches the shortest group.<br/>\n            <Bold>Possessive - </Bold>longest match or bust (no backoff).\n            <br/><br/><br/>\n            <span style={{\n                color: '#5f99af',\n                fontWeight: 'bold',\n                fontSize: '20px',\n            }}>Groups & backreference</span>\n            <br/>\n            A group is a captured subsequence of characters which may be used later in the expression with a\n            backreference.\n            <br/><br/>\n            <Bullet title={'(...)'}>defines a group.</Bullet>\n            <Bullet title={'\\\\N'}>refers to a matched group.</Bullet>\n            <br/>\n            <Bullet title={'(\\\\d\\\\d)'}>a group of two digits.</Bullet>\n            <Bullet title={'(\\\\d\\\\d)/\\\\1'}>two digits repeated twice.</Bullet>\n            <Bullet title={'\\\\1'}>refers to the matched group.</Bullet>\n            <br/><br/>\n            <span style={{\n                color: '#4b7792',\n                fontWeight: 'bold',\n                fontSize: '20px',\n            }}>Logical operations</span>\n            <br/>\n            <Bullet title={'XY'}><Bold>X</Bold> then <Bold>Y</Bold></Bullet>\n            <Bullet title={'X|Y'}><Bold>X</Bold> or <Bold>Y</Bold></Bullet>\n        </Frame>\n    )\n}"]},"metadata":{},"sourceType":"module"}