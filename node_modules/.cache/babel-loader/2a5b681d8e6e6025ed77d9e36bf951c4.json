{"ast":null,"code":"import { Utils } from \"../../../tools/utils\";\nimport { Shape } from \"./shape\";\n\nclass Point {\n  constructor(initValues) {\n    this.pos = initValues;\n  }\n\n  locateByPoint(point, offset = [0, 0]) {\n    this.pos[0] += offset[0];\n    this.pos[1] += offset[1];\n  }\n\n  getPosition() {\n    return this.pos;\n  }\n\n  getAnchorPointByAngle(angle) {\n    return this.pos;\n  }\n\n  getAnchorPointByPoint(point) {\n    return this.pos;\n  }\n\n  locateAnchor(...points) {}\n\n  getAnchor() {\n    return this.pos;\n  }\n\n}\n\nclass AnglePoint extends Point {\n  constructor(initValues) {\n    super();\n    let i = initValues[0].length - 1;\n    let c = initValues[0][i];\n    let v = Number(initValues[0].substring(0, i));\n\n    if (c === 'R' || c === 'r') {\n      this.angle = Utils.normalizeRadian(v);\n      this.distance = initValues[1];\n    } else if (c === 'D' || c === 'd') {\n      this.angle = Utils.normalizeRadian(Utils.deg2Rad(v));\n      this.distance = initValues[1];\n    } else {\n      throw new Error('wrong input');\n    }\n  }\n\n  locateByPoint(point, offset) {\n    let anchor = point.getAnchorPointByAngle(this.angle);\n    this.pos = Utils.getPointByAngle(anchor, this.angle, this.distance);\n  }\n\n}\n\nclass ShapePoint extends Point {\n  //item sample: [angles] => {points: [p], anchor: a}\n  constructor(initValues) {\n    super();\n    this.cache = [];\n    this.shape = initValues[0];\n    this.gap = initValues[1];\n  }\n\n  locateByPoint(point, offset) {\n    this.pos = this.shape.getCenterPoint();\n  }\n\n  getAnchorPointByAngle(angle) {\n    if (this.cache[angle] == null) this.cache[angle] = {\n      'pos': this.shape.getExternalPoint(angle, this.gap)\n    };\n    return this.cache[angle]['pos'];\n  }\n\n  getAnchorPointByPoint(point) {\n    let angle = this.cachePointAndGetAngle(point);\n    return this.cache[angle]['pos'];\n  }\n\n  cachePointAndGetAngle(point) {\n    let angle = this.searchCacheByPoint(point); //catch the angle\n\n    if (angle == null) {\n      angle = Utils.getAngleByPoint(this.shape.getCenterPoint(), point.getPosition()); //store angle-pos pair\n\n      this.getAnchorPointByAngle(angle);\n    } //store angle-point pair\n\n\n    this.cache[angle]['point'] = point;\n    return angle;\n  }\n\n  searchCacheByPoint(point) {\n    for (let k in this.cache) if (this.cache[k]['point'] === point) return k;\n  }\n\n  getAvgAngle(angles) {\n    let avg = angles[0];\n\n    for (let i = 1; i < angles.length; i++) {\n      let midAngle = (avg + angles[i]) / 2;\n      if (Math.abs(avg - angles[i]) > Math.PI) //if angle1 - angle3 > 180deg => correct mid angle\n        midAngle = Utils.reverseRad(midAngle);\n      avg = midAngle;\n    }\n\n    return avg;\n  }\n\n  locateAnchor(...points) {\n    let angles = [];\n    points.forEach(v => angles.push(this.cachePointAndGetAngle(v)));\n    if (angles.length > 1) angles = this.getAvgAngle(angles);\n    this.anchor = this.getAnchorPointByAngle(angles);\n  }\n\n  getAnchor() {\n    return this.anchor;\n  }\n\n}\n\nexport class Line extends Shape {\n  constructor() {\n    super();\n    this.processed = false;\n    this.setStrokeWidth(1);\n  }\n\n  setPosition(position) {\n    this.start = this.getPointObject(position);\n    return this;\n  }\n\n  setStart(point) {\n    return this.setPosition(point);\n  }\n\n  setEnd(point) {\n    this.end = this.getPointObject(point);\n    return this;\n  }\n\n  setQuadraticPoint(point) {\n    this.qCurve = this.getPointObject(point);\n    return this;\n  }\n  /**\n   * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   */\n\n\n  getPointObject(point) {\n    switch (this.getTypeOf(point)) {\n      case \"number,number\":\n        //[x,y]\n        return new Point(point);\n\n      case \"string,number\":\n        //[intR,length] or [intD,length]\n        return new AnglePoint(point);\n\n      case \"object,number\":\n        //[shape,gap]\n        return new ShapePoint(point);\n\n      default:\n        throw new Error('wrong input');\n    }\n  }\n\n  getTypeOf(point) {\n    return typeof point[0] + ',' + typeof point[1];\n  }\n\n  render(canvasCtx) {\n    this.preparePoints();\n    let ps = this.start.getAnchor();\n    let pe = this.end.getAnchor();\n    canvasCtx.beginPath();\n    canvasCtx.fillStyle = 'transparent';\n    canvasCtx.moveTo(ps[0], ps[1]);\n\n    if (this.qCurve) {\n      let p2 = this.qCurve.getAnchor();\n      canvasCtx.quadraticCurveTo(p2[0], p2[1], pe[0], pe[1]);\n    } else {\n      canvasCtx.lineTo(pe[0], pe[1]);\n    }\n\n    this.fillColor2 = this.fillColor;\n    this.fillColor = undefined;\n    super.render(canvasCtx);\n    this.fillColor = this.fillColor2;\n\n    if (this.direction !== undefined && this.places !== undefined) {\n      let info = this.getArrowInfo();\n      let x, y;\n\n      for (let i = 0; i < info.length; i++) {\n        x = ps[0] + (pe[0] - ps[0]) * info[i][0];\n        y = ps[1] + (pe[1] - ps[1]) * info[i][0];\n        this.drawArrow(canvasCtx, 10, info[i][1], x, y);\n      }\n    }\n  }\n\n  preparePoints() {\n    debugger;\n\n    if (!this.processed) {\n      this.start.locateByPoint(this.offset);\n      this.end.locateByPoint(this.start);\n\n      if (this.qCurve != null) {\n        this.qCurve.locateByPoint(this.start);\n        this.qCurve.locateAnchor(this.start, this.end);\n        this.end.locateAnchor(this.qCurve);\n        this.start.locateAnchor(this.qCurve);\n      } else {\n        this.end.locateAnchor(this.start);\n        this.start.locateAnchor(this.end);\n      }\n\n      this.processed = true;\n    }\n  }\n\n  getCenterPoint() {\n    this.preparePoints();\n    return [(this.start[0] + this.end[0]) / 2, (this.start[1] + this.end[1]) / 2];\n  }\n  /**\n   * show arrows on the line\n   * @param direction 0 or 1\n   * @param places array of float values, each is 0 - 1;\n   * @return Shape\n   */\n\n\n  showArrow(direction, places) {\n    this.direction = direction;\n    this.places = places;\n    return this;\n  }\n\n  drawArrow(canvasCtx, length, angle, x, y) {\n    canvasCtx.beginPath();\n    let p1 = [x - length * Math.cos(angle - Utils._PI6), y - length * Math.sin(angle - Utils._PI6)];\n    let p2 = [x - length * Math.cos(angle + Utils._PI6), y - length * Math.sin(angle + Utils._PI6)];\n    canvasCtx.moveTo(x, y);\n    canvasCtx.lineTo(p1[0], p1[1]);\n    canvasCtx.lineTo(p2[0], p2[1]);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n  getArrowInfo() {\n    let ans = [];\n    if (typeof this.places === 'number') this.places = [this.places];\n\n    if (this.qCurve != null) {\n      this.places = this.shrinkTo01(this.places);\n      this.places.forEach(v => ans.push([v, this.getArrowAngleForQCurve(v)]));\n    } else {\n      let angle = this.direction ? Utils.getAngleByPoint(this.start.getAnchor(), this.end.getAnchor()) : Utils.getAngleByPoint(this.end.getAnchor(), this.start.getAnchor());\n      this.places.forEach(v => ans.push([v, angle]));\n    }\n\n    this.length = Utils.getLengthByPoints(this.start.getAnchor(), this.end.getAnchor());\n    return ans;\n  }\n\n  getArrowAngleForQCurve(place) {\n    if (this.direction) {\n      return place <= 0.5 ? Utils.getAngleByPoint(this.start.getAnchor(), this.qCurve.getAnchor()) : Utils.getAngleByPoint(this.qCurve.getAnchor(), this.end.getAnchor());\n    } else {\n      return place <= 0.5 ? Utils.getAngleByPoint(this.qCurve.getAnchor(), this.start.getAnchor()) : Utils.getAngleByPoint(this.end.getAnchor(), this.qCurve.getAnchor());\n    }\n  }\n\n  shrinkTo01(a) {\n    let ans = [];\n    a.forEach(v => v <= 0.5 ? ans[0] = 0 : ans[1] = 1);\n    return ans[0] == null ? [1] : ans;\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/line.js"],"names":["Utils","Shape","Point","constructor","initValues","pos","locateByPoint","point","offset","getPosition","getAnchorPointByAngle","angle","getAnchorPointByPoint","locateAnchor","points","getAnchor","AnglePoint","i","length","c","v","Number","substring","normalizeRadian","distance","deg2Rad","Error","anchor","getPointByAngle","ShapePoint","cache","shape","gap","getCenterPoint","getExternalPoint","cachePointAndGetAngle","searchCacheByPoint","getAngleByPoint","k","getAvgAngle","angles","avg","midAngle","Math","abs","PI","reverseRad","forEach","push","Line","processed","setStrokeWidth","setPosition","position","start","getPointObject","setStart","setEnd","end","setQuadraticPoint","qCurve","getTypeOf","render","canvasCtx","preparePoints","ps","pe","beginPath","fillStyle","moveTo","p2","quadraticCurveTo","lineTo","fillColor2","fillColor","undefined","direction","places","info","getArrowInfo","x","y","drawArrow","showArrow","p1","cos","_PI6","sin","closePath","ans","shrinkTo01","getArrowAngleForQCurve","getLengthByPoints","place","a"],"mappings":"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","sourcesContent":["import {Utils} from \"../../../tools/utils\";\nimport {Shape} from \"./shape\";\n\nclass Point {\n    pos;\n\n    constructor(initValues) {\n        this.pos = initValues;\n    }\n\n    locateByPoint(point, offset = [0, 0]) {\n        this.pos[0] += offset[0];\n        this.pos[1] += offset[1];\n    }\n\n    getPosition() {\n        return this.pos;\n    }\n\n    getAnchorPointByAngle(angle) {\n        return this.pos;\n    }\n\n    getAnchorPointByPoint(point) {\n        return this.pos;\n    }\n\n    locateAnchor(...points) {\n    }\n\n    getAnchor() {\n        return this.pos;\n    }\n}\n\nclass AnglePoint extends Point {\n    constructor(initValues) {\n        super();\n        let i = initValues[0].length - 1;\n        let c = initValues[0][i];\n        let v = Number(initValues[0].substring(0, i));\n        if (c === 'R' || c === 'r') {\n            this.angle = Utils.normalizeRadian(v);\n            this.distance = initValues[1];\n        } else if (c === 'D' || c === 'd') {\n            this.angle = Utils.normalizeRadian(Utils.deg2Rad(v));\n            this.distance = initValues[1];\n        } else {\n            throw new Error('wrong input');\n        }\n    }\n\n    locateByPoint(point, offset) {\n        let anchor = point.getAnchorPointByAngle(this.angle);\n        this.pos = Utils.getPointByAngle(anchor, this.angle, this.distance);\n    }\n}\n\nclass ShapePoint extends Point {\n    cache = []; //item sample: [angles] => {points: [p], anchor: a}\n\n    constructor(initValues) {\n        super();\n        this.shape = initValues[0];\n        this.gap = initValues[1];\n    }\n\n    locateByPoint(point, offset) {\n        this.pos = this.shape.getCenterPoint();\n    }\n\n    getAnchorPointByAngle(angle) {\n        if (this.cache[angle] == null)\n            this.cache[angle] = {'pos': this.shape.getExternalPoint(angle, this.gap)};\n        return this.cache[angle]['pos'];\n    }\n\n    getAnchorPointByPoint(point) {\n        let angle = this.cachePointAndGetAngle(point);\n        return this.cache[angle]['pos'];\n    }\n\n    cachePointAndGetAngle(point) {\n        let angle = this.searchCacheByPoint(point);\n\n        //catch the angle\n        if (angle == null) {\n            angle = Utils.getAngleByPoint(this.shape.getCenterPoint(), point.getPosition());\n\n            //store angle-pos pair\n            this.getAnchorPointByAngle(angle);\n        }\n\n        //store angle-point pair\n        this.cache[angle]['point'] = point;\n\n        return angle;\n    }\n\n    searchCacheByPoint(point) {\n        for (let k in this.cache)\n            if (this.cache[k]['point'] === point)\n                return k;\n    }\n\n    getAvgAngle(angles) {\n        let avg = angles[0];\n        for (let i = 1; i < angles.length; i++) {\n            let midAngle = (avg + angles[i]) / 2;\n            if (Math.abs(avg - angles[i]) > Math.PI) //if angle1 - angle3 > 180deg => correct mid angle\n                midAngle = Utils.reverseRad(midAngle);\n            avg = midAngle;\n        }\n        return avg;\n    }\n\n    locateAnchor(...points) {\n        let angles = [];\n        points.forEach(v => angles.push(this.cachePointAndGetAngle(v)));\n        if (angles.length > 1)\n            angles = this.getAvgAngle(angles);\n        this.anchor = this.getAnchorPointByAngle(angles);\n    }\n\n    getAnchor() {\n        return this.anchor;\n    }\n}\n\nexport class Line extends Shape {\n    start;\n    end;\n    qCurve;\n    processed = false;\n\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n    }\n\n    setPosition(position) {\n        this.start = this.getPointObject(position);\n        return this;\n    }\n\n    setStart(point) {\n        return this.setPosition(point);\n    }\n\n    setEnd(point) {\n        this.end = this.getPointObject(point);\n        return this;\n    }\n\n    setQuadraticPoint(point) {\n        this.qCurve = this.getPointObject(point);\n        return this;\n    }\n\n    /**\n     * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     */\n    getPointObject(point) {\n        switch (this.getTypeOf(point)) {\n            case \"number,number\"://[x,y]\n                return new Point(point);\n            case \"string,number\"://[intR,length] or [intD,length]\n                return new AnglePoint(point);\n            case \"object,number\"://[shape,gap]\n                return new ShapePoint(point);\n            default:\n                throw new Error('wrong input');\n        }\n    }\n\n    getTypeOf(point) {\n        return typeof point[0] + ',' + typeof point[1]\n    }\n\n    render(canvasCtx) {\n        this.preparePoints();\n        let ps = this.start.getAnchor();\n        let pe = this.end.getAnchor();\n\n        canvasCtx.beginPath();\n        canvasCtx.fillStyle = 'transparent';\n        canvasCtx.moveTo(ps[0], ps[1]);\n        if (this.qCurve) {\n            let p2 = this.qCurve.getAnchor();\n            canvasCtx.quadraticCurveTo(p2[0], p2[1], pe[0], pe[1]);\n        } else {\n            canvasCtx.lineTo(pe[0], pe[1]);\n        }\n        this.fillColor2 = this.fillColor;\n        this.fillColor = undefined;\n        super.render(canvasCtx);\n        this.fillColor = this.fillColor2;\n        if (this.direction !== undefined && this.places !== undefined) {\n            let info = this.getArrowInfo();\n            let x, y;\n            for (let i = 0; i < info.length; i++) {\n                x = ps[0] + (pe[0] - ps[0]) * info[i][0];\n                y = ps[1] + (pe[1] - ps[1]) * info[i][0];\n                this.drawArrow(canvasCtx, 10, info[i][1], x, y);\n            }\n        }\n    }\n\n    preparePoints() {\n        debugger\n        if (!this.processed) {\n            this.start.locateByPoint(this.offset);\n            this.end.locateByPoint(this.start);\n            if (this.qCurve != null) {\n                this.qCurve.locateByPoint(this.start);\n                this.qCurve.locateAnchor(this.start, this.end);\n                this.end.locateAnchor(this.qCurve);\n                this.start.locateAnchor(this.qCurve);\n            } else {\n                this.end.locateAnchor(this.start);\n                this.start.locateAnchor(this.end);\n            }\n            this.processed = true;\n        }\n    }\n\n    getCenterPoint() {\n        this.preparePoints();\n        return [(this.start[0] + this.end[0]) / 2, (this.start[1] + this.end[1]) / 2]\n    }\n\n    /**\n     * show arrows on the line\n     * @param direction 0 or 1\n     * @param places array of float values, each is 0 - 1;\n     * @return Shape\n     */\n    showArrow(direction, places) {\n        this.direction = direction;\n        this.places = places;\n        return this;\n    }\n\n    drawArrow(canvasCtx, length, angle, x, y) {\n        canvasCtx.beginPath();\n        let p1 = [x - length * Math.cos(angle - Utils._PI6), y - length * Math.sin(angle - Utils._PI6)];\n        let p2 = [x - length * Math.cos(angle + Utils._PI6), y - length * Math.sin(angle + Utils._PI6)];\n        canvasCtx.moveTo(x, y);\n        canvasCtx.lineTo(p1[0], p1[1]);\n        canvasCtx.lineTo(p2[0], p2[1]);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n\n    getArrowInfo() {\n        let ans = [];\n\n        if (typeof this.places === 'number')\n            this.places = [this.places];\n\n        if (this.qCurve != null) {\n            this.places = this.shrinkTo01(this.places);\n            this.places.forEach(v => ans.push([v, this.getArrowAngleForQCurve(v)]));\n        } else {\n            let angle = this.direction ?\n                Utils.getAngleByPoint(this.start.getAnchor(), this.end.getAnchor()) :\n                Utils.getAngleByPoint(this.end.getAnchor(), this.start.getAnchor());\n            this.places.forEach(v => ans.push([v, angle]));\n        }\n        this.length = Utils.getLengthByPoints(this.start.getAnchor(), this.end.getAnchor());\n        return ans;\n    }\n\n    getArrowAngleForQCurve(place) {\n        if (this.direction) {\n            return place <= 0.5 ?\n                Utils.getAngleByPoint(this.start.getAnchor(), this.qCurve.getAnchor()) :\n                Utils.getAngleByPoint(this.qCurve.getAnchor(), this.end.getAnchor());\n        } else {\n            return place <= 0.5 ?\n                Utils.getAngleByPoint(this.qCurve.getAnchor(), this.start.getAnchor()) :\n                Utils.getAngleByPoint(this.end.getAnchor(), this.qCurve.getAnchor());\n        }\n    }\n\n    shrinkTo01(a) {\n        let ans = [];\n        a.forEach(v => v <= 0.5 ? ans[0] = 0 : ans[1] = 1);\n        return ans[0] == null ? [1] : ans;\n    }\n}"]},"metadata":{},"sourceType":"module"}