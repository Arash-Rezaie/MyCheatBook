{"ast":null,"code":"import { Shape } from \"./shape\";\nimport { Utils } from \"../../../tools/utils\";\nimport { Text } from \"./text\";\nexport class Line extends Shape {\n  constructor() {\n    super();\n    this.processed = false;\n    this.setStrokeWidth(1);\n  }\n\n  setPosition(position) {\n    this.start = this.getPointObject(position);\n    return this;\n  }\n\n  setStart(point) {\n    return this.setPosition(point);\n  }\n\n  setEnd(point) {\n    this.end = this.getPointObject(point);\n    return this;\n  }\n\n  setQuadraticPoint(point) {\n    this.qCurve = this.getPointObject(point);\n    return this;\n  }\n  /**\n   * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   */\n\n\n  getPointObject(point) {\n    let ans = {};\n\n    switch (this.getTypeOf(point)) {\n      case \"number,number\":\n        //[x,y]\n        ans[\"xy\"] = point;\n        break;\n\n      case \"string,number\":\n        //[intR,length] or [intD,length]\n        let i = point[0].length - 1;\n        let c = point[0][i];\n        let v = Number(point[0].substring(0, i));\n\n        if (c === 'R' || c === 'r') {\n          ans[\"angle\"] = Utils.normalizeRadian(v);\n          ans[\"gap\"] = point[1];\n        } else if (c === 'D' || c === 'd') {\n          ans[\"angle\"] = Utils.normalizeRadian(Utils.deg2Rad(v));\n          ans[\"gap\"] = point[1];\n        } else {\n          throw new Error('wrong input');\n        }\n\n        break;\n\n      case \"object,number\":\n        //[shape,gap]\n        ans[\"shape\"] = point[0];\n        ans[\"gap\"] = point[1];\n        break;\n\n      default:\n        throw new Error('wrong input');\n    }\n\n    return ans;\n  }\n\n  getTypeOf(point) {\n    return typeof point[0] + ',' + typeof point[1];\n  }\n\n  render(canvasCtx) {\n    this.preparePoints();\n    canvasCtx.beginPath();\n    canvasCtx.fillStyle = 'transparent';\n    canvasCtx.moveTo(this.start[\"xy\"][0], this.start[\"xy\"][1]);\n    if (this.qCurve) canvasCtx.quadraticCurveTo(this.qCurve[\"xy\"][0], this.qCurve[\"xy\"][1], this.end[\"xy\"][0], this.end[\"xy\"][1]);else canvasCtx.lineTo(this.end[\"xy\"][0], this.end[\"xy\"][1]); // canvasCtx.closePath();\n\n    this.fillColor2 = this.fillColor;\n    this.fillColor = undefined;\n    super.render(canvasCtx);\n    this.fillColor = this.fillColor2;\n\n    if (this.direction !== undefined && this.places !== undefined) {\n      let info = this.getArrowInfo();\n      let p1 = this.start[\"xy\"];\n      let p2 = this.end[\"xy\"];\n      let x, y;\n\n      for (let i = 0; i < info.length; i++) {\n        x = p1[0] + (p2[0] - p1[0]) * info[i][0];\n        y = p1[1] + (p2[1] - p1[1]) * info[i][0];\n        this.drawArrow(canvasCtx, 10, info[i][1], x, y);\n      }\n    }\n  }\n\n  preparePoints() {\n    if (!this.processed) {\n      if (this.qCurve != null) {\n        if (this.qCurve[\"shape\"] != null) {\n          this.process2PointsXY(this.qCurve, this.start, true);\n          this.process2PointsXY(this.end[\"shape\"] != null ? this.qCurve : this.start, this.end, true);\n          this.processCurveAsShape(this.start, this.qCurve, this.end); //pick an accurate point for curve\n        } else {\n          this.process2PointsXY(this.start, this.qCurve);\n          this.process2PointsXY(this.start, this.end);\n        }\n      } else {\n        this.process2PointsXY(this.start, this.end);\n      }\n\n      this.processed = true;\n    }\n  }\n\n  process2PointsXY(p1, p2, ignoreP1XYModification = false) {\n    let c1;\n\n    if (p2[\"xy\"] == null) {\n      if (p2[\"angle\"] != null) {\n        let angle = p2[\"angle\"];\n        p2[\"xy\"] = Utils.getPointByAngle(this.getTargetXY(p1, angle), angle, p2[\"gap\"]);\n      } else if (p2[\"shape\"] != null) {\n        c1 = this.getPointCenter(p1);\n        let c2 = p2[\"shape\"].getCenterPoint();\n        let angle = Utils.getAngle(c2[0], c2[1], c1[0], c1[1]); //angle from p2 to p1\n\n        p2[\"xy\"] = this.getTargetXY(p2, angle);\n      } else {\n        throw new Error(\"no way to calculate point.xy\");\n      }\n    }\n\n    if (!ignoreP1XYModification && p1[\"xy\"] == null) {\n      if (c1 == null) c1 = this.getPointCenter(p1);\n      let angle = Utils.getAngleByPoint(c1, p2[\"xy\"]);\n      p1[\"xy\"] = this.getTargetXY(p1, angle);\n    }\n  }\n\n  getPointCenter(p) {\n    if (p[\"xy\"]) {\n      return p[\"xy\"];\n    } else if (p[\"shape\"] != null) {\n      return p[\"shape\"].getCenterPoint();\n    } else {\n      throw new Error(\"p1 is not acceptable. It must be a point or a shape\");\n    }\n  }\n\n  processCurveAsShape(start, curve, end) {\n    let t = this.qCurve[\"shape\"].getCenterPoint();\n    let angle1 = Utils.getAngleByPoint(t, start[\"xy\"]);\n    let angle2 = Utils.getAngleByPoint(t, end[\"xy\"]);\n    curve[\"xy\"] = this.getTargetXY(curve[\"shape\"], this.getMidAngle(angle1, angle2));\n  }\n\n  getMidAngle(angle1, angle2) {\n    let midAngle = (angle1 + angle2) / 2;\n    if (Math.abs(angle1 - angle2) > Math.PI) //if angle1 - angle3 > 180deg => correct mid angle\n      midAngle = Utils.reverseRad(midAngle);\n    let d1 = Utils.rad2Deg(angle1);\n    let d2 = Utils.rad2Deg(angle2);\n    let d3 = Utils.rad2Deg(midAngle);\n    return midAngle;\n  } //p must be a shape\n\n\n  getTargetXY(p, angle) {\n    return p[\"xy\"] != null ? p[\"xy\"] : p[\"shape\"][\"getExternalPoint\"] != null ? p[\"shape\"].getExternalPoint(angle, p[\"gap\"]) : Utils.getPointByAngle(p[\"shape\"].getCenterPoint(), angle, p[\"gap\"]);\n  }\n\n  getCenterPoint() {\n    this.preparePoints();\n    return [(this.start[0] + this.end[0]) / 2, (this.start[1] + this.end[1]) / 2];\n  }\n  /**\n   * show arrows on the line\n   * @param direction 0 or 1\n   * @param places array of float values, each is 0 - 1;\n   * @return Shape\n   */\n\n\n  showArrow(direction, places) {\n    this.direction = direction;\n    this.places = places;\n    return this;\n  }\n\n  drawArrow(canvasCtx, length, angle, x, y) {\n    canvasCtx.beginPath();\n    let p1 = [x + length * Math.cos(angle + Utils._PI6), y + length * Math.sin(angle + Utils._PI6)];\n    let p2 = [x + length * Math.cos(angle - Utils._PI6), y + length * Math.sin(angle - Utils._PI6)];\n    canvasCtx.moveTo(x, y);\n    canvasCtx.lineTo(p1[0], p1[1]);\n    canvasCtx.lineTo(p2[0], p2[1]);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n  getArrowInfo() {\n    let ans = [];\n    if (typeof this.places === 'number') this.places = [this.places];\n\n    if (this.qCurve != null) {\n      this.places = this.shrinkTo01(this.places);\n      this.places.forEach(v => ans.push([v, this.getArrowAngleForQCurve(v)]));\n    } else {\n      debugger;\n      let angle = this.direction ? Utils.getAngleByPoint(this.start[\"xy\"], this.end[\"xy\"]) : Utils.getAngleByPoint(this.end[\"xy\"], this.start[\"xy\"]);\n      this.places.forEach(v => ans.push([v, angle]));\n    }\n\n    this.length = Utils.getLengthByPoints(this.start[\"xy\"], this.end[\"xy\"]);\n    return ans;\n  }\n\n  getArrowAngleForQCurve(place) {\n    if (this.direction) {\n      return place <= 0.5 ? Utils.getAngleByPoint(this.start[\"xy\"], this.qCurve[\"xy\"]) : Utils.getAngleByPoint(this.qCurve[\"xy\"], this.end[\"xy\"]);\n    } else {\n      return place <= 0.5 ? Utils.getAngleByPoint(this.qCurve[\"xy\"], this.start[\"xy\"]) : Utils.getAngleByPoint(this.end[\"xy\"], this.qCurve[\"xy\"]);\n    }\n  }\n\n  shrinkTo01(a) {\n    let ans = [];\n    a.forEach(v => v <= 0.5 ? ans[0] = 0 : ans[1] = 1);\n    return ans[0] == null ? [1] : ans;\n  }\n\n}\nexport class HLine extends Line {\n  setLength(l) {\n    l > 0 ? this.lineTo(['0D', l]) : this.lineTo(['180D', -l]);\n    return this;\n  }\n\n}\nexport class VLine extends Line {\n  setLength(l) {\n    l > 0 ? this.lineTo(['90D', l]) : this.lineTo(['270D', -l]);\n    return this;\n  }\n\n}\nexport class Vector extends Line {\n  constructor() {\n    super();\n    this.setStrokeColor('black').setFillColor('black').setStrokeWidth(2).showArrow(1, 1);\n  }\n\n}\nexport class HVector extends Vector {\n  setLabel(label) {\n    if (typeof label === 'string') label = new Text().setPosition(this.getCenterPoint()).setLabel(label).setOffset([0, -6]).setFontStyle('');\n    return super.setLabel(label);\n  }\n\n  setLength(l) {\n    return l > 0 ? this.lineTo(['0D', l]) : this.lineTo(['180D', -l]);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/line.js"],"names":["Shape","Utils","Text","Line","constructor","processed","setStrokeWidth","setPosition","position","start","getPointObject","setStart","point","setEnd","end","setQuadraticPoint","qCurve","ans","getTypeOf","i","length","c","v","Number","substring","normalizeRadian","deg2Rad","Error","render","canvasCtx","preparePoints","beginPath","fillStyle","moveTo","quadraticCurveTo","lineTo","fillColor2","fillColor","undefined","direction","places","info","getArrowInfo","p1","p2","x","y","drawArrow","process2PointsXY","processCurveAsShape","ignoreP1XYModification","c1","angle","getPointByAngle","getTargetXY","getPointCenter","c2","getCenterPoint","getAngle","getAngleByPoint","p","curve","t","angle1","angle2","getMidAngle","midAngle","Math","abs","PI","reverseRad","d1","rad2Deg","d2","d3","getExternalPoint","showArrow","cos","_PI6","sin","closePath","shrinkTo01","forEach","push","getArrowAngleForQCurve","getLengthByPoints","place","a","HLine","setLength","l","VLine","Vector","setStrokeColor","setFillColor","HVector","setLabel","label","setOffset","setFontStyle"],"mappings":"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","sourcesContent":["import {Shape} from \"./shape\";\nimport {Utils} from \"../../../tools/utils\";\nimport {Text} from \"./text\";\n\nexport class Line extends Shape {\n    start;\n    end;\n    qCurve;\n    processed = false;\n\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n    }\n\n    setPosition(position) {\n        this.start = this.getPointObject(position);\n        return this;\n    }\n\n    setStart(point) {\n        return this.setPosition(point);\n    }\n\n    setEnd(point) {\n        this.end = this.getPointObject(point);\n        return this;\n    }\n\n    setQuadraticPoint(point) {\n        this.qCurve = this.getPointObject(point);\n        return this;\n    }\n\n    /**\n     * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     */\n    getPointObject(point) {\n        let ans = {};\n        switch (this.getTypeOf(point)) {\n            case \"number,number\"://[x,y]\n                ans[\"xy\"] = point;\n                break;\n            case \"string,number\"://[intR,length] or [intD,length]\n                let i = point[0].length - 1;\n                let c = point[0][i];\n                let v = Number(point[0].substring(0, i));\n                if (c === 'R' || c === 'r') {\n                    ans[\"angle\"] = Utils.normalizeRadian(v);\n                    ans[\"gap\"] = point[1];\n                } else if (c === 'D' || c === 'd') {\n                    ans[\"angle\"] = Utils.normalizeRadian(Utils.deg2Rad(v));\n                    ans[\"gap\"] = point[1];\n                } else {\n                    throw new Error('wrong input');\n                }\n                break;\n            case \"object,number\"://[shape,gap]\n                ans[\"shape\"] = point[0];\n                ans[\"gap\"] = point[1];\n                break;\n            default:\n                throw new Error('wrong input');\n        }\n        return ans;\n    }\n\n    getTypeOf(point) {\n        return typeof point[0] + ',' + typeof point[1]\n    }\n\n    render(canvasCtx) {\n        this.preparePoints();\n        canvasCtx.beginPath();\n        canvasCtx.fillStyle = 'transparent';\n        canvasCtx.moveTo(this.start[\"xy\"][0], this.start[\"xy\"][1]);\n        if (this.qCurve)\n            canvasCtx.quadraticCurveTo(this.qCurve[\"xy\"][0], this.qCurve[\"xy\"][1], this.end[\"xy\"][0], this.end[\"xy\"][1]);\n        else\n            canvasCtx.lineTo(this.end[\"xy\"][0], this.end[\"xy\"][1]);\n        // canvasCtx.closePath();\n        this.fillColor2 = this.fillColor;\n        this.fillColor = undefined;\n        super.render(canvasCtx);\n        this.fillColor = this.fillColor2;\n        if (this.direction !== undefined && this.places !== undefined) {\n            let info = this.getArrowInfo();\n            let p1 = this.start[\"xy\"];\n            let p2 = this.end[\"xy\"];\n            let x, y;\n            for (let i = 0; i < info.length; i++) {\n                x = p1[0] + (p2[0] - p1[0]) * info[i][0];\n                y = p1[1] + (p2[1] - p1[1]) * info[i][0];\n                this.drawArrow(canvasCtx, 10, info[i][1], x, y);\n            }\n        }\n    }\n\n    preparePoints() {\n        if (!this.processed) {\n            if (this.qCurve != null) {\n                if (this.qCurve[\"shape\"] != null) {\n                    this.process2PointsXY(this.qCurve, this.start, true);\n                    this.process2PointsXY((this.end[\"shape\"] != null ? this.qCurve : this.start), this.end, true);\n                    this.processCurveAsShape(this.start, this.qCurve, this.end);//pick an accurate point for curve\n                } else {\n                    this.process2PointsXY(this.start, this.qCurve);\n                    this.process2PointsXY(this.start, this.end);\n                }\n            } else {\n                this.process2PointsXY(this.start, this.end);\n            }\n            this.processed = true;\n        }\n    }\n\n    process2PointsXY(p1, p2, ignoreP1XYModification = false) {\n        let c1;\n        if (p2[\"xy\"] == null) {\n            if (p2[\"angle\"] != null) {\n                let angle = p2[\"angle\"];\n                p2[\"xy\"] = Utils.getPointByAngle(this.getTargetXY(p1, angle), angle, p2[\"gap\"]);\n            } else if (p2[\"shape\"] != null) {\n                c1 = this.getPointCenter(p1);\n                let c2 = p2[\"shape\"].getCenterPoint();\n                let angle = Utils.getAngle(c2[0], c2[1], c1[0], c1[1]);//angle from p2 to p1\n                p2[\"xy\"] = this.getTargetXY(p2, angle);\n            } else {\n                throw new Error(\"no way to calculate point.xy\");\n            }\n        }\n\n        if (!ignoreP1XYModification && p1[\"xy\"] == null) {\n            if (c1 == null)\n                c1 = this.getPointCenter(p1);\n            let angle = Utils.getAngleByPoint(c1, p2[\"xy\"]);\n            p1[\"xy\"] = this.getTargetXY(p1, angle);\n        }\n    }\n\n    getPointCenter(p) {\n        if (p[\"xy\"]) {\n            return p[\"xy\"];\n        } else if (p[\"shape\"] != null) {\n            return p[\"shape\"].getCenterPoint();\n        } else {\n            throw new Error(\"p1 is not acceptable. It must be a point or a shape\")\n        }\n    }\n\n    processCurveAsShape(start, curve, end) {\n        let t = this.qCurve[\"shape\"].getCenterPoint();\n        let angle1 = Utils.getAngleByPoint(t, start[\"xy\"]);\n        let angle2 = Utils.getAngleByPoint(t, end[\"xy\"]);\n        curve[\"xy\"] = this.getTargetXY(curve[\"shape\"], this.getMidAngle(angle1, angle2));\n    }\n\n    getMidAngle(angle1, angle2) {\n        let midAngle = (angle1 + angle2) / 2;\n        if (Math.abs(angle1 - angle2) > Math.PI) //if angle1 - angle3 > 180deg => correct mid angle\n            midAngle = Utils.reverseRad(midAngle);\n\n        let d1 = Utils.rad2Deg(angle1);\n        let d2 = Utils.rad2Deg(angle2);\n        let d3 = Utils.rad2Deg(midAngle);\n\n        return midAngle;\n    }\n\n    //p must be a shape\n    getTargetXY(p, angle) {\n        return (p[\"xy\"] != null) ?\n            p[\"xy\"] :\n            (\n                (p[\"shape\"][\"getExternalPoint\"] != null) ?\n                    p[\"shape\"].getExternalPoint(angle, p[\"gap\"]) :\n                    Utils.getPointByAngle(p[\"shape\"].getCenterPoint(), angle, p[\"gap\"])\n            )\n    }\n\n    getCenterPoint() {\n        this.preparePoints();\n        return [(this.start[0] + this.end[0]) / 2, (this.start[1] + this.end[1]) / 2]\n    }\n\n    /**\n     * show arrows on the line\n     * @param direction 0 or 1\n     * @param places array of float values, each is 0 - 1;\n     * @return Shape\n     */\n    showArrow(direction, places) {\n        this.direction = direction;\n        this.places = places;\n        return this;\n    }\n\n    drawArrow(canvasCtx, length, angle, x, y) {\n        canvasCtx.beginPath();\n        let p1 = [x + length * Math.cos(angle + Utils._PI6), y + length * Math.sin(angle + Utils._PI6)];\n        let p2 = [x + length * Math.cos(angle - Utils._PI6), y + length * Math.sin(angle - Utils._PI6)];\n        canvasCtx.moveTo(x, y);\n        canvasCtx.lineTo(p1[0], p1[1]);\n        canvasCtx.lineTo(p2[0], p2[1]);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n\n    getArrowInfo() {\n        let ans = [];\n\n        if (typeof this.places === 'number')\n            this.places = [this.places];\n\n        if (this.qCurve != null) {\n            this.places = this.shrinkTo01(this.places);\n            this.places.forEach(v => ans.push([v, this.getArrowAngleForQCurve(v)]));\n        } else {\n            debugger\n            let angle = this.direction ?\n                Utils.getAngleByPoint(this.start[\"xy\"], this.end[\"xy\"]) :\n                Utils.getAngleByPoint(this.end[\"xy\"], this.start[\"xy\"]);\n            this.places.forEach(v => ans.push([v, angle]));\n        }\n        this.length = Utils.getLengthByPoints(this.start[\"xy\"], this.end[\"xy\"]);\n        return ans;\n    }\n\n    getArrowAngleForQCurve(place) {\n        if (this.direction) {\n            return place <= 0.5 ?\n                Utils.getAngleByPoint(this.start[\"xy\"], this.qCurve[\"xy\"]) :\n                Utils.getAngleByPoint(this.qCurve[\"xy\"], this.end[\"xy\"]);\n        } else {\n            return place <= 0.5 ?\n                Utils.getAngleByPoint(this.qCurve[\"xy\"], this.start[\"xy\"]) :\n                Utils.getAngleByPoint(this.end[\"xy\"], this.qCurve[\"xy\"]);\n        }\n    }\n\n    shrinkTo01(a) {\n        let ans = [];\n        a.forEach(v => v <= 0.5 ? ans[0] = 0 : ans[1] = 1);\n        return ans[0] == null ? [1] : ans;\n    }\n}\n\nexport class HLine\n    extends Line {\n    setLength(l) {\n        l > 0 ?\n            this.lineTo(['0D', l]) :\n            this.lineTo(['180D', -l])\n        return this;\n    }\n}\n\nexport class VLine extends Line {\n    setLength(l) {\n        l > 0 ?\n            this.lineTo(['90D', l]) :\n            this.lineTo(['270D', -l])\n        return this;\n    }\n}\n\nexport class Vector extends Line {\n    constructor() {\n        super();\n        this.setStrokeColor('black')\n            .setFillColor('black')\n            .setStrokeWidth(2)\n            .showArrow(1, 1);\n    }\n}\n\nexport class HVector extends Vector {\n    setLabel(label) {\n        if (typeof label === 'string')\n            label = new Text()\n                .setPosition(this.getCenterPoint())\n                .setLabel(label)\n                .setOffset([0, -6])\n                .setFontStyle('');\n        return super.setLabel(label);\n    }\n\n    setLength(l) {\n        return (l > 0) ?\n            this.lineTo(['0D', l]) :\n            this.lineTo(['180D', -l])\n    }\n}"]},"metadata":{},"sourceType":"module"}