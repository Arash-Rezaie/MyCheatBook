{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import React from\"react\";import{Bash,Frame,GenericCode,Xml}from\"../../components/blocks\";import{InfoIcon}from\"../../components/bubble\";import{Blue,Bullet,Highlight,Important}from\"../../components/components\";import dependencyProblem from'../../res/images/dependency_problem.png';import mavenInteraction from'../../res/images/maven_interaction.png';import mavenLifecycle from'../../res/images/maven_lifecycle.png';import mavenEmbedded from'../../res/images/maven_embedded.png';import multiModule from'../../res/images/multi-module.png';export function MavenCheats(){return/*#__PURE__*/_jsxs(_Fragment,{children:[getMavenStructure(),getMavenDuty(),getSettings(),getLifecycle(),getProjectStructure(),getPomStructure(),getMultiModule()]});}function getMavenStructure(){return/*#__PURE__*/_jsxs(Frame,{title:'Maven directory structure',children:[\"There are two directories available for Maven, the Maven itself directory and m2 directory which holds dependencies. In fact \\\".m2\\\" directory is your local repository\",/*#__PURE__*/_jsx(\"br\",{}),\"In Maven 1, \\\"setting.xml\\u201C is located in Maven home directory at first and after the first execution, another \\\"setting.xml\\\" file wil be created in \\\".m2\\\" directory which contains your specialized configuration. This mechanism has changed in Maven 2 newer versi/on and \\\"settings.xml\\\" is located in Maven home directory only.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(GenericCode,{children:\"\\n                    MAVEN_HOME\\n                    \\u251C\\u2500\\u2500 bin\\n                    \\u2502   \\u251C\\u2500\\u2500 m2.conf\\n                    \\u2502   \\u2514\\u2500\\u2500 mvn\\n                    \\u251C\\u2500\\u2500 boot\\n                    \\u2502   \\u2514\\u2500\\u2500 plexus-classworlds-2.6.0.jar\\n                    \\u251C\\u2500\\u2500 conf\\n                    \\u2502   \\u251C\\u2500\\u2500 logging\\n                    \\u2502   \\u251C\\u2500\\u2500 settings.xml //Proxies, local m2, \\u2026 are configured here\\n                    \\u2502   \\u2514\\u2500\\u2500 toolchains.xml\\n                    \\u251C\\u2500\\u2500 lib\\n                    \\u2502   \\u251C\\u2500\\u2500 cdi-api-1.0.jar\\n                    \\u2502   \\u251C\\u2500\\u2500 ext\\n                    \\u2502   \\u251C\\u2500\\u2500 slf4j-api-1.7.29.jar\\n                    \\u2502   \\u2514\\u2500\\u2500 slf4j-api.license\\n                    \\u251C\\u2500\\u2500 LICENSE\\n                    \\u251C\\u2500\\u2500 NOTICE\\n                    \\u2514\\u2500\\u2500 README.txt\"}),/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsx(Important,{children:\"Maven path must /media/arash/SanDisk/my-cheat-book2 no space\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"current mave version is 2 but its lib version may be higher.\",/*#__PURE__*/_jsx(\"br\",{}),\"Maven is going to handle dependency managing, compiling, building, testing, reporting,\\u2026 .\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"You must define \",/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"M2_HOME \\u2192 %M2_HOME/bin%\"}),\" in your OS environment. To check that, enter command: \",/*#__PURE__*/_jsx(\"span\",{className:'blue',children:\"mvn -version\"})]})]})]});}function getMavenDuty(){return/*#__PURE__*/_jsxs(Frame,{title:'Maven duty',children:[/*#__PURE__*/_jsx(Blue,{children:\"Dependency prolem:\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Imagine we need lib \\\"a\\\" and \\\"b\\\" and these libs need lib f version 2 and f version 3. Now which lib we should keep?\",/*#__PURE__*/_jsx(\"br\",{}),\"Maven fetches dependency tree and keeps the first visited version. So we ourselves must handle versioning issue. To check dependency tree enter: \",/*#__PURE__*/_jsx(Highlight,{children:\"mvn dependency:tree\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{className:'center-horizontally-relative',src:dependencyProblem,alt:'dependency problem'}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bash,{children:\"\\n                    $:~/Applications/projects/java/maventest$ mvn dependency:tree\\n                    [INFO] Scanning for projects...\\n                    [INFO]\\n                    [INFO] -----------------------< org.example:maventest >------------------------\\n                    [INFO] Building maventest 1.0-SNAPSHOT\\n                    [INFO] --------------------------------[ jar ]---------------------------------\\n                    [INFO]\\n                    [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ maventest ---\\n                    [INFO] org.example:maventest:jar:1.0-SNAPSHOT\\n                    [INFO] - mysql:mysql-connector-java:jar:8.0.22:compile\\n                    [INFO]    - com.google.protobuf:protobuf-java:jar:3.11.4:compile\\n                    [INFO] ------------------------------------------------------------------------\\n                    [INFO] BUILD SUCCESS\\n                    [INFO] ------------------------------------------------------------------------\\n                    [INFO] Total time:  1.136 s\\n                    [INFO] Finished at: 2020-11-04T16:35:30+03:30\\n                    [INFO] ------------------------------------------------------------------------\\n                    \"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(Blue,{children:\"Maven ecosystem:\"}),/*#__PURE__*/_jsx(\"br\",{}),\"When we request a dependency in maven ecosystem, maven firstly, searches the local repository (m2 directory). Maven itself manipulates m2 directory. If it couldn't find the dependency, then it sends the request to a Repository Manager such as Nexus and Nexus downloads it from other public repositories. The dependency will be obtained in m2 directory. Next time, there is no need to download that files again\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{className:'center-horizontally-relative',src:mavenInteraction,alt:'maven interaction'})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Full map of embedded Maven:\",/*#__PURE__*/_jsx(\"br\",{}),\"Zabbix monitors git continuously. On alter, builds the project with the help of Puppet on maven. Then puppet sends war/jar to Jenkins for test and test will be monitored by Zabbix.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{className:'center-horizontally-relative',src:mavenEmbedded,alt:'embed maven'})]})]});}function getSettings(){return/*#__PURE__*/_jsx(Frame,{title:'Settings.xml',children:/*#__PURE__*/_jsx(Xml,{children:\"\\n                <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n                <!--\\n                 | This is the configuration file for Maven. It can be specified at two levels:\\n                 |\\n                 |  1. User Level. This settings.xml file provides configuration for a single user,\\n                 |                 and is normally provided in ${user.home}/.m2/settings.xml.\\n                 |\\n                 |                 NOTE: This location can be overridden with the CLI option:\\n                 |\\n                 |                 -s /path/to/user/settings.xml\\n                 |\\n                 |  2. Global Level. This settings.xml file provides configuration for all Maven\\n                 |                 users on a machine (assuming they're all using the same Maven\\n                 |                 installation). It's normally provided in\\n                 |                 ${maven.conf}/settings.xml.\\n                 |\\n                 |                 NOTE: This location can be overridden with the CLI option:\\n                 |\\n                 |                 -gs /path/to/global/settings.xml\\n                 |\\n                 | The sections in this sample file are intended to give you a running start at\\n                 | getting the most out of your Maven installation. Where appropriate, the default\\n                 | values (values used when the setting is not specified) are provided.\\n                 |\\n                 |-->\\n                <settings xmlns=\\\"http://maven.apache.org/SETTINGS/1.0.0\\\"\\n                          xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n                          xsi:schemaLocation=\\\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\\\">\\n                    <!-- localRepository\\n                     | The path to the local repository maven will use to store artifacts.\\n                     | you can define more than 1 localRepository and there is no priority among them.\\n                     |\\n                     | Default: ${user.home}/.m2/repository ${user.home} is taken from OS\\n                    -->\\n                    <localRepository>/path/to/local/repo</localRepository>\\n                    <!-- interactiveMode\\n                     | Maven asks question when some changes come in. It is better to make it false, so maven will do its job by itself.\\n                     |\\n                     | Default: true\\n                    -->\\n                    <interactiveMode>true</interactiveMode>\\n                    <!-- offline\\n                     | Determines whether maven should attempt to connect to the network when executing a build.\\n                     | This will have an effect on artifact downloads, artifact deployment, and others.\\n                     |\\n                     | Am I allowed to use the Internet. If you want to use online policy, then you should define proxy too.\\n                     |\\n                     | Default: false\\n                    -->\\n                    <offline>false</offline>\\n                    <!-- pluginGroups\\n                     | maven is plugin based, So we have to define plugins for every operation.\\n                     |-->\\n                    <pluginGroups>\\n                        <pluginGroup>com.your.plugins</pluginGroup>\\n                    </pluginGroups>\\n                    <!-- proxies\\n                     | This is a list of proxies which can be used on this machine to connect to the network.\\n                     | Unless otherwise specified (by system property or command-line switch), the first proxy\\n                     | specification in this list marked as active will be used.\\n                     |-->\\n                    <proxies>\\n                        <proxy>\\n                            <id>optional</id> <!--you define this to distinguish multiple proxies-->\\n                            <active>true</active> <!-- enabled or not -->\\n                            <protocol>http</protocol>\\n                            <username>proxyuser</username>\\n                            <password>proxypass</password>\\n                            <host>proxy.host.net</host><!--there are often more than 1 host. separate them with '|' character-->\\n                            <port>80</port>\\n                            <nonProxyHosts>local.net|some.host.com\\n                            </nonProxyHosts> <!-- usually, some parts of a proxy is free and doesn't need any username & password. This one is for them -->\\n                        </proxy>\\n                    </proxies>\\n                    <!-- servers\\n                     | This is a list of authentication profiles, keyed by the server-id used within the system.\\n                     | Authentication profiles can be used whenever maven must make a connection to a remote server.\\n                     |-->\\n                    <servers>\\n                        <!-- server\\n                         | Specifies the authentication information to use when connecting to a particular server, identified by\\n                         | a unique name within the system (referred to by the 'id' attribute below).\\n                         |\\n                         | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are\\n                         |       used together.\\n                         |\\n                         -->\\n                        <server>\\n                            <id>deploymentRepo</id>\\n                            <!-- use username & password or key & passphrase-->\\n                            <username>repouser</username>\\n                            <password>repopwd</password>\\n                            <!--\\n                            | If you are not willing to leave the setting file plain, you can hash your username & password and put that into another file\\n                            | mvn -emp yourPassword -> returns a hash code\\n                            | you must create a file named settings-security.xml under .m2. Go to next node.\\n                            -->\\n                            <privateKey>/path/to/private/key</privateKey> <!-- private/public key which you have for system-->\\n                            <passphrase>optional; leave empty if not used.</passphrase>\\n                            <filePermissions></filePermissions> <!-- the permission to create files on server-->\\n                            <directoryPermissions></directoryPermissions> <!-- like above for directory -->\\n                        </server>\\n                    </servers>\\n                    <!-- this part must be written in setting-security.xml file not here!!!\\n                     | create <settings> node just like above:\\n                     -->\\n                    <settingsSecurity>\\n                        <master>\\n                            <!-- hashcode created by npm -emp -->\\n                        </master>\\n                    </settingsSecurity>\\n                    <!-- this part must be written in setting-security.xml file not here!!! -->\\n                    <mirrors>\\n                        <mirror>\\n                            <id>mirrorId</id> <!-- must be unique -->\\n                            <mirrorOf>repositoryId</mirrorOf> <!-- this is mirror of which server -->\\n                            <name>Human Readable Name for this Mirror.</name>\\n                            <url>http://my.repository.com/repo/path</url>\\n                            <layout>default</layout> <!-- no details yet in maven -->\\n                            <mirrorOfLayouts>default | legacy</mirrorOfLayouts> <!-- no details yet in maven. Use default -->\\n                        </mirror>\\n                    </mirrors>\\n                    <!-- profiles\\n                     | We use profile to set environmental for your production. For example develop and test\\n                     |\\n                     |-->\\n                    <profiles>\\n                        <profile>\\n                            <id>jdk-1.4</id>\\n                            <!-- we speak about OS settings... -->\\n                            <activation>\\n                                <jdk>1.4</jdk> <!-- which jdk is used -->\\n                            </activation>\\n                            <properties/><!-- a property file (key:value) -->\\n                            <pluginRepositories></pluginRepositories> <!-- plugins which are useful for this profile-->\\n                            <repositories> <!-- if you want to use Nexus,-\\u2192 you must have defined it here-->\\n                                <repository>\\n                                    <id>jdk14</id>\\n                                    <name>Repository for JDK 1.4 builds</name>\\n                                    <url>http://www.myhost.com/maven/jdk14</url>\\n                                    <layout>default</layout>\\n                                    <snapshotPolicy>always</snapshotPolicy>\\n                                </repository>\\n                            </repositories>\\n                        </profile>\\n                        <!--\\n                         | Here is another profile, activated by the system property 'target-env' with a value of 'dev',\\n                         | which provides a specific path to the Tomcat instance. To use this, your plugin configuration\\n                         | might hypothetically look like:\\n                         |\\n                         | ...\\n                         | <plugin>\\n                         |   <groupId>org.myco.myplugins</groupId>\\n                         |   <artifactId>myplugin</artifactId>\\n                         |\\n                         |   <configuration>\\n                         |     <tomcatLocation>${tomcatPath}</tomcatLocation>\\n                         |   </configuration>\\n                         | </plugin>\\n                         | ...\\n                         |\\n                         | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to\\n                         |       anything, you could just leave off the <value/> inside the activation-property.\\n                         |\\n                        <profile>\\n                          <id>env-dev</id>\\n                          <activation>\\n                            <property>\\n                              <name>target-env</name>\\n                              <value>dev</value>\\n                            </property>\\n                          </activation>\\n                          <properties>\\n                            <tomcatPath>/path/to/tomcat/instance</tomcatPath>\\n                          </properties>\\n                        </profile>\\n                        -->\\n                    </profiles>\\n                    <!-- activeProfiles\\n                     | List of profiles that are active for all builds.\\n                     |\\n                    <activeProfiles>\\n                      <activeProfile>alwaysActiveProfile</activeProfile>\\n                      <activeProfile>anotherAlwaysActiveProfile</activeProfile>\\n                    </activeProfiles>\\n                    -->\\n                </settings>\\n                \"})});}function getProjectStructure(){return/*#__PURE__*/_jsxs(Frame,{title:'Project structure',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Project assembling: Creating project structure is called assembling.\"}),\"We should determine the structure of the project first. To do that, there are some predefined arch-types (\",/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"An arch-type is responsible to assemble the project and manipulates pom file\"}),\").\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"p\",{children:\"maven uses two major repository: repo.mavne.apache.org and uk.maven.org. If you are willing to upload your project in that repository, its name must be unique. To reach this goal we should follow (GroupName,ProjectName,Version) pattern.\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:'float-holder',style:{minWidth:'700px'},children:[/*#__PURE__*/_jsx(GenericCode,{title:'',children:\"\\n                .\\n                \\u251C\\u2500\\u2500 pom.xml //1\\n                \\u2514\\u2500\\u2500 src\\n                    \\u251C\\u2500\\u2500 LICENSE.txt //2\\n                    \\u251C\\u2500\\u2500 main\\n                    \\u2502   \\u251C\\u2500\\u2500 config //3\\n                    \\u2502   \\u251C\\u2500\\u2500 db //4\\n                    \\u2502   \\u251C\\u2500\\u2500 java //5\\n                    \\u2502   \\u2502   \\u2514\\u2500\\u2500 sourcePackages\\n                    \\u2502   \\u251C\\u2500\\u2500 resources\\n                    \\u2502   \\u2502   \\u2514\\u2500\\u2500 META-INF\\n                    \\u2502   \\u251C\\u2500\\u2500 scripts //6\\n                    \\u2502   \\u2514\\u2500\\u2500 webapp\\n                    \\u2502       \\u2514\\u2500\\u2500 WEB-INF //7\\n                    \\u2502           \\u2514\\u2500\\u2500 web.xml\\n                    \\u251C\\u2500\\u2500 NOTICE.txt //8\\n                    \\u251C\\u2500\\u2500 README.txt //9\\n                    \\u251C\\u2500\\u2500 site //10\\n                    \\u2514\\u2500\\u2500 test\\n                        \\u251C\\u2500\\u2500 java\\n                        \\u2514\\u2500\\u2500 resources\\n                \"}),/*#__PURE__*/_jsx(Bullet,{title:'1.',children:\"This is the heart of maven structure\"}),/*#__PURE__*/_jsx(Bullet,{title:'2.',children:\"Talk about license here\"}),/*#__PURE__*/_jsx(Bullet,{title:'3.',children:\"e.x: tomcat context files or mail server configs. This dir must not included in artifact\"}),/*#__PURE__*/_jsx(Bullet,{title:'4.',children:\"DB info. SQL scripts are important\"}),/*#__PURE__*/_jsx(Bullet,{title:'5.',children:\"Source code goes here\"}),/*#__PURE__*/_jsx(Bullet,{title:'6.',children:\"Everything about system administration or things that a developer may need or OS environmental things.\"}),/*#__PURE__*/_jsx(Bullet,{title:'7.',children:\"Window is able to recognize this dir in small and capital cases, but Linux accepts only capital case. Previously, all configs were going here, but now we almost use @, but never lose this dir. Some times it comes handy. After compile, classes dir will be created under this dir and .class files are located here.\"}),/*#__PURE__*/_jsx(Bullet,{title:'8.',children:\"Notices goes here\"}),/*#__PURE__*/_jsx(Bullet,{title:'9.',children:\"Instruction Information\"}),/*#__PURE__*/_jsx(Bullet,{title:'10.',children:\"Images and any thing necessary for build\"})]})]});}function getPomStructure(){return/*#__PURE__*/_jsxs(Frame,{title:'Pom.xml structure',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsx(Blue,{children:\"To declare a variable inside pom file:\"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <properties>\\n                        <mysql.version>8.0.22</mysql.version>\\n                    </properties>\\n                    \\n                    <someOtherNode>${mysql.version}</someOtherNode>\\n                    \"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(Blue,{children:\"Scope is declared to determine target place of dependency\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"Compile:\"}),\" build, test, run\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"Provided:\"}),\" build, test, run, !artifact\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"Runtime:\"}),\" artifact\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"System:\"}),\" like provided but is hardcoded in system in another path\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"Test:\"}),\" test, !artifact\",/*#__PURE__*/_jsx(\"br\",{})]})]}),/*#__PURE__*/_jsxs(Important,{children:[\"It is possible to put \",\"<dependencies/>\",\" in project node instead of profile. By this way, please notice that it may cause some trouble if you address a dependency from your computer, then others will fail to load that dependency. So it is recommended to put your desired depenedencies inside your own profile node\"]}),/*#__PURE__*/_jsx(GenericCode,{children:\"\\n                <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n                <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\"\\n                         xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n                         xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\">\\n                    <modelVersion>4.0.0</modelVersion>\\n                \\n                    <!-- this part must be unique \\u2192\\n                    <!-- version: MajorVersion.MinorVersion.IncrementalVersion-qualifier(RC,alpha,beta,SNAPSHOT) \\u2192\\n                    <!-- version.SNAPSHOT: it means that the project is under develop and is not stable, so maven downloads it on each sync cmd. -->\\n                    <groupId>your company name/domain</groupId>\\n                    <artifactId>project</artifactId>\\n                    <version>1.0-SNAPSHOT</version>\\n                   \\n                    <packaging>jar</packaging> <!-- output package type-->\\n                    <name>start with maven</name> <!-- the name of generated document -->\\n                    <url>http://www.arash.softwares.com</url> <!-- the target URL which we want to send the document \\u2192\\n                \\n                    <!-- some information about developers -->\\n                    <developers>\\n                        <developer>\\n                            <id>myId</id>\\n                            <name>Arash Rezaie</name>\\n                            <email>arash.re.12@gmail.com</email>\\n                            <properties>\\n                                <active>true</active>\\n                            </properties>\\n                        </developer>\\n                    </developers>\\n                \\n                    <!-- you can define any variable here and it can be a new one or builtin.Ref: ${propertyName} -->\\n                    <properties>\\n                        <mysql.version>8.0.22</mysql.version>\\n                    </properties>\\n                \\n                    <profiles>\\n                        <profile>\\n                            <id>develop</id>\\n                            <activation>\\n                                <!-- address a file indide project -->\\n                                <file>\\n                                    <exists>/src/main/lib.jar</exists>\\n                                </file>\\n                            </activation>\\n                            <dependencies>\\n                                <dependency>\\n                                    <groupId>mysql</groupId>\\n                                    <artifactId>mysql-connector-java</artifactId>\\n                                    <version>${mysql.version}</version>\\n                                    <scope>compile</scope>\\n                                    <exclusions>\\n                                        <!-- We can exclude some lib in a scope to avoid conflict -->\\n                                        <exclusion>\\n                                            <groupId></groupId>\\n                                            <artifactId></artifactId>\\n                                        </exclusion>\\n                                    </exclusions>\\n                                </dependency>\\n                                <dependency>\\n                                    <!-- address a file in your system like this -->\\n                                    <systemPath>local address</systemPath>\\n                                </dependency>\\n                            </dependencies>\\n                        </profile>\\n                    </profiles>\\n                </project>\\n                \"})]});}function getLifecycle(){return/*#__PURE__*/_jsxs(Frame,{title:'Lifecycle',children:[\"Every operation in Maven executes by a plugin. One lifecycle includes some stages and each stage has some goals to be passed one after the other to conclude the lifecycle.\",/*#__PURE__*/_jsx(\"br\",{}),\"There is an order to pass all phases,It stars from phase1.goal1, then phase1.goal2, ... till the end. So, all prerequisite phases must be passed to execute an special stage\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{className:'center-horizontally-relative',src:mavenLifecycle,alt:'maven lifecycle'}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Running stages:\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"mvn plugin\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"mvn plugin:goal\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:'blue',children:\"mvn compiler:compile\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"Show what plugin does:\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{className:'blue',children:\"mvn help:describe -Dplugin=compiler\"}),/*#__PURE__*/_jsx(\"br\",{})]})]});}function getMultiModule(){return/*#__PURE__*/_jsxs(Frame,{title:'Multi-Module',children:[\"We have to separate a project into multiple subprojects, so a team will be able to develop the project at the same time without breaking the code of others.\",/*#__PURE__*/_jsx(\"br\",{}),\"A multi-module project consists of multiple maven project, then we link them together and compile the root project.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:multiModule,alt:'multi-module project structure',className:'center-horizontally-relative'}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(GenericCode,{title:'project assembly',children:\"\\n                .\\n                \\u251C\\u2500\\u2500 config\\n                \\u251C\\u2500\\u2500 db\\n                \\u251C\\u2500\\u2500 LICENSE.txt\\n                \\u251C\\u2500\\u2500 maventest.iml\\n                \\u251C\\u2500\\u2500 NOTICE.txt\\n                \\u251C\\u2500\\u2500 persistence //module persistence\\n                \\u2502   \\u251C\\u2500\\u2500 main\\n                \\u2502   \\u2502   \\u251C\\u2500\\u2500 java\\n                \\u2502   \\u2502   \\u2502   \\u251C\\u2500\\u2500 com\\n                \\u2502   \\u2502   \\u2502   \\u2502   \\u2514\\u2500\\u2500 arash\\n                \\u2502   \\u2502   \\u2502   \\u2502       \\u251C\\u2500\\u2500 Main.java\\n                \\u2502   \\u2502   \\u2502   \\u2502       \\u2514\\u2500\\u2500 model\\n                \\u2502   \\u2502   \\u2502   \\u2514\\u2500\\u2500 META-INF\\n                \\u2502   \\u2502   \\u2514\\u2500\\u2500 resources\\n                \\u2502   \\u2502       \\u2514\\u2500\\u2500 META-INF\\n                \\u2502   \\u251C\\u2500\\u2500 pom.xml //module pom file\\n                \\u2502   \\u251C\\u2500\\u2500 target\\n                \\u2502   \\u2502   \\u251C\\u2500\\u2500 maven-archiver\\n                \\u2502   \\u2502   \\u2502   \\u2514\\u2500\\u2500 pom.properties\\n                \\u2502   \\u2502   \\u2514\\u2500\\u2500 persistence.jar\\n                \\u2502   \\u2514\\u2500\\u2500 test\\n                \\u2502       \\u251C\\u2500\\u2500 java\\n                \\u2502       \\u2514\\u2500\\u2500 resources\\n                \\u251C\\u2500\\u2500 pom.xml  //main pom file\\n                \\u251C\\u2500\\u2500 README.txt\\n                \\u251C\\u2500\\u2500 scripts\\n                \\u251C\\u2500\\u2500 services //module services\\n                \\u2502   \\u251C\\u2500\\u2500 main\\n                \\u2502   \\u2502   \\u251C\\u2500\\u2500 java\\n                \\u2502   \\u2502   \\u2502   \\u251C\\u2500\\u2500 com\\n                \\u2502   \\u2502   \\u2502   \\u2502   \\u2514\\u2500\\u2500 arash\\n                \\u2502   \\u2502   \\u2502   \\u2502       \\u2514\\u2500\\u2500 Main.java\\n                \\u2502   \\u2502   \\u2502   \\u2514\\u2500\\u2500 META-INF\\n                \\u2502   \\u2502   \\u2514\\u2500\\u2500 resources\\n                \\u2502   \\u2502       \\u2514\\u2500\\u2500 META-INF\\n                \\u2502   \\u251C\\u2500\\u2500 pom.xml //module pom file\\n                \\u2502   \\u251C\\u2500\\u2500 target\\n                \\u2502   \\u2502   \\u251C\\u2500\\u2500 maven-archiver\\n                \\u2502   \\u2502   \\u2502   \\u2514\\u2500\\u2500 pom.properties\\n                \\u2502   \\u2502   \\u2514\\u2500\\u2500 services.jar\\n                \\u2502   \\u2514\\u2500\\u2500 test\\n                \\u2502       \\u251C\\u2500\\u2500 java\\n                \\u2502       \\u2514\\u2500\\u2500 resources\\n                \\u251C\\u2500\\u2500 site\\n                \\u2514\\u2500\\u2500 webapp\\n                    \\u2514\\u2500\\u2500 WEB-INF\\n                        \\u2514\\u2500\\u2500 web.xml\\n                \"}),/*#__PURE__*/_jsxs(\"div\",{className:'flex-row',children:[/*#__PURE__*/_jsx(Xml,{description:'Parent pom file',children:\"\\n                <groupId>com.arash</groupId>\\n                <artifactId>web</artifactId>\\n                <version>1.0-SNAPSHOT</version>\\n                <name>parent multi module</name>\\n                \\n                <!-- packaging must be pom -->\\n                <packaging>pom</packaging>\\n                \\n                <!-- children must be defined in modules node, so main project becomes aware of them -->\\n                <modules>\\n                    <module>services</module>\\n                    <module>persistence</module>\\n                </modules>\\n                \\n                <properties>\\n                    <mysql.version>8.0.22</mysql.version>\\n                </properties>\\n                <profiles>\\n                    <profile>\\n                        <id>develop</id>\\n                        <build>\\n                            <plugins>\\n                                <plugin>\\n                                    <groupId>org.apache.maven.plugins</groupId>\\n                                    <artifactId>maven-compiler-plugin</artifactId>\\n                                    <version>3.8.1</version>\\n                                    <configuration>\\n                                        <source>1.8</source>\\n                                        <target>1.8</target>\\n                                    </configuration>\\n                                </plugin>\\n                            </plugins>\\n                        </build>\\n                    </profile>\\n                </profiles>\\n                \"}),/*#__PURE__*/_jsx(Xml,{description:'Child pom file',children:\"\\n                <artifactId>services</artifactId>\\n                <version>1.0-SNAPSHOT</version>\\n                <name>child module service</name>\\n                <packaging>jar</packaging>\\n                \\n                <!-- introduce main parent -->\\n                <parent>\\n                    <groupId>com.arash</groupId>\\n                    <artifactId>web</artifactId>\\n                    <version>1.0-SNAPSHOT</version>\\n                </parent>\\n                \\n                <dependencies>\\n                    <dependency>\\n                        <groupId>com.arash</groupId>\\n                        <artifactId>persistence</artifactId>\\n                        <version>1.0-SNAPSHOT</version>\\n                    </dependency>\\n                </dependencies>\\n                <build>\\n                    <!-- parent name will be replaced if you drop this one -->\\n                    <finalName>services</finalName>\\n                </build>\\n                \"})]})]});}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/contents/maven/maven-cheats.js"],"names":["React","Bash","Frame","GenericCode","Xml","InfoIcon","Blue","Bullet","Highlight","Important","dependencyProblem","mavenInteraction","mavenLifecycle","mavenEmbedded","multiModule","MavenCheats","getMavenStructure","getMavenDuty","getSettings","getLifecycle","getProjectStructure","getPomStructure","getMultiModule","minWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Bash, Frame, GenericCode, Xml} from \"../../components/blocks\";\nimport {InfoIcon} from \"../../components/bubble\";\nimport {Blue, Bullet, Highlight, Important} from \"../../components/components\";\nimport dependencyProblem from '../../res/images/dependency_problem.png';\nimport mavenInteraction from '../../res/images/maven_interaction.png';\nimport mavenLifecycle from '../../res/images/maven_lifecycle.png';\nimport mavenEmbedded from '../../res/images/maven_embedded.png';\nimport multiModule from '../../res/images/multi-module.png';\n\nexport function MavenCheats() {\n    return (\n        <>\n            {getMavenStructure()}\n            {getMavenDuty()}\n            {getSettings()}\n            {getLifecycle()}\n            {getProjectStructure()}\n            {getPomStructure()}\n            {getMultiModule()}\n        </>\n    )\n}\n\nfunction getMavenStructure() {\n    return (\n        <Frame title={'Maven directory structure'}>\n            There are two directories available for Maven, the Maven itself directory and m2 directory which holds\n            dependencies. In fact \".m2\" directory is your local repository<br/>\n            In Maven 1, \"setting.xml“ is located in Maven home directory at first and after the first execution, another\n            \"setting.xml\" file wil be created in \".m2\" directory which contains your specialized configuration. This\n            mechanism has changed in Maven 2 newer versi/on and \"settings.xml\" is located in Maven home directory\n            only.<br/>\n            <GenericCode>{`\n                    MAVEN_HOME\n                    ├── bin\n                    │   ├── m2.conf\n                    │   └── mvn\n                    ├── boot\n                    │   └── plexus-classworlds-2.6.0.jar\n                    ├── conf\n                    │   ├── logging\n                    │   ├── settings.xml //Proxies, local m2, … are configured here\n                    │   └── toolchains.xml\n                    ├── lib\n                    │   ├── cdi-api-1.0.jar\n                    │   ├── ext\n                    │   ├── slf4j-api-1.7.29.jar\n                    │   └── slf4j-api.license\n                    ├── LICENSE\n                    ├── NOTICE\n                    └── README.txt`}\n            </GenericCode>\n            <InfoIcon>\n                <Important>Maven path must /media/arash/SanDisk/my-cheat-book2 no space</Important>\n                <p>\n                    current mave version is 2 but its lib version may be higher.<br/>\n                    Maven is going to handle dependency managing, compiling, building, testing, reporting,… .\n                </p>\n                <p>\n                    You must define <span className={'purple'}>M2_HOME → %M2_HOME/bin%</span> in your OS\n                    environment. To check that, enter command: <span className={'blue'}>mvn -version</span>\n                </p>\n            </InfoIcon>\n        </Frame>\n    )\n}\n\nfunction getMavenDuty() {\n    return (\n        <Frame title={'Maven duty'}>\n\n            <Blue>Dependency prolem:</Blue><br/>\n            Imagine we need lib \"a\" and \"b\" and these libs need lib f version 2 and f version 3. Now which lib we\n            should keep?<br/>\n            Maven fetches dependency tree and keeps the first visited version. So we ourselves must handle\n            versioning issue. To check dependency tree enter: <Highlight>mvn dependency:tree</Highlight><br/>\n            <img className={'center-horizontally-relative'} src={dependencyProblem}\n                 alt={'dependency problem'}/><br/>\n            <Bash>\n                {`\n                    $:~/Applications/projects/java/maventest$ mvn dependency:tree\n                    [INFO] Scanning for projects...\n                    [INFO]\n                    [INFO] -----------------------< org.example:maventest >------------------------\n                    [INFO] Building maventest 1.0-SNAPSHOT\n                    [INFO] --------------------------------[ jar ]---------------------------------\n                    [INFO]\n                    [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ maventest ---\n                    [INFO] org.example:maventest:jar:1.0-SNAPSHOT\n                    [INFO] - mysql:mysql-connector-java:jar:8.0.22:compile\n                    [INFO]    - com.google.protobuf:protobuf-java:jar:3.11.4:compile\n                    [INFO] ------------------------------------------------------------------------\n                    [INFO] BUILD SUCCESS\n                    [INFO] ------------------------------------------------------------------------\n                    [INFO] Total time:  1.136 s\n                    [INFO] Finished at: 2020-11-04T16:35:30+03:30\n                    [INFO] ------------------------------------------------------------------------\n                    `}\n            </Bash>\n\n            <p>\n                <Blue>Maven ecosystem:</Blue><br/>\n                When we request a dependency in maven ecosystem, maven firstly, searches the local repository (m2\n                directory). Maven itself manipulates m2 directory. If it couldn't find the dependency, then it sends the\n                request to a Repository Manager such as Nexus and Nexus downloads it from other public repositories. The\n                dependency will be obtained in m2 directory. Next time, there is no need to download that files\n                again<br/><br/>\n                <img className={'center-horizontally-relative'} src={mavenInteraction} alt={'maven interaction'}/>\n            </p>\n            <p>\n                Full map of embedded Maven:<br/>\n                Zabbix monitors git continuously. On alter, builds the project with the help of Puppet on maven. Then\n                puppet sends war/jar to Jenkins for test and test will be monitored by Zabbix.<br/>\n                <img className={'center-horizontally-relative'} src={mavenEmbedded} alt={'embed maven'}/>\n            </p>\n        </Frame>\n    )\n}\n\nfunction getSettings() {\n    return (\n        <Frame title={'Settings.xml'}>\n            <Xml>\n                {`\n                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <!--\n                 | This is the configuration file for Maven. It can be specified at two levels:\n                 |\n                 |  1. User Level. This settings.xml file provides configuration for a single user,\n                 |                 and is normally provided in $\\{user.home}/.m2/settings.xml.\n                 |\n                 |                 NOTE: This location can be overridden with the CLI option:\n                 |\n                 |                 -s /path/to/user/settings.xml\n                 |\n                 |  2. Global Level. This settings.xml file provides configuration for all Maven\n                 |                 users on a machine (assuming they're all using the same Maven\n                 |                 installation). It's normally provided in\n                 |                 $\\{maven.conf}/settings.xml.\n                 |\n                 |                 NOTE: This location can be overridden with the CLI option:\n                 |\n                 |                 -gs /path/to/global/settings.xml\n                 |\n                 | The sections in this sample file are intended to give you a running start at\n                 | getting the most out of your Maven installation. Where appropriate, the default\n                 | values (values used when the setting is not specified) are provided.\n                 |\n                 |-->\n                <settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n                          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n                    <!-- localRepository\n                     | The path to the local repository maven will use to store artifacts.\n                     | you can define more than 1 localRepository and there is no priority among them.\n                     |\n                     | Default: $\\{user.home}/.m2/repository $\\{user.home} is taken from OS\n                    -->\n                    <localRepository>/path/to/local/repo</localRepository>\n                    <!-- interactiveMode\n                     | Maven asks question when some changes come in. It is better to make it false, so maven will do its job by itself.\n                     |\n                     | Default: true\n                    -->\n                    <interactiveMode>true</interactiveMode>\n                    <!-- offline\n                     | Determines whether maven should attempt to connect to the network when executing a build.\n                     | This will have an effect on artifact downloads, artifact deployment, and others.\n                     |\n                     | Am I allowed to use the Internet. If you want to use online policy, then you should define proxy too.\n                     |\n                     | Default: false\n                    -->\n                    <offline>false</offline>\n                    <!-- pluginGroups\n                     | maven is plugin based, So we have to define plugins for every operation.\n                     |-->\n                    <pluginGroups>\n                        <pluginGroup>com.your.plugins</pluginGroup>\n                    </pluginGroups>\n                    <!-- proxies\n                     | This is a list of proxies which can be used on this machine to connect to the network.\n                     | Unless otherwise specified (by system property or command-line switch), the first proxy\n                     | specification in this list marked as active will be used.\n                     |-->\n                    <proxies>\n                        <proxy>\n                            <id>optional</id> <!--you define this to distinguish multiple proxies-->\n                            <active>true</active> <!-- enabled or not -->\n                            <protocol>http</protocol>\n                            <username>proxyuser</username>\n                            <password>proxypass</password>\n                            <host>proxy.host.net</host><!--there are often more than 1 host. separate them with '|' character-->\n                            <port>80</port>\n                            <nonProxyHosts>local.net|some.host.com\n                            </nonProxyHosts> <!-- usually, some parts of a proxy is free and doesn't need any username & password. This one is for them -->\n                        </proxy>\n                    </proxies>\n                    <!-- servers\n                     | This is a list of authentication profiles, keyed by the server-id used within the system.\n                     | Authentication profiles can be used whenever maven must make a connection to a remote server.\n                     |-->\n                    <servers>\n                        <!-- server\n                         | Specifies the authentication information to use when connecting to a particular server, identified by\n                         | a unique name within the system (referred to by the 'id' attribute below).\n                         |\n                         | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are\n                         |       used together.\n                         |\n                         -->\n                        <server>\n                            <id>deploymentRepo</id>\n                            <!-- use username & password or key & passphrase-->\n                            <username>repouser</username>\n                            <password>repopwd</password>\n                            <!--\n                            | If you are not willing to leave the setting file plain, you can hash your username & password and put that into another file\n                            | mvn -emp yourPassword -> returns a hash code\n                            | you must create a file named settings-security.xml under .m2. Go to next node.\n                            -->\n                            <privateKey>/path/to/private/key</privateKey> <!-- private/public key which you have for system-->\n                            <passphrase>optional; leave empty if not used.</passphrase>\n                            <filePermissions></filePermissions> <!-- the permission to create files on server-->\n                            <directoryPermissions></directoryPermissions> <!-- like above for directory -->\n                        </server>\n                    </servers>\n                    <!-- this part must be written in setting-security.xml file not here!!!\n                     | create <settings> node just like above:\n                     -->\n                    <settingsSecurity>\n                        <master>\n                            <!-- hashcode created by npm -emp -->\n                        </master>\n                    </settingsSecurity>\n                    <!-- this part must be written in setting-security.xml file not here!!! -->\n                    <mirrors>\n                        <mirror>\n                            <id>mirrorId</id> <!-- must be unique -->\n                            <mirrorOf>repositoryId</mirrorOf> <!-- this is mirror of which server -->\n                            <name>Human Readable Name for this Mirror.</name>\n                            <url>http://my.repository.com/repo/path</url>\n                            <layout>default</layout> <!-- no details yet in maven -->\n                            <mirrorOfLayouts>default | legacy</mirrorOfLayouts> <!-- no details yet in maven. Use default -->\n                        </mirror>\n                    </mirrors>\n                    <!-- profiles\n                     | We use profile to set environmental for your production. For example develop and test\n                     |\n                     |-->\n                    <profiles>\n                        <profile>\n                            <id>jdk-1.4</id>\n                            <!-- we speak about OS settings... -->\n                            <activation>\n                                <jdk>1.4</jdk> <!-- which jdk is used -->\n                            </activation>\n                            <properties/><!-- a property file (key:value) -->\n                            <pluginRepositories></pluginRepositories> <!-- plugins which are useful for this profile-->\n                            <repositories> <!-- if you want to use Nexus,-→ you must have defined it here-->\n                                <repository>\n                                    <id>jdk14</id>\n                                    <name>Repository for JDK 1.4 builds</name>\n                                    <url>http://www.myhost.com/maven/jdk14</url>\n                                    <layout>default</layout>\n                                    <snapshotPolicy>always</snapshotPolicy>\n                                </repository>\n                            </repositories>\n                        </profile>\n                        <!--\n                         | Here is another profile, activated by the system property 'target-env' with a value of 'dev',\n                         | which provides a specific path to the Tomcat instance. To use this, your plugin configuration\n                         | might hypothetically look like:\n                         |\n                         | ...\n                         | <plugin>\n                         |   <groupId>org.myco.myplugins</groupId>\n                         |   <artifactId>myplugin</artifactId>\n                         |\n                         |   <configuration>\n                         |     <tomcatLocation>$\\{tomcatPath}</tomcatLocation>\n                         |   </configuration>\n                         | </plugin>\n                         | ...\n                         |\n                         | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to\n                         |       anything, you could just leave off the <value/> inside the activation-property.\n                         |\n                        <profile>\n                          <id>env-dev</id>\n                          <activation>\n                            <property>\n                              <name>target-env</name>\n                              <value>dev</value>\n                            </property>\n                          </activation>\n                          <properties>\n                            <tomcatPath>/path/to/tomcat/instance</tomcatPath>\n                          </properties>\n                        </profile>\n                        -->\n                    </profiles>\n                    <!-- activeProfiles\n                     | List of profiles that are active for all builds.\n                     |\n                    <activeProfiles>\n                      <activeProfile>alwaysActiveProfile</activeProfile>\n                      <activeProfile>anotherAlwaysActiveProfile</activeProfile>\n                    </activeProfiles>\n                    -->\n                </settings>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getProjectStructure() {\n    return (\n        <Frame title={'Project structure'}>\n            <InfoIcon>\n                <p>\n                    Project assembling: Creating project structure is called assembling.\n                </p>\n                We should determine the structure of the project first. To do that, there are some predefined arch-types\n                (\n                <span\n                    className={'purple'}>An arch-type is responsible to assemble the project and manipulates pom file</span>).<br/>\n                <p>\n                    maven uses two major repository: repo.mavne.apache.org and uk.maven.org. If you are willing to\n                    upload your project in that repository, its name must be unique. To reach this goal we should follow\n                    (GroupName,ProjectName,Version) pattern.\n                </p>\n            </InfoIcon>\n            <div className={'float-holder'} style={{minWidth: '700px'}}>\n                <GenericCode title={''}>{`\n                .\n                ├── pom.xml //1\n                └── src\n                    ├── LICENSE.txt //2\n                    ├── main\n                    │   ├── config //3\n                    │   ├── db //4\n                    │   ├── java //5\n                    │   │   └── sourcePackages\n                    │   ├── resources\n                    │   │   └── META-INF\n                    │   ├── scripts //6\n                    │   └── webapp\n                    │       └── WEB-INF //7\n                    │           └── web.xml\n                    ├── NOTICE.txt //8\n                    ├── README.txt //9\n                    ├── site //10\n                    └── test\n                        ├── java\n                        └── resources\n                `}\n                </GenericCode>\n                <Bullet title={'1.'}>This is the heart of maven structure</Bullet>\n                <Bullet title={'2.'}>Talk about license here</Bullet>\n                <Bullet title={'3.'}>e.x: tomcat context files or mail server configs. This dir must not included in\n                    artifact</Bullet>\n                <Bullet title={'4.'}>DB info. SQL scripts are important</Bullet>\n                <Bullet title={'5.'}>Source code goes here</Bullet>\n                <Bullet title={'6.'}>Everything about system administration or things that a developer may need or OS\n                    environmental things.</Bullet>\n                <Bullet title={'7.'}>Window is able to recognize this dir in small and capital cases, but Linux accepts\n                    only capital case. Previously, all configs were going here, but now we almost use @, but never lose\n                    this dir. Some times it comes handy. After compile, classes dir will be created under this dir and\n                    .class files are located here.</Bullet>\n                <Bullet title={'8.'}>Notices goes here</Bullet>\n                <Bullet title={'9.'}>Instruction Information</Bullet>\n                <Bullet title={'10.'}>Images and any thing necessary for build</Bullet>\n            </div>\n        </Frame>\n    )\n}\n\nfunction getPomStructure() {\n    return (\n        <Frame title={'Pom.xml structure'}>\n            <InfoIcon>\n                <Blue>To declare a variable inside pom file:</Blue>\n                <Xml>\n                    {`\n                    <properties>\n                        <mysql.version>8.0.22</mysql.version>\n                    </properties>\n                    \n                    <someOtherNode>$\\{mysql.version}</someOtherNode>\n                    `}\n                </Xml>\n                <p>\n                    <Blue>Scope is declared to determine target place of dependency</Blue><br/>\n                    <span className={'purple'}>Compile:</span> build, test, run<br/>\n                    <span className={'purple'}>Provided:</span> build, test, run, !artifact<br/>\n                    <span className={'purple'}>Runtime:</span> artifact<br/>\n                    <span className={'purple'}>System:</span> like provided but is hardcoded in system in another\n                    path<br/>\n                    <span className={'purple'}>Test:</span> test, !artifact<br/>\n                </p>\n            </InfoIcon>\n            <Important>It is possible to put {`<dependencies/>`} in project node instead of profile. By this way, please\n                notice that it may cause some trouble if you address a dependency from your computer, then others will\n                fail to load that dependency. So it is recommended to put your desired depenedencies inside your own\n                profile node</Important>\n            <GenericCode>\n                {`\n                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n                         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n                    <modelVersion>4.0.0</modelVersion>\n                \n                    <!-- this part must be unique →\n                    <!-- version: MajorVersion.MinorVersion.IncrementalVersion-qualifier(RC,alpha,beta,SNAPSHOT) →\n                    <!-- version.SNAPSHOT: it means that the project is under develop and is not stable, so maven downloads it on each sync cmd. -->\n                    <groupId>your company name/domain</groupId>\n                    <artifactId>project</artifactId>\n                    <version>1.0-SNAPSHOT</version>\n                   \n                    <packaging>jar</packaging> <!-- output package type-->\n                    <name>start with maven</name> <!-- the name of generated document -->\n                    <url>http://www.arash.softwares.com</url> <!-- the target URL which we want to send the document →\n                \n                    <!-- some information about developers -->\n                    <developers>\n                        <developer>\n                            <id>myId</id>\n                            <name>Arash Rezaie</name>\n                            <email>arash.re.12@gmail.com</email>\n                            <properties>\n                                <active>true</active>\n                            </properties>\n                        </developer>\n                    </developers>\n                \n                    <!-- you can define any variable here and it can be a new one or builtin.Ref: $\\{propertyName} -->\n                    <properties>\n                        <mysql.version>8.0.22</mysql.version>\n                    </properties>\n                \n                    <profiles>\n                        <profile>\n                            <id>develop</id>\n                            <activation>\n                                <!-- address a file indide project -->\n                                <file>\n                                    <exists>/src/main/lib.jar</exists>\n                                </file>\n                            </activation>\n                            <dependencies>\n                                <dependency>\n                                    <groupId>mysql</groupId>\n                                    <artifactId>mysql-connector-java</artifactId>\n                                    <version>$\\{mysql.version}</version>\n                                    <scope>compile</scope>\n                                    <exclusions>\n                                        <!-- We can exclude some lib in a scope to avoid conflict -->\n                                        <exclusion>\n                                            <groupId></groupId>\n                                            <artifactId></artifactId>\n                                        </exclusion>\n                                    </exclusions>\n                                </dependency>\n                                <dependency>\n                                    <!-- address a file in your system like this -->\n                                    <systemPath>local address</systemPath>\n                                </dependency>\n                            </dependencies>\n                        </profile>\n                    </profiles>\n                </project>\n                `}\n            </GenericCode>\n        </Frame>\n    )\n}\n\nfunction getLifecycle() {\n    return (\n        <Frame title={'Lifecycle'}>\n            Every operation in Maven executes by a plugin. One lifecycle includes some stages and each stage has some\n            goals to be passed one after the other to conclude the lifecycle.<br/>\n            There is an order to pass all phases,It stars from phase1.goal1, then phase1.goal2, ... till the end. So,\n            all prerequisite phases must be passed to execute an special stage<br/>\n            <img className={'center-horizontally-relative'} src={mavenLifecycle} alt={'maven lifecycle'}/>\n            <p>\n                Running stages:<br/>\n                <span className={'purple'}>mvn plugin</span><br/>\n                <span className={'purple'}>mvn plugin:goal</span><br/>\n                <span className={'blue'}>mvn compiler:compile</span><br/>\n                <br/>\n                Show what plugin does:<br/>\n                <span className={'blue'}>mvn help:describe -Dplugin=compiler</span><br/>\n            </p>\n        </Frame>\n    )\n}\n\nfunction getMultiModule() {\n    return (\n        <Frame title={'Multi-Module'}>\n            We have to separate a project into multiple subprojects, so a team will be able to develop the project at\n            the same time without breaking the code of others.<br/>\n            A multi-module project consists of multiple maven project, then we link them together and compile the root\n            project.<br/>\n            <img src={multiModule} alt={'multi-module project structure'}\n                 className={'center-horizontally-relative'}/><br/>\n            <GenericCode title={'project assembly'}>\n                {`\n                .\n                ├── config\n                ├── db\n                ├── LICENSE.txt\n                ├── maventest.iml\n                ├── NOTICE.txt\n                ├── persistence //module persistence\n                │   ├── main\n                │   │   ├── java\n                │   │   │   ├── com\n                │   │   │   │   └── arash\n                │   │   │   │       ├── Main.java\n                │   │   │   │       └── model\n                │   │   │   └── META-INF\n                │   │   └── resources\n                │   │       └── META-INF\n                │   ├── pom.xml //module pom file\n                │   ├── target\n                │   │   ├── maven-archiver\n                │   │   │   └── pom.properties\n                │   │   └── persistence.jar\n                │   └── test\n                │       ├── java\n                │       └── resources\n                ├── pom.xml  //main pom file\n                ├── README.txt\n                ├── scripts\n                ├── services //module services\n                │   ├── main\n                │   │   ├── java\n                │   │   │   ├── com\n                │   │   │   │   └── arash\n                │   │   │   │       └── Main.java\n                │   │   │   └── META-INF\n                │   │   └── resources\n                │   │       └── META-INF\n                │   ├── pom.xml //module pom file\n                │   ├── target\n                │   │   ├── maven-archiver\n                │   │   │   └── pom.properties\n                │   │   └── services.jar\n                │   └── test\n                │       ├── java\n                │       └── resources\n                ├── site\n                └── webapp\n                    └── WEB-INF\n                        └── web.xml\n                `}\n            </GenericCode>\n\n            <div className={'flex-row'}>\n                <Xml description={'Parent pom file'}>\n                    {`\n                <groupId>com.arash</groupId>\n                <artifactId>web</artifactId>\n                <version>1.0-SNAPSHOT</version>\n                <name>parent multi module</name>\n                \n                <!-- packaging must be pom -->\n                <packaging>pom</packaging>\n                \n                <!-- children must be defined in modules node, so main project becomes aware of them -->\n                <modules>\n                    <module>services</module>\n                    <module>persistence</module>\n                </modules>\n                \n                <properties>\n                    <mysql.version>8.0.22</mysql.version>\n                </properties>\n                <profiles>\n                    <profile>\n                        <id>develop</id>\n                        <build>\n                            <plugins>\n                                <plugin>\n                                    <groupId>org.apache.maven.plugins</groupId>\n                                    <artifactId>maven-compiler-plugin</artifactId>\n                                    <version>3.8.1</version>\n                                    <configuration>\n                                        <source>1.8</source>\n                                        <target>1.8</target>\n                                    </configuration>\n                                </plugin>\n                            </plugins>\n                        </build>\n                    </profile>\n                </profiles>\n                `}\n                </Xml>\n                <Xml description={'Child pom file'}>\n                    {`\n                <artifactId>services</artifactId>\n                <version>1.0-SNAPSHOT</version>\n                <name>child module service</name>\n                <packaging>jar</packaging>\n                \n                <!-- introduce main parent -->\n                <parent>\n                    <groupId>com.arash</groupId>\n                    <artifactId>web</artifactId>\n                    <version>1.0-SNAPSHOT</version>\n                </parent>\n                \n                <dependencies>\n                    <dependency>\n                        <groupId>com.arash</groupId>\n                        <artifactId>persistence</artifactId>\n                        <version>1.0-SNAPSHOT</version>\n                    </dependency>\n                </dependencies>\n                <build>\n                    <!-- parent name will be replaced if you drop this one -->\n                    <finalName>services</finalName>\n                </build>\n                `}\n                </Xml>\n            </div>\n        </Frame>\n    )\n}"]},"metadata":{},"sourceType":"module"}