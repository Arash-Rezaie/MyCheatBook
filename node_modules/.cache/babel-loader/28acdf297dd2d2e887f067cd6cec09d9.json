{"ast":null,"code":"import { Shape } from \"./shape\";\nimport { Utils } from \"../../../tools/utils\";\nimport { Text } from \"./text\";\nexport class Line extends Shape {\n  constructor() {\n    super();\n    this.setStrokeWidth(1);\n  }\n  /**\n   * @param shape1 shape 1\n   * @param shape2 shape 2\n   * @param gap the gap between line and target shapes. gap>=0\n   */\n\n\n  between(shape1, shape2, gap = 0) {\n    try {\n      let c1 = shape1.getCenterPoint();\n      let c2 = shape2.getCenterPoint();\n      c1 = shape1.getExternalPoint(Utils.getAngle(c1[0], c1[1], c2[0], c2[1]), gap);\n      c2 = shape2.getExternalPoint(Utils.getAngle(c2[0], c2[1], c1[0], c1[1]), gap);\n      this.setPosition(c1);\n      this.lineTo(c2);\n      return this;\n    } catch (e) {\n      debugger;\n    }\n  }\n  /**\n   * @param point [x,y] or [intR, length] for radian or [intD, length] for degree\n   */\n\n\n  lineTo(point) {\n    if (typeof point[0] === 'string') {\n      let i = point[0].length - 1;\n      let c = point[0][i];\n      let v = Number(point[0].substring(0, i));\n\n      if (c === 'R' || c === 'r') {\n        this.secondP = this.getTargetPoint(v, point[1]);\n      } else if (c === 'D' || c === 'd') {\n        this.secondP = this.getTargetPoint(Utils.deg2Rad(v), point[1]);\n      } else {\n        throw new Error('wrong input');\n      }\n    } else {\n      this.secondP = point;\n    }\n\n    return this;\n  }\n\n  getTargetPoint(r, d) {\n    let p = this.getPosition();\n    return [p[0] + Math.cos(r) * d, p[1] + Math.sin(r) * d];\n  }\n\n  getCenterPoint() {\n    let p = this.getPosition();\n    return [(p[0] + this.secondP[0]) / 2, (p[1] + this.secondP[1]) / 2];\n  }\n  /**\n   * show arrows on the line\n   * @param direction 0 or 1\n   * @param places array of float values, each is 0 - 1;\n   * @return Shape\n   */\n\n\n  showArrow(direction, places) {\n    this.direction = direction;\n    this.places = places;\n    return this;\n  }\n\n  drawArrow(canvasCtx, length, angle, x, y) {\n    canvasCtx.beginPath();\n    let p1 = [x + length * Math.cos(angle - Utils._PI6), y + length * Math.sin(angle - Utils._PI6)];\n    let p2 = [x + length * Math.cos(angle + Utils._PI6), y + length * Math.sin(angle + Utils._PI6)];\n    canvasCtx.moveTo(x, y);\n    canvasCtx.lineTo(p1[0], p1[1]);\n    canvasCtx.lineTo(p2[0], p2[1]);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n  render(canvasCtx) {\n    let p1 = this.getPosition();\n    canvasCtx.beginPath();\n    canvasCtx.moveTo(p1[0], p1[1]);\n    canvasCtx.lineTo(this.secondP[0], this.secondP[1]);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n\n    if (this.direction !== undefined && this.places !== undefined) {\n      if (!this.places[0]) this.places = [this.places];\n      let angle = this.direction ? Utils.getAngle(this.secondP[0], this.secondP[1], p1[0], p1[1]) : Utils.getAngle(p1[0], p1[1], this.secondP[0], this.secondP[1]);\n\n      for (let i = 0; i < this.places.length; i++) {\n        let x = p1[0] + (this.secondP[0] - p1[0]) * this.places[i];\n        let y = p1[1] + (this.secondP[1] - p1[1]) * this.places[i];\n        this.drawArrow(canvasCtx, 10, angle, x, y);\n      }\n    }\n  }\n\n}\nexport class HLine extends Line {\n  setLength(l) {\n    l > 0 ? this.lineTo(['0D', l]) : this.lineTo(['180D', -l]);\n    return this;\n  }\n\n}\nexport class VLine extends Line {\n  setLength(l) {\n    l > 0 ? this.lineTo(['90D', l]) : this.lineTo(['270D', -l]);\n    return this;\n  }\n\n}\nexport class Vector extends Line {\n  constructor() {\n    super();\n    this.setStrokeColor('black').setFillColor('black').setStrokeWidth(2).showArrow(1, 1);\n  }\n\n}\nexport class HVector extends Vector {\n  setLabel(label) {\n    if (typeof label === 'string') label = new Text().setPosition(this.getCenterPoint()).setLabel(label).setOffset([0, -6]).setFontStyle('');\n    return super.setLabel(label);\n  }\n\n  setLength(l) {\n    return l > 0 ? this.lineTo(['0D', l]) : this.lineTo(['180D', -l]);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/line.js"],"names":["Shape","Utils","Text","Line","constructor","setStrokeWidth","between","shape1","shape2","gap","c1","getCenterPoint","c2","getExternalPoint","getAngle","setPosition","lineTo","e","point","i","length","c","v","Number","substring","secondP","getTargetPoint","deg2Rad","Error","r","d","p","getPosition","Math","cos","sin","showArrow","direction","places","drawArrow","canvasCtx","angle","x","y","beginPath","p1","_PI6","p2","moveTo","closePath","render","undefined","HLine","setLength","l","VLine","Vector","setStrokeColor","setFillColor","HVector","setLabel","label","setOffset","setFontStyle"],"mappings":"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","sourcesContent":["import {Shape} from \"./shape\";\nimport {Utils} from \"../../../tools/utils\";\nimport {Text} from \"./text\";\n\nexport class Line extends Shape {\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n    }\n\n    /**\n     * @param shape1 shape 1\n     * @param shape2 shape 2\n     * @param gap the gap between line and target shapes. gap>=0\n     */\n    between(shape1, shape2, gap = 0) {\n        try {\n            let c1 = shape1.getCenterPoint();\n            let c2 = shape2.getCenterPoint();\n            c1 = shape1.getExternalPoint(Utils.getAngle(c1[0], c1[1], c2[0], c2[1]), gap);\n            c2 = shape2.getExternalPoint(Utils.getAngle(c2[0], c2[1], c1[0], c1[1]), gap);\n            this.setPosition(c1);\n            this.lineTo(c2);\n            return this;\n        }catch (e){\n            debugger\n        }\n    }\n\n    /**\n     * @param point [x,y] or [intR, length] for radian or [intD, length] for degree\n     */\n    lineTo(point) {\n        if (typeof point[0] === 'string') {\n            let i = point[0].length - 1;\n            let c = point[0][i];\n            let v = Number(point[0].substring(0, i));\n            if (c === 'R' || c === 'r') {\n                this.secondP = this.getTargetPoint(v, point[1]);\n            } else if (c === 'D' || c === 'd') {\n                this.secondP = this.getTargetPoint(Utils.deg2Rad(v), point[1]);\n            } else {\n                throw new Error('wrong input');\n            }\n        } else {\n            this.secondP = point;\n        }\n        return this;\n    }\n\n    getTargetPoint(r, d) {\n        let p = this.getPosition();\n        return [p[0] + Math.cos(r) * d, p[1] + Math.sin(r) * d];\n    }\n\n    getCenterPoint() {\n        let p = this.getPosition();\n        return [(p[0] + this.secondP[0]) / 2, (p[1] + this.secondP[1]) / 2]\n    }\n\n    /**\n     * show arrows on the line\n     * @param direction 0 or 1\n     * @param places array of float values, each is 0 - 1;\n     * @return Shape\n     */\n    showArrow(direction, places) {\n        this.direction = direction;\n        this.places = places;\n        return this;\n    }\n\n    drawArrow(canvasCtx, length, angle, x, y) {\n        canvasCtx.beginPath();\n        let p1 = [x + length * Math.cos(angle - Utils._PI6), y + length * Math.sin(angle - Utils._PI6)];\n        let p2 = [x + length * Math.cos(angle + Utils._PI6), y + length * Math.sin(angle + Utils._PI6)];\n        canvasCtx.moveTo(x, y);\n        canvasCtx.lineTo(p1[0], p1[1]);\n        canvasCtx.lineTo(p2[0], p2[1]);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n\n    render(canvasCtx) {\n        let p1 = this.getPosition();\n        canvasCtx.beginPath();\n        canvasCtx.moveTo(p1[0], p1[1]);\n        canvasCtx.lineTo(this.secondP[0], this.secondP[1]);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n        if (this.direction !== undefined && this.places !== undefined) {\n            if (!this.places[0])\n                this.places = [this.places];\n            let angle = this.direction ? Utils.getAngle(this.secondP[0], this.secondP[1], p1[0], p1[1]) : Utils.getAngle(p1[0], p1[1], this.secondP[0], this.secondP[1]);\n            for (let i = 0; i < this.places.length; i++) {\n                let x = p1[0] + (this.secondP[0] - p1[0]) * this.places[i];\n                let y = p1[1] + (this.secondP[1] - p1[1]) * this.places[i];\n                this.drawArrow(canvasCtx, 10, angle, x, y);\n            }\n        }\n    }\n}\n\nexport class HLine extends Line {\n    setLength(l) {\n        l > 0 ?\n            this.lineTo(['0D', l]) :\n            this.lineTo(['180D', -l])\n        return this;\n    }\n}\n\nexport class VLine extends Line {\n    setLength(l) {\n        l > 0 ?\n            this.lineTo(['90D', l]) :\n            this.lineTo(['270D', -l])\n        return this;\n    }\n}\n\nexport class Vector extends Line {\n    constructor() {\n        super();\n        this.setStrokeColor('black')\n            .setFillColor('black')\n            .setStrokeWidth(2)\n            .showArrow(1, 1);\n    }\n}\n\nexport class HVector extends Vector {\n    setLabel(label) {\n        if (typeof label === 'string')\n            label = new Text()\n                .setPosition(this.getCenterPoint())\n                .setLabel(label)\n                .setOffset([0, -6])\n                .setFontStyle('');\n        return super.setLabel(label);\n    }\n\n    setLength(l) {\n        return (l > 0) ?\n            this.lineTo(['0D', l]) :\n            this.lineTo(['180D', -l])\n    }\n}"]},"metadata":{},"sourceType":"module"}