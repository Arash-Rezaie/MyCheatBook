{"ast":null,"code":"import _defineProperty from\"/media/arash/usb_stick/my-cheat-book/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import React from\"react\";import{Bash,Frame,GenericCode,Java,Xml}from\"../../../components/blocks\";import{InfoIcon}from\"../../../components/bubble\";import{Blue,BlueBold,Bold,Bullet,FlexRow,Highlight,HorizontalLine,Important,Purple,Red}from\"../../../components/components\";import{Float}from\"../../../components/float\";import appContext from'../../../res/images/ApplicationContext.png';import circularDependency from\"../../../res/images/circular-dependency.png\";import beanLifecycle from\"../../../res/images/bean-life-cycle.png\";import components from\"../../../res/images/components.png\";export function CoreCheats(){return/*#__PURE__*/_jsxs(_Fragment,{children:[getBeanContainer(),getScanningFilter(),getMerging(),getProfile(),getMultipleCandidate(),getXmlBasic(),getAnnotationBasic(),getAlias(),getPrivateConstructor(),getXmlLocalClass(),getAnnotationLocalClass(),getXmlCircularDependencies(),getAnnotationCircularDependencies(),getXmlLoadFromFile(),getJavaLoadFromFile(),getXmlChangingMethodBody(),getCollections(),getSpel(),getScopes(),getScopeIssue(),getBeanAware(),getTemplateClass(),getEvent()]});}function getBeanContainer(){var _jsxs2;return/*#__PURE__*/_jsxs(Frame,{title:'Catching bean',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsxs(Important,{children:[\"!the path in which we put java source and resource files is called ClassPath. It also can hold resources too.\",/*#__PURE__*/_jsx(\"br\",{})]}),\"This is why, we use ClassPathXmlResource class to bring in our desired configuration file.\",/*#__PURE__*/_jsx(\"br\",{}),\"Every thing under main dir is called ClassPath, so test is out of that.\"]}),/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Java,{description:'using BeanFactory is deprecated',children:\"\\n                    ClassPathResource resource = new ClassPathResource(\\\"containerconfig.xml\\\");\\n                    BeanFactory beanFactory = new XmlBeanFactory(resource);\\n                    return beanFactory.getBean(\\\"targetId\\\");\\n                    \"}),/*#__PURE__*/_jsx(Java,{description:'new fasion',children:\"\\n                    ApplicationContext context = new ClassPathXmlApplicationContext(\\\"containerconfig.xml\\\");\\n                    return (Car) context.getBean(\\\"car\\\");\"})]}),/*#__PURE__*/_jsx(Important,{children:\"ApplicationContext provides multiple configuration file registration.\"}),/*#__PURE__*/_jsxs(\"div\",(_jsxs2={className:'float-holder'},_defineProperty(_jsxs2,\"className\",'center-horizontally-relative inline'),_defineProperty(_jsxs2,\"children\",[/*#__PURE__*/_jsx(\"img\",{src:appContext,alt:'application context implementations',style:{width:'1200px'}}),/*#__PURE__*/_jsx(Float,{l:1000,t:180,lineTo:[1072,262],children:/*#__PURE__*/_jsx(\"div\",{style:{width:'190px'},children:\"To fetch xml configuration from a file inside the application itself\"})}),/*#__PURE__*/_jsx(Float,{l:850,t:120,lineTo:[835,262],children:/*#__PURE__*/_jsx(\"div\",{style:{width:'260px'},children:\"To read xml configuration from a file system. Path must be relative\"})}),/*#__PURE__*/_jsx(Float,{l:890,t:362,lineTo:[873,364],children:/*#__PURE__*/_jsx(\"div\",{style:{width:'300px'},children:\"To read configuration from groovy file\"})}),/*#__PURE__*/_jsx(Float,{l:250,t:362,lineTo:[625,365],children:/*#__PURE__*/_jsx(\"div\",{style:{width:'300px'},children:\"To configure beans by annotations\"})}),/*#__PURE__*/_jsx(Float,{l:10,t:260,lineTo:[383,330],children:/*#__PURE__*/_jsx(\"div\",{style:{width:'350px'},children:\"To setup features via programmatic registration, rather than reading bean definitions from external configuration sources. Mainly useful for testing\"})})]),_jsxs2)),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"Configuration file is due to determine instantiating mechanism.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Blue,{children:\"How to provide configuration file:\"}),/*#__PURE__*/_jsxs(Bullet,{title:'1.',children:[\"XML based configuration: provide a xml file to define instantiation mechanism. We name it \\\"containerconfix.xml\\\" in here:\",/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n                    <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\"\\n                           xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n                           xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\">\\n                    \\n                        <bean id=\\\"bean1\\\" class=\\\"Bean1\\\"/>\\n                    </beans>\"}),/*#__PURE__*/_jsx(Java,{children:\"\\n                    public static void main(String[] args){\\n                        ApplicationContext context = new ClassPathXmlApplicationContext(\\\"containerconfig.xml\\\");\\n                        Bean1 bean1 = context.getBean(\\\"bean1\\\");\\n                    }\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'2.',children:[\"Java based configuration:\",/*#__PURE__*/_jsx(Java,{children:\"\\n                    /* provide a class to create instances and annotate it with @Configuration */\\n                    @Configuration\\n                    public class AppConfig {\\n                    \\n                        @Bean\\n                        public Bean1 getBean1(){\\n                            return new Bean1();\\n                        }\\n                    }\\n                    \\n                    public static void main(String[] args){\\n                        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\\n                        context.register(AppConfig.class);\\n                        context.refresh();\\n                        \\n                        Bean1 bean1 = context.getBean(Bean1.class);\\n                    }\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'3.',children:[\"Annotation based configuration:\",/*#__PURE__*/_jsx(\"br\",{}),\"Using annotation instead of direct java codes such as \",/*#__PURE__*/_jsx(Bold,{children:\"@Component\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"@Repository\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"@Service\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"@Configuration\"}),\",\",/*#__PURE__*/_jsx(Bold,{children:\"@Controller\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Then we should aware spring of these classes by \",/*#__PURE__*/_jsx(Bold,{children:\"@ComponentScan\"}),/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Java,{children:\"\\n                        @Configuration\\n                        @ComponentScan(\\\"com.arash\\\")\\n                        public class AppConfig {\\n                        }\\n                        \\n                        /* bean class */\\n                        @Component\\n                        public class Bean1 {\\n                        }\\n                        \\n                        /* catching bean */\\n                        public static void main(String[] args){\\n                            AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\\n                            context.register(AppConfig.class);\\n                            context.refresh();\\n                            \\n                            Bean1 bean1 = context.getBean(Bean1.class);\\n                        }\\n                        \"}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"img\",{src:components,alt:'Component hierarchy'})})]})]})]});}function getScanningFilter(){return/*#__PURE__*/_jsxs(Frame,{title:'Filtering through component scan',children:[\"It is wise to exclude unwanted classes from being scanned by spring.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Java,{title:1,children:\"\\n                @Configuration\\n                /*\\n                 * type = FilterType.REGEX\\n                 * type = FilterType.ANNOTATION\\n                 * type = FilterType.ASPECTJ\\n                 * type = FilterType.ASSIGNABLE_TYPE\\n                 * type = FilterType.CUSTOM\\n                 */\\n                @ComponentScan(basePackages = \\\"com\\\", includeFilters = {\\n                @ComponentScan.Filter(type = FilterType.REGEX, pattern = \\\"*.*spring.obje*\\\"),\\n                    @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = MyAnnotation.class),\\n                    @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = Person.class)\\n                })\\n                public class AppConfig {\\n                }\"}),/*#__PURE__*/_jsx(Xml,{title:1,children:\"\\n                <beans ...>\\n                    <context:component-scan base-package=\\\"com\\\">\\n                        <context:include-filter type=\\\"regex\\\" expression=\\\"soWhat*\\\"/>\\n                        <context:include-filter type=\\\"annotation\\\" expression=\\\"com.arash.models.common.MyAnnotation\\\"/>\\n                    </context:component-scan>\\n                </beans>\\n                \"})]});}function getXmlBasic(){return/*#__PURE__*/_jsxs(Frame,{title:'Passing arguments in xml',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[\"Catching data source for mysql sample:\",/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <bean id=\\\"dataSource\\\" class=\\\"org.apache.commons.dbcp2.BasicDataSource\\\">\\n                        <property name=\\\"username\\\" value=\\\"root\\\"/>\\n                        <property name=\\\"password\\\" value=\\\"\\\"/>\\n                        <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/spring\\\"/>\\n                    </bean>\"})]}),\"Passing arguments through xml configuration file is available via constructor and setters.\",/*#__PURE__*/_jsx(Java,{children:\"\\n                public class Car {\\n                    private String name;\\n                    private int color;\\n                \\n                    public Car(String name, int color) {\\n                        this.name = name;\\n                        this.color = color;\\n                    }\\n                }\\n                \\n                public class Person {\\n                    private String name;\\n                    private String email;\\n                    private int age;\\n                    private int hairColor;\\n                    private Car car;\\n                \\n                    public Person(String name, String email, int age) {\\n                        this.name = name;\\n                        this.email = email;\\n                        this.age = age;\\n                    }\\n                \\n                    public void setHairColor(int hairColor) {\\n                        this.hairColor = hairColor;\\n                    }\\n                    \\n                    public void setCar(Car car) {\\n                        this.car = car;\\n                    }\\n                }\\n                \"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                <bean id=\\\"car\\\" class=\\\"com.arash.models.multiconfigfiles.Car\\\">\\n                    <constructor-arg value=\\\"ford\\\"/>\\n                    <constructor-arg value=\\\"-16711936\\\"/>\\n                </bean>\\n            \\n                <bean id=\\\"person\\\" class=\\\"com.arash.models.multiconfigfiles.Person\\\">\\n                    <!--\\n                        constructor args are sent by order by default,\\n                        but you can provide more information such as type or index\\n                    -->\\n                    <constructor-arg value=\\\"Arash\\\"/>\\n                    <constructor-arg index=\\\"1\\\" value=\\\"arash.12@gmail.com\\\"/>\\n                    <constructor-arg type=\\\"int\\\" value=\\\"33\\\"/>\\n                    \\n                    <!-- passing parameter by setter -->\\n                    <property name=\\\"hairColor\\\" value=\\\"-16777216\\\"/>\\n                    <property name=\\\"car\\\" ref=\\\"car\\\"/> <!-- sending by ref -->\\n                </bean>\\n                \"}),/*#__PURE__*/_jsx(HorizontalLine,{}),\"It is also possible to pass values to relevant field by namespace\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Highlight,{children:[\"Remember to load \",/*#__PURE__*/_jsx(Red,{children:\"xmlns:p=\\\"http://www.springframework.org/schema/p\\\"\"}),\" in header\"]}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n                    <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\"\\n                           xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n                           xmlns:p=\\\"http://www.springframework.org/schema/p\\\"\\n                           xsi:schemaLocation=\\\"\\n                                http://www.springframework.org/schema/beans\\n                                http://www.springframework.org/schema/beans/spring-beans.xsd\\\">\\n\\n                        <bean id=\\\"person2\\\" class=\\\"com.arash.models.xml.namespace.Person\\\"\\n                              p:car-ref=\\\"car\\\"\\n                              p:hairColor=\\\"-16711936\\\">\\n                            <constructor-arg value=\\\"Arash\\\"/>\\n                            <constructor-arg index=\\\"1\\\" value=\\\"arash.12@gmail.com\\\"/>\\n                            <constructor-arg type=\\\"int\\\" value=\\\"33\\\"/>\\n                        </bean>\\n                    </bean>\\n                    \"}),/*#__PURE__*/_jsx(Important,{children:\"Using property is recommended over constructor when we face \\\"circular dependency\\\" or \\\"different life length\\\"\"})]});}function getAnnotationBasic(){return/*#__PURE__*/_jsxs(Frame,{title:'Passing arguments in annotation',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(Blue,{children:\"Wiring:\"}),\" connecting objects to each other is called wiring.\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(Blue,{children:\"@Autowired\"}),\" does not work on arrays\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(Purple,{children:\"some equivalents for annotations:\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Spring\"}),/*#__PURE__*/_jsx(\"th\",{children:\"javax\"})]})}),/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"@Autowired\"}),/*#__PURE__*/_jsx(\"td\",{children:\"@Inject, @Resource\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"@Component\"}),/*#__PURE__*/_jsx(\"td\",{children:\"@Named, @ManagedBean\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"@Qualifier\"}),/*#__PURE__*/_jsx(\"td\",{children:\"@Qualifier, @Named\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"@Value\"}),/*#__PURE__*/_jsx(\"td\",{children:\"---\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"@Required\"}),/*#__PURE__*/_jsx(\"td\",{children:\"---\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"@Lazy\"}),/*#__PURE__*/_jsx(\"td\",{children:\"---\"})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"@Scope(\\u201Csingleton\\u201D)\"}),/*#__PURE__*/_jsx(\"td\",{children:\"@Singleton\"})]})]})]})]})]}),/*#__PURE__*/_jsx(Java,{children:\"\\n                @Component\\n                public class Car {\\n                    private String name;\\n                    private int color;\\n                \\n                    public Car(@Value(\\\"ford\\\") String name, @Value(\\\"-16711936\\\") int color) {\\n                        this.name = name;\\n                        this.color = color;\\n                    }\\n                }\\n                \\n                @Component\\n                public class Person {\\n                    private String name;\\n                \\n                    @Value(\\\"-16777216\\\")\\n                    private int hairColor;\\n                \\n                    @Autowired\\n                    private Car car;\\n                    \\n                    @Value(\\\"Arash\\\")\\n                    public void setName(String name){\\n                        this.name = name;\\n                    }\\n                }\\n                \"})]});}function getXmlLocalClass(){return/*#__PURE__*/_jsxs(Frame,{title:'Inner & Nested class in xml',children:[\"Instantiating nested class is easy as the class is static\",/*#__PURE__*/_jsx(Java,{children:\"\\n                    public class ParentClass {\\n                        \\n                        public static class NestedClass {\\n                        }\\n                        \\n                        public class InnerClass {\\n                        }\\n                    }\\n                    \\n                    //how to get instance in java\\n                    ParentClass parentClass = new ParentClass();\\n                    ParentClass.NestedClass nestedClass = new ParentClass.NestedClass();\\n                    ParentClass.InnerClass innerClass = pc.new InnerClass();\"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <!-- parent class: -->\\n                    <bean id=\\\"parentClass\\\" class=\\\"ParentClass\\\"/>\\n                    \\n                    <!-- creating public nested class is easy. Use '$' instead of '.' -->\\n                    <bean id=\\\"nestedClass\\\" class=\\\"ParentClass$NestedClass\\\"/>\\n                    \"}),\"Instantiating inner class is a bit more complicated as it needs its parent class instance.\",/*#__PURE__*/_jsx(\"br\",{}),\"To do that, we should hire a generator\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Bullet,{title:'1.',children:[/*#__PURE__*/_jsx(BlueBold,{children:\"factory-bean:\"}),/*#__PURE__*/_jsx(Java,{children:\"\\n                        public class ParentClass {\\n                        \\n                            public static class NestedClass {\\n                            }\\n                            \\n                            public class InnerClass {\\n                            }\\n                        }\\n                        \\n                        public class InnerClassFactory implements FactoryBean<ParentClass.InnerClass> {\\n                \\n                            @Override\\n                            public ParentClass.InnerClass getObject() throws Exception {\\n                                ApplicationContext ctx = ContextProvider.getXmlContext();\\n                                ParentClass pc = (ParentClass) ctx.getBean(\\\"parentClass\\\");\\n                                return pc.new InnerClass();\\n                            }\\n                        \\n                            @Override\\n                            public Class<?> getObjectType() {\\n                                return ParentClass.InnerClass.class;\\n                            }\\n                            \\n                            @Override\\n                            public boolean isSingleton() {\\n                                return false;\\n                            }\\n                        }\\n                        \"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                        <bean id=\\\"parentClass\\\" class=\\\"ParentClass\\\"/>\\n                                \\n                        <!-- creating InnerClass by factory bean. Factory class must implement FactoryBean -->\\n                        <bean id=\\\"innerClass\\\" class=\\\"com.arash.models.localclass.InnerClassFactory\\\">\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'2.',children:[/*#__PURE__*/_jsx(BlueBold,{children:\"factory-method:\"}),/*#__PURE__*/_jsx(Java,{children:\"\\n                        public class ParentClass {\\n                            public static class NestedClass {\\n                            }\\n                        \\n                            public class InnerClass {\\n                            }\\n                            \\n                            public InnerClass getInnerClassInstance() {\\n                                return new InnerClass();\\n                            }\\n                        }\"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                        <bean id=\\\"parentClass\\\" class=\\\"ParentClass\\\"/>\\n                        \\n                        <!-- creating InnerClass by factory method -->\\n                        <bean id=\\\"innerClass\\\" class=\\\"com.arash.models.localclass.ParentClass.InnerClass\\\"\\n                                factory-bean=\\\"parentClass\\\" factory-method=\\\"getInnerClassInstance\\\"/>\"})]})]});}function getAnnotationLocalClass(){return/*#__PURE__*/_jsx(Frame,{title:'Inner & Nested class in annotation',children:/*#__PURE__*/_jsx(Java,{children:\"\\n                @Component\\n                public class ParentClass {\\n                    @Component\\n                    public static class NestedClass {\\n                    }\\n                \\n                    @Component\\n                    public class InnerClass {\\n                    }\\n                }\\n                \\n                //usage>>>\\n                ApplicationContext ctx = ContextProvider.getAnnotaionContext();\\n                ParentClass pc = ctx.getBean(ParentClass.class);\\n                ParentClass.NestedClass nc = ctx.getBean(ParentClass.NestedClass.class);\\n                ParentClass.InnerClass ic=ctx.getBean(ParentClass.InnerClass.class);\\n                \"})});}function getAlias(){return/*#__PURE__*/_jsxs(Frame,{title:'Alias',children:[/*#__PURE__*/_jsx(Xml,{title:1,children:\"\\n                <bean id=\\\"car\\\" name=\\\"car\\\" class=\\\"com.arash.models.Car\\\"/>\\n                <alias name=\\\"car\\\" alias=\\\"automobile\\\"/>\\n                <alias name=\\\"car\\\" alias=\\\"vehicle\\\"/>\\n                \"}),/*#__PURE__*/_jsx(Java,{title:1,children:\"\\n                @Bean({\\\"car\\\", \\\"automobile\\\", \\\"vehicle\\\"})\\n                private Car getCar() {\\n                    return new Car(\\\"ford\\\", -16711936);\\n                }\"}),/*#__PURE__*/_jsx(Java,{description:'usage',children:\"\\n                ApplicationContext ctx = ContextProvider.getXmlContext();\\n                Car car = (Car) ctx.getBean(\\\"car\\\");\\n                Car car2 = (Car) ctx.getBean(\\\"automobile\\\");\\n                Car car3 = (Car) ctx.getBean(\\\"vehicle\\\");\"})]});}function getPrivateConstructor(){return/*#__PURE__*/_jsxs(Frame,{title:'Private constructor',children:[/*#__PURE__*/_jsx(Java,{children:\"\\n                public class PrivateConstructor {\\n                \\n                    private PrivateConstructor() {\\n                    }\\n                    \\n                    public static PrivateConstructor getInstance(){\\n                        return new PrivateConstructor();\\n                    }\\n                }\"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                <!-- \\n                    as spring is all about reflection, so program elements scope makes no problem.\\n                    It works pretty nice in spring 4. Also, some other ways are avaiable\\n                -->\\n                <bean id=\\\"privateConstructor\\\" class=\\\"com.arash.models.privateconstructor.PrivateConstructor\\\"/>\\n                \\n                <!-- access through static method -->\\n                <bean id=\\\"privateConstructor2\\\" class=\\\"com.arash.models.privateconstructor.PrivateConstructor\\\"\\n                    factory-method=\\\"getInstance\\\"/>\\n                \"})]});}function getXmlCircularDependencies(){return/*#__PURE__*/_jsxs(Frame,{title:'Circular dependency in xml configuration',children:[\"The problem is a set of commplicated dependencies which can not be resolved so easily.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:circularDependency,alt:'circular dependency'}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"check the following examples out:\",/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Java,{title:true,children:\"\\n                    public class Student {\\n                        private Shoes shoes;\\n        \\n                        public Student(Shoes shoes) {\\n                            this.shoes = shoes;\\n                        }\\n                    }\\n                    \\n                    public class Shoes {\\n                        private Student student;\\n                    \\n                        public Shoes(Student student) {\\n                            this.student = student;\\n                        }\\n                    }\"}),/*#__PURE__*/_jsx(Xml,{title:true,description:'this config fails',children:\"\\n                    <bean id=\\\"student\\\" class=\\\"com.arash.models.circulardep.Student\\\">\\n                        <constructor-arg ref=\\\"shoes\\\"/>\\n                    </bean>\\n                    <bean id=\\\"shoes\\\" class=\\\"com.arash.models.circulardep.Shoes\\\">\\n                        <constructor-arg ref=\\\"student\\\"/>\\n                    </bean>\\n                \"})]}),/*#__PURE__*/_jsx(HorizontalLine,{}),/*#__PURE__*/_jsx(\"span\",{className:'purple',children:\"To overcome this problem there are some suggestions:\"}),/*#__PURE__*/_jsxs(Bullet,{title:'1.',children:[\"Changing a constructor to setter\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Important,{children:\"Bean definition follows no order whilst usage order is, so this way is not recommended\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Highlight,{children:\"If you turn constructor of both mentioned classes to setter, there would be no matter with the order\"}),/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Java,{title:true,description:'use setter instead of constructor',children:\"\\n                        public class Student {\\n                            private Shoes shoes;\\n                        \\n                            public void setShoes(Shoes shoes) {\\n                                this.shoes = shoes;\\n                            }\\n                        }\\n                        \\n                        public class Shoes {\\n                            private Student student;\\n                        \\n                            public Shoes(Student student) {\\n                                this.student = student;\\n                            }\\n                        }\\n                        \\n                        ----------------------------------------------------------\\n                        \\n                        //usage\\n                        ApplicationContext ctx = ContextProvider.getXmlContext();\\n                        \\n                        //correct order\\n                        Student student = (Student) ctx.getBean(\\\"student\\\");\\n                        Shoes shoes= (Shoes) ctx.getBean(\\\"shoes\\\");\\n                        \\n                        //incorrect order\\n                        Shoes shoes= (Shoes) ctx.getBean(\\\"shoes\\\");\\n                        Student student = (Student) ctx.getBean(\\\"student\\\");\\n                        \"}),/*#__PURE__*/_jsx(Xml,{title:true,description:'one property & one constructor',children:\"\\n                        <bean id=\\\"student\\\" class=\\\"com.arash.models.circulardep.Student\\\">\\n                            <property name=\\\"shoes\\\" ref=\\\"shoes\\\"/>\\n                        </bean>\\n                        \\n                        <bean id=\\\"shoes\\\" class=\\\"com.arash.models.circulardep.Shoes\\\">\\n                            <constructor-arg ref=\\\"student\\\"/>\\n                        </bean>\"})]})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Bullet,{title:'2.',children:[\"Using lazy-init\",/*#__PURE__*/_jsx(\"br\",{}),\"By this way, we can define that which bean must be initialized on demand, therefor order problem ignored.\",/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Java,{title:true,description:'only student drops its constructor',children:\"\\n                        public class Student {\\n                            private Shoes shoes;\\n                        \\n                            public void setShoes(Shoes shoes) {\\n                                this.shoes = shoes;\\n                            }\\n                        }\\n                        \\n                        public class Shoes {\\n                            private Student student;\\n                        \\n                            public Shoes(Student student) {\\n                                this.student = student;\\n                            }\\n                        }\\n                        \"}),/*#__PURE__*/_jsx(Xml,{title:true,description:'define who has to laod at first',children:\"\\n                         <bean id=\\\"student\\\" class=\\\"com.arash.models.circulardep.Student\\\" lazy-init=\\\"false\\\">\\n                             <property name=\\\"student\\\" ref=\\\"shoes\\\"/>\\n                         </bean>\\n                        \\n                         <bean id=\\\"shoes\\\" class=\\\"com.arash.models.circulardep.Shoes\\\" lazy-init=\\\"true\\\">\\n                             <constructor-arg ref=\\\"student\\\"/>\\n                         </bean>\"})]})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Bullet,{title:'3.',children:[\"Using idref (idref is id of a bean as string, but it checks the existence of the bean)\",/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Java,{title:true,description:'save idref and init before use',children:\"\\n                        public class Student {\\n                            private String shoesId;\\n                            private Shoes shoes;\\n                        \\n                            public Student(String shoesId) {\\n                                this.shoesId = shoesId;\\n                            }\\n                        \\n                            public void init(){\\n                                ApplicationContext ctx = ContextProvider.getXmlContext();\\n                                shoes = (Shoes) ctx.getBean(shoesId);\\n                            }\\n                        }\"}),/*#__PURE__*/_jsx(Xml,{title:true,description:'pass idref insted of ref',children:\"\\n                        <bean id=\\\"student\\\" class=\\\"com.arash.models.circulardep.Student\\\">\\n                            <constructor-arg>\\n                                <idref bean=\\\"shoes\\\"/>\\n                            </constructor-arg>\\n                        </bean>\\n                        <bean id=\\\"shoes\\\" class=\\\"com.arash.models.circulardep.Shoes\\\">\\n                            <constructor-arg ref=\\\"student\\\"/>\\n                        </bean>\"})]})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Bullet,{title:'4.',children:[\"Using depends-on\",/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Java,{title:true,children:\"\\n                        public class Student {\\n                            private Shoes shoes;\\n                        \\n                            public void setShoes(Shoes shoes) {\\n                                this.shoes = shoes;\\n                            }\\n                        }\\n                        \\n                        public class Shoes {\\n                            private Student student;\\n                        \\n                            public Shoes(Student student) {\\n                                this.student = student;\\n                            }\\n                        }\\n                        \"}),/*#__PURE__*/_jsx(Xml,{title:true,description:'define who depends on who',children:\"\\n                        <bean id=\\\"student\\\" class=\\\"com.arash.models.circulardep.Student\\\">\\n                            <property name=\\\"student\\\" ref=\\\"shoes\\\"/>\\n                        </bean>\\n                    \\n                        <bean id=\\\"shoes\\\" class=\\\"com.arash.models.circulardep.Shoes\\\" depends-on=\\\"student\\\" >\\n                            <constructor-arg ref=\\\"student\\\"/>\\n                        </bean>\"})]})]})]});}function getAnnotationCircularDependencies(){return/*#__PURE__*/_jsxs(Frame,{title:'Circular dependency in annotation configuration',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsx(Blue,{children:\"@Lazy\"}),\" is available in spring too to load a programming element on demand\",/*#__PURE__*/_jsx(Java,{children:\"\\n                    @Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.FIELD})\\n                    @Retention(RetentionPolicy.RUNTIME)\\n                    @Documented\\n                    public @interface Lazy {\\n                        boolean value() default true;\\n                    }\"})]}),/*#__PURE__*/_jsx(Java,{description:'resolve both via constructor; won\\'t work',children:\"\\n                @Component\\n                public class Student {\\n                    private Shoes shoes;\\n                \\n                    public Student(@Autowired Shoes shoes) {\\n                        this.shoes = shoes;\\n                    }\\n                }\\n                \\n                @Component\\n                public class Shoes {\\n                    private Student student;\\n                \\n                    public Shoes(@Autowired Student student) {\\n                        this.student = student;\\n                    }\\n                }\"}),/*#__PURE__*/_jsx(HorizontalLine,{}),/*#__PURE__*/_jsx(Java,{description:'resolve only one via constructor; works painless',children:\"\\n                @Component\\n                public class Student {\\n                    private Shoes shoes;\\n                    \\n                     public Student(@Autowired Shoes shoes) {\\n                        this.shoes = shoes;\\n                    }\\n                }\\n                \\n                @Component\\n                public class Shoes {\\n                    @Autowired\\n                    private Student student;\\n                }\"})]});}function getXmlLoadFromFile(){return/*#__PURE__*/_jsxs(Frame,{title:'Load properties from a file in xml',children:[\"Let's have a property file containing:\",/*#__PURE__*/_jsx(GenericCode,{title:'jdbc.properties',children:\"\\n                    jdbc.driverClassName=com.mysql.jdbc.Driver\\n                    jdbc.url=jdbc:mysql://localhost:3306/concretepage\\n                    jdbc.username=root\\n                    jdbc.password=\"}),\"Now it's time to load the file\",/*#__PURE__*/_jsx(Xml,{description:'using PropertySourcesPlaceholderConfigurer class',children:\"\\n                    <bean class=\\\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\\\">\\n                        <property name=\\\"location\\\" value=\\\"jdbc.properties\\\"/>\\n                    </bean>\"}),/*#__PURE__*/_jsx(Xml,{description:'using spring itself place-holder manager',children:'<context:property-placeholder location=\"jdbc.properties\"/>'}),/*#__PURE__*/_jsx(Xml,{description:'usage',children:\"\\n                    <bean id=\\\"dataSource\\\" class=\\\"org.apache.commons.dbcp2.BasicDataSource\\\">\\n                        <property name=\\\"username\\\" value=\\\"${jdbc.username}\\\"/>\\n                        <property name=\\\"password\\\" value=\\\"${jdbc.password}\\\"/>\\n                        <property name=\\\"url\\\" value=\\\"${jdbc.url}\\\"/>\\n                        <property name=\\\"driverClassName\\\" value=\\\"${jdbc.driverClassName}\\\"/>\\n                    </bean>\"})]});}function getJavaLoadFromFile(){return/*#__PURE__*/_jsxs(Frame,{title:'Load properties from a file in annotation',children:[/*#__PURE__*/_jsxs(Bullet,{title:'1.',children:[\"Via context environment:\",/*#__PURE__*/_jsx(\"br\",{}),\"add \",/*#__PURE__*/_jsx(Blue,{children:\"@PropertySource\"}),\" to your configuration class and catch it by context.getEnvironment()\",/*#__PURE__*/_jsx(Java,{children:\"\\n                    @Configuration\\n                    @ComponentScan(\\\"com.arash\\\")\\n                    @PropertySource(\\\"classpath:jdbc.properties\\\")\\n                    public class AppConfig {\\n                    }\\n                    \\n                    //usage>>>\\n                    ApplicationContext ctx = ContextProvider.getAnnotaionContext();\\n                    Environment env = ctx.getEnvironment();\\n                    System.out.println(\\\"driver: \\\" + env.getProperty(\\\"jdbc.driverClassName\\\"));\\n                    System.out.println(\\\"url: \\\"+env.getProperty(\\\"jdbc.url\\\"));\\n                    System.out.println(\\\"username: \\\"+env.getProperty(\\\"jdbc.username\\\"));\\n                    System.out.println(\\\"password: \\\"+env.getProperty(\\\"jdbc.password\\\"));\\n                    \"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'2.',children:[\"Via \",/*#__PURE__*/_jsx(Blue,{children:\"@Value\"}),\":\",/*#__PURE__*/_jsx(\"br\",{}),\"use \",/*#__PURE__*/_jsx(Blue,{children:\"@PropertySource\"}),\" on configuration file and define \",/*#__PURE__*/_jsx(Blue,{children:\"PropertySourcesPlaceholderConfigurer\"}),\" bean\",/*#__PURE__*/_jsx(Java,{children:\"\\n                    @Configuration\\n                    @ComponentScan(\\\"com.arash\\\")\\n                    @PropertySources({\\n                            @PropertySource(\\\"configs.properties\\\"),\\n                            @PropertySource(\\\"classpath:jdbc.properties\\\")\\n                    })\\n                    public class AppConfig {\\n                    \\n                        @Bean\\n                        public PropertySourcesPlaceholderConfigurer propertyConfigInDev() {\\n                            return new PropertySourcesPlaceholderConfigurer();\\n                        }\\n                    }\\n                    \\n                    // Please notice that you must follow format \\\"#{'${prop-name}'}\\\" for @Value\\n                    @Component\\n                    public class JdbcProp {\\n                        @Value(\\\"#{'${jdbc.driverClassName}'}\\\")\\n                        private String driverClassName;\\n                    \\n                        @Value(\\\"#{'${jdbc.url}'}\\\")\\n                        private String url;\\n                    \\n                        @Value(\\\"#{'${jdbc.username}'}\\\")\\n                        private String username;\\n                    \\n                        @Value(\\\"#{'${jdbc.password}'}\\\")\\n                        private String password;\\n                    }\"})]}),/*#__PURE__*/_jsx(HorizontalLine,{}),\"Loading generic file:\",/*#__PURE__*/_jsxs(Bullet,{title:'1.',children:[\"Through \",/*#__PURE__*/_jsx(Blue,{children:\"@Value\"}),/*#__PURE__*/_jsx(Java,{children:\"\\n                    @Component\\n                    public class TextFile {\\n                        @Value(\\\"classpath:data.bat\\\")\\n                        private String value;\\n                    }\\n                    \"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'2.',children:[\"Through \",/*#__PURE__*/_jsx(Blue,{children:\"Resource\"}),\":\",/*#__PURE__*/_jsx(\"br\",{}),\"Context has a Resource object embedded, So you can use that one too\",/*#__PURE__*/_jsx(Java,{children:\"\\n                    @Component\\n                    public class AnyFile {\\n                        @Autowired\\n                        private ResourceLoader resourceLoader;\\n                    \\n                        public Resource getBigFile(){\\n                            return resourceLoader.getResource(\\\"classpath:bigData.dat\\\");\\n                        }\\n                    }\"})]})]});}function getXmlChangingMethodBody(){return/*#__PURE__*/_jsxs(Frame,{title:'Changing method body',children:[/*#__PURE__*/_jsxs(Bullet,{title:'1.',children:[\"Lookup method\",/*#__PURE__*/_jsx(\"br\",{}),\"To put it in simple words, lookup method injection is the process to override a Spring bean at the runtime.\",/*#__PURE__*/_jsx(\"br\",{}),\"Use \\\"lookup\\\" to inject a method body without implementing an abstract class\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Java,{children:\"\\n                    public class CheeseBurger {\\n                    }\\n                    \\n                    public class MushroomBurger {\\n                    }\\n                    \\n                    public abstract class BurgerShop {\\n                        public abstract MushroomBurger getMushroomBurger();\\n                    \\n                        public abstract CheeseBurger getCheeseBurger();\\n                    }\\n                    \"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <bean id=\\\"cheeseBurger\\\" class=\\\"com.arash.models.lookup.CheeseBurger\\\"/>\\n                    <bean id=\\\"mushroomBurger\\\" class=\\\"com.arash.models.lookup.MushroomBurger\\\"/>\\n                    <bean id=\\\"burgerShop\\\" class=\\\"com.arash.models.lookup.BurgerShop\\\">\\n                        <lookup-method bean=\\\"cheeseBurger\\\" name=\\\"getCheeseBurger\\\"/>\\n                        <lookup-method bean=\\\"mushroomBurger\\\" name=\\\"getMushroomBurger\\\"/>\\n                    </bean>\\n                    \"})]}),/*#__PURE__*/_jsx(HorizontalLine,{}),/*#__PURE__*/_jsxs(Bullet,{title:'2.',children:[\"Replacer method\",/*#__PURE__*/_jsx(\"br\",{}),\"Use \\\"method replacer\\\" to replace a method with the desired one by implementing MethodReplacer\",/*#__PURE__*/_jsx(Java,{children:\"\\n                    public class MyCar {\\n                        public String getMyFavoriteCar() {\\n                            return \\\"Pagani\\\";\\n                        }\\n                    }\\n                    \\n                    public class MyReplacer implements MethodReplacer {\\n                        @Override\\n                        public Object reimplement(Object o, Method method, Object[] objects) throws Throwable {\\n                            return \\\"Lamborghini\\\";\\n                        }\\n                    }\\n                    \"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <bean id=\\\"replacer\\\" class=\\\"com.arash.models.replacer.MyReplacer\\\"/>\\n                    <bean id=\\\"myCar\\\" class=\\\"com.arash.models.replacer.MyCar\\\">\\n                        <replaced-method name=\\\"getMyFavoriteCar\\\" replacer=\\\"replacer\\\"/>\\n                    </bean>\\n                    \"})]})]});}function getScopes(){return/*#__PURE__*/_jsxs(Frame,{title:'Scopes',children:[/*#__PURE__*/_jsx(Blue,{children:\"Defined scopes:\"}),/*#__PURE__*/_jsx(Bullet,{title:'singleton:',children:\"only one instance\"}),/*#__PURE__*/_jsx(Bullet,{title:'prototype:',children:\"new instance on each call\"}),/*#__PURE__*/_jsx(Bullet,{title:'request:',children:\"one instance per network request. It saves on request object\"}),/*#__PURE__*/_jsx(Bullet,{title:'session:',children:\"one instance per session (again on the network)\"}),/*#__PURE__*/_jsx(Bullet,{title:'application:',children:\"one instance per application. It stores in ServletContext\"}),/*#__PURE__*/_jsx(Bullet,{title:'websocket:',children:\"one instance per websocket.\"}),/*#__PURE__*/_jsx(Xml,{description:'xml configuration',children:\"<bean id=\\\"bean1\\\" class=\\\"Bean1\\\" scope=\\\"prototype\\\"/>\"}),/*#__PURE__*/_jsx(Java,{description:'java configuration',children:\"\\n                @Configuration\\n                public class AppConfig {\\n                    @Bean()\\n                    @Scope(\\\"prototype\\\")\\n                    private Bean1 getBean1(){\\n                        return new Bean1();\\n                    }\\n                }\"}),/*#__PURE__*/_jsx(Java,{description:'annotation configuration',children:\"\\n                @Component\\n                @Scope(\\\"prototype\\\")\\n                public class Bean1 {\\n                }\"}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(Red,{children:\"All web scopes need listener to get worked and listeners must be defined at web layer\"})})]});}function getScopeIssue(){return/*#__PURE__*/_jsxs(Frame,{title:'Different scope wiring issue',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[\"Some times we involve with Longer Lived objects and Shorter Lived objects. What really happens when you have different scopes? Who has to handle this situation.\",/*#__PURE__*/_jsx(\"br\",{}),\"For example, you have a singleton class which contains some prototype classes. Singleton class is created only once and never changes but prototype classes must be changed each time.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"Consider the following example:\",/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Java,{children:\"\\n                public class PrototypeClass {\\n                }\\n                \\n                public class SingletonClass {\\n                    private PrototypeClass prototypeClass;\\n                    \\n                    public PrototypeClass getPrototypeClass() {\\n                        return prototypeClass;\\n                    }\\n                    \\n                    public void setPrototypeClass(PrototypeClass prototypeClass) {\\n                        this.prototypeClass = prototypeClass;\\n                    }\\n                }\"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <bean id=\\\"singletonClass\\\" class=\\\"com.arash.models.scopes.SingletonClass\\\" scope=\\\"singleton\\\">\\n                        <property name=\\\"prototypeClass\\\" ref=\\\"prototypeClass\\\"/>\\n                    </bean>\\n                    <bean id=\\\"prototypeClass\\\" class=\\\"com.arash.models.scopes.PrototypeClass\\\" scope=\\\"prototype\\\"/>\"})]}),/*#__PURE__*/_jsx(Java,{description:'usage:',children:\"\\n                ApplicationContext ctx = ContextProvider.getXmlContext();\\n                SingletonClass sc = ctx.getBean(\\\"singletonClass\\\", SingletonClass.class);\\n                Stream\\n                        .generate(sc::getPrototypeClass)\\n                        .limit(2)\\n                        .forEach(System.out::println);\\n                \\n                result: >>>\\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\\n                \"}),/*#__PURE__*/_jsx(Red,{children:\"You see that created objects are the same:\"})]}),\"To solve this issue\",/*#__PURE__*/_jsxs(Bullet,{title:'1.',children:[/*#__PURE__*/_jsx(Purple,{children:\"lookup-method & replacer-method:\"}),/*#__PURE__*/_jsx(\"br\",{}),\"lookup and replacer methods create object under defined circumstances.\"]}),/*#__PURE__*/_jsxs(Bullet,{title:'2.',children:[/*#__PURE__*/_jsx(Purple,{children:\"Scoped proxy:\"}),/*#__PURE__*/_jsx(\"br\",{}),\"we can declare a proxy to join a short-life time and long-life time classes.\",/*#__PURE__*/_jsx(\"br\",{}),\"In fact, proxy comes stands in the middle and takes the responsibility of object creation.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Important,{children:\"Put the proxy on shorter-life time class\"}),/*#__PURE__*/_jsx(Xml,{title:1,children:\"\\n                    <bean id=\\\"singletonClass\\\" class=\\\"com.arash.models.scopes.SingletonClass\\\" scope=\\\"singleton\\\">\\n                        <property name=\\\"prototypeClass\\\" ref=\\\"prototypeClass\\\"/>\\n                    </bean>\\n                    <bean id=\\\"prototypeClass\\\" class=\\\"com.arash.models.scopes.PrototypeClass\\\" scope=\\\"prototype\\\">\\n                        <aop:scoped-proxy/>\\n                    </bean>\"}),/*#__PURE__*/_jsx(Java,{title:1,children:\"\\n                    @Component\\n                    @Singleton\\n                    public class SingletonClass {\\n                    }\\n                    \\n                    @Component\\n                    @Scope(value = \\\"prototype\\\",proxyMode = ScopedProxyMode.TARGET_CLASS)\\n                    public class PrototypeClass {\\n                    }\\n                    \"})]}),/*#__PURE__*/_jsx(\"div\",{style:{maxWidth:'40rem'},children:/*#__PURE__*/_jsxs(Highlight,{children:[\"When \",'<aop:scoped-proxy/>',\" is in root node, all beans will be serialized at first, then on request, the bean will be deserialized, so the instance is a copy of the object.\"]})})]});}function getCollections(){return/*#__PURE__*/_jsx(Frame,{title:'Collections',children:/*#__PURE__*/_jsx(Xml,{children:\"\\n                <bean id=\\\"propCollection\\\" class=\\\"com.arash.models.collections.PropertyCollection\\\">\\n                    <property name=\\\"map\\\">\\n                        <props>\\n                            <prop key=\\\"key1\\\">value1</prop>\\n                            <prop key=\\\"key2\\\">value2</prop>\\n                        </props>\\n                    </property>\\n                </bean>\\n                \\n                <bean id=\\\"mapCollection\\\" class=\\\"com.arash.models.collections.MapCollection\\\">\\n                    <property name=\\\"map\\\">\\n                        <map>\\n                            <entry key=\\\"key1\\\" value=\\\"value1\\\"/>\\n                            <entry key=\\\"key2\\\" value=\\\"value2\\\"/>\\n                        </map>\\n                    </property>\\n                </bean>\\n                \\n                <bean id=\\\"listCollection\\\" class=\\\"com.arash.models.collections.ListCollection\\\">\\n                    <property name=\\\"map\\\">\\n                        <list>\\n                            <value>entry1</value>\\n                            <ref bean=\\\"bean1\\\"/>\\n                        </list>\\n                    </property>\\n                </bean>\\n                \\n                <bean id=\\\"setCollection\\\" class=\\\"com.arash.models.collections.SetCollection\\\">\\n                    <property name=\\\"map\\\">\\n                        <set>\\n                            <value>entry1</value>\\n                            <ref bean=\\\"bean1\\\"/>\\n                        </set>\\n                    </property>\\n                </bean>\"})});}function getBeanAware(){return/*#__PURE__*/_jsxs(Frame,{title:'Aware classes',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsx(Purple,{children:\"Bean lifecycle\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"img\",{src:beanLifecycle,alt:'bean lifecycle',className:'center-horizontally-relative',style:{width:'500px'}})]}),\"Some times we need that a bean be aware of its context features. To reach this, we can use aware interfaces.\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{style:{maxWidth:'40rem'},children:\"To hook our code into bean lifecycle, there are some interfaces available which do the job, also you can do that via xml or annotaion in some cases.\"}),/*#__PURE__*/_jsx(Java,{children:\"\\n                public class MyBean implements Phased, BeanNameAware, BeanFactoryAware, ApplicationContextAware,\\n                                                BeanPostProcessor, InitializingBean, DisposableBean {\\n                    /*Phased*/\\n                    @Override\\n                    public int getPhase() {return 0;}\\n                \\n                    /*BeanNameAware*/\\n                    @Override\\n                    public void setBeanName(String s) {}\\n                \\n                    /*BeanFactoryAware*/\\n                    @Override\\n                    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {}\\n                \\n                    /*ApplicationContextAware*/\\n                    @Override\\n                    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {}\\n                \\n                    /*BeanPostProcessor.preInitialization*/\\n                    @Override\\n                    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\\n                        return null;\\n                    }\\n                \\n                    /*InitializingBean*/\\n                    @Override\\n                    public void afterPropertiesSet() throws Exception {}\\n                \\n                    /*BeanPostProcessor.postInitialization*/\\n                    @Override\\n                    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\\n                        return null;\\n                    }\\n                \\n                    /*DisposableBean*/\\n                    @Override\\n                    public void destroy() throws Exception {}\\n                }\"}),/*#__PURE__*/_jsxs(Important,{children:[\"To listen to all beans destruction: \",/*#__PURE__*/_jsx(Bold,{children:\"context.registerShutDownHook()\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Xml,{description:'pom.xml',children:\"\\n                    <dependency>\\n                        <groupId>org.apache.james</groupId>\\n                        <artifactId>james-server-lifecycle-spring</artifactId>\\n                        <version>3.0-beta4</version>\\n                    </dependency>\\n                \"}),/*#__PURE__*/_jsx(Java,{description:'annotation',children:\"\\n                    public class MyBean2 {\\n                        \\n                        @PostConstruct\\n                        void afterContruct(){}\\n        \\n                        @PreDestroy\\n                        void preDestroy(){}\\n                    }\"})]}),/*#__PURE__*/_jsx(Java,{title:1,children:\"\\n                    @Configuration\\n                    public class AppConfig {\\n                        \\n                        @Bean(initMethod = \\\"\\\")\\n                        public Bean1 getBean1(){\\n                            return new Bean1();\\n                        }\\n                    }\"}),/*#__PURE__*/_jsx(Xml,{description:'Via xml',children:\"\\n                <!-- post-init -->\\n                <bean init-bean=\\\"...\\\"/>\\n                <bean init-method=\\\"...\\\"/>\\n                \\n                <!-- to init all bean as the same -->\\n                <beans default-init-method=\\\"unique method\\\"/>\\n\\n                <!-- pre-destroy -->\\n                <bean destroy-method=\\\"...\\\"/>\\n                \"})]});}function getTemplateClass(){return/*#__PURE__*/_jsxs(Frame,{title:'Template class',children:[\"Template class come in when we are willing to initialize a set of beans refusing any much bothering.\",/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Java,{children:\"\\n                    public class Student {\\n                    private String name;\\n                    private int age;\\n                    private String hairColor;\\n\\n                    public void setName(String name) {\\n                    this.name = name;\\n                }\\n\\n                    public void setAge(int age) {\\n                    this.age = age;\\n                }\\n\\n                    public void setHairColor(String hairColor) {\\n                    this.hairColor = hairColor;\\n                }\\n                }\"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <!-- declare an abstract class -->\\n                    <bean id=\\\"templatePerson\\\" abstract=\\\"true\\\">\\n                    <property name=\\\"name\\\" value=\\\"arash\\\"/>\\n                    <property name=\\\"age\\\" value=\\\"33\\\"/>\\n                    </bean>\\n\\n                    <!-- define the abstract class as parent -->\\n                    <bean id=\\\"student\\\" class=\\\"com.arash.models.Student\\\" parent=\\\"templatePerson\\\">\\n                    <property name=\\\"hairColor\\\" value=\\\"black\\\"/>\\n                    </bean>\"})]})]});}function getMerging(){return/*#__PURE__*/_jsxs(Frame,{title:'Merging configuration files',children:[/*#__PURE__*/_jsx(Xml,{description:'merging other configurations into xml',children:\"\\n                    <beans ...>\\n                        <context:annotation-config/>\\n                        \\n                        <!-- scan a package to figure out its Components -->\\n                        <context:component-scan base-package=\\\"com\\\"/>\\n                    </beans>\\n                \"}),/*#__PURE__*/_jsx(Java,{description:'merging other configurations into java class',children:\"\\n                //merge other classes\\n                @Import(OtherAppConfig.class)\\n                \\n                //merge xml files\\n                @ImportResource(locations = \\\"classpath:containerconfig.xml\\\")\\n                \\n                @Configuration\\n                public class AppConfig {\\n                }\\n                \"})]});}function getMultipleCandidate(){return/*#__PURE__*/_jsxs(Frame,{title:'multiple candidate',children:[\"There is possibility to have more than 1 candidate when you request a bean. To make spring to return true object you can use \",/*#__PURE__*/_jsx(Bold,{children:\"primary\"}),\" and \",/*#__PURE__*/_jsx(Bold,{children:\"qualifier\"}),\" key words.\",/*#__PURE__*/_jsxs(Bullet,{title:'1.',children:[/*#__PURE__*/_jsx(Bold,{children:\"Primary:\"}),/*#__PURE__*/_jsx(\"br\",{}),\"Set a bean as primary\",/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Xml,{title:1,children:\"\\n                    <bean id=\\\"ferrai\\\" class=\\\"com.arash.models.multiplecandidates.Ferrari\\\" primary=\\\"true\\\"/>\\n                    <bean id=\\\"lamborghini\\\" class=\\\"com.arash.models.multiplecandidates.Lamborghini\\\">\"}),/*#__PURE__*/_jsx(Java,{title:1,children:\"\\n                    @Configuration\\n                    public class AppConfig {\\n                        @Primary\\n                        @Bean\\n                        public Car getLamborghini() {\\n                            return new Lamborghini();\\n                        }\\n    \\n                        @Bean\\n                        public Car getFerrari() {\\n                            return new Ferrari();\\n                        }\\n                    }\"})]})]}),/*#__PURE__*/_jsxs(Bullet,{title:'2.',children:[/*#__PURE__*/_jsx(Bold,{children:\"Qualifier:\"}),/*#__PURE__*/_jsx(\"br\",{}),\"determine what object should be injected based on the given information\",/*#__PURE__*/_jsx(Java,{description:'custom qualifier',children:\"\\n                    @Target(ElementType.FIELD)\\n                    @Retention(RetentionPolicy.RUNTIME)\\n                    @Qualifier\\n                    public @interface MyQualifier {\\n                        String value() default \\\"\\\";\\n                        String color();\\n                    }\"}),/*#__PURE__*/_jsxs(FlexRow,{children:[/*#__PURE__*/_jsx(Xml,{title:1,children:\"\\n                    <!--qualifier with a simple string-->\\n                    <bean id=\\\"ferrai\\\" className=\\\"com.arash.models.multiplecandidates.Ferrari\\\">\\n                        <qualifier value=\\\"ferrari\\\"/>\\n                    </bean>\\n\\n                    <!--qualifier with custom selection property-->\\n                    <bean id=\\\"lamborghini\\\"className=\\\"com.arash.models.multiplecandidates.Lamborghini\\\">\\n                        <qualifier type=\\\"com.arash.models.multiplecandidates.MyQualifier\\\">\\n                            <attribute key=\\\"color\\\"value=\\\"green\\\"/>\\n                        </qualifier>\\n                    </bean>\\n\\n                    <bean id=\\\"pagani\\\"className=\\\"com.arash.models.multiplecandidates.Pagani\\\">\\n                        <qualifier type=\\\"com.arash.models.multiplecandidates.MyQualifier\\\">\\n                            <attribute key=\\\"color\\\"value=\\\"black\\\"/>\\n                        </qualifier>\\n                    </bean>\"}),/*#__PURE__*/_jsx(Java,{title:1,children:\"\\n                    @Configuration\\n                    public class AppConfig {\\n                        @Qualifier(\\\"ferrari\\\")\\n                        @Bean\\n                        public Car getFerrari() {\\n                            return new Ferrari();\\n                        }\\n    \\n                        @MyQualifier(name = \\\"lambo\\\",color = \\\"green\\\")\\n                        @Bean\\n                        public Car getLamborghini() {\\n                            return new Lamborghini();\\n                        }\\n    \\n                        @Bean\\n                        @MyQualifier(name = \\\"lambo\\\",color = \\\"black\\\")\\n                        public Car getPagani(){\\n                            return new Pagani();\\n                        }\\n                    }\"})]}),/*#__PURE__*/_jsx(Java,{description:'usage',children:\"\\n                    public class Engineer extends Person {\\n                        @MyQualifier(name = \\\"lambo\\\", color = \\\"black\\\")\\n                        @Autowired\\n                        private Car car1;\\n    \\n                        @Autowired\\n                        @MyQualifier(name = \\\"lambo\\\", color = \\\"green\\\")\\n                        private Car car2;\\n    \\n                        @Autowired\\n                        @Qualifier(\\\"ferrari\\\")\\n                        private Car car3;\\n                    }\"})]})]});}function getSpel(){return/*#__PURE__*/_jsxs(Frame,{title:'Spring Expression Language (SPEL)',children:[\"this expression is useful when we are willing to pass some data via @Value or XML or to execute a tiny piece of code easily.\",/*#__PURE__*/_jsx(\"br\",{}),\"The general format is \",/*#__PURE__*/_jsx(Bold,{children:'#{SPEL}'}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Purple,{children:\"Usage:\"}),/*#__PURE__*/_jsxs(Bullet,{title:'1.',level:1,children:[/*#__PURE__*/_jsx(Bold,{children:\"java:\"}),/*#__PURE__*/_jsx(Java,{children:\"\\n                    ExpressionParser parser = new SpelExpressionParser();\\n                    Expression exp = parser.parseExpression(\\\"'Hello World'\\\");\\n                    String message = (String) exp.getValue();\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'2.',level:1,children:[/*#__PURE__*/_jsx(Bold,{children:\"xml:\"}),/*#__PURE__*/_jsx(Xml,{children:\"\\n                    <!--calculate some value by spel-->\\n                    <bean id=\\\"numberGuess\\\" class=\\\"com.arash.models.ANumber\\\">\\n                    <property name=\\\"randomNumber\\\" value=\\\"#{T(java.lang.Math).random() * 100.0}\\\"/>\\n                    </bean>\\n\\n                    <!--using a property of another class-->\\n                    <bean id=\\\"shapeGuess\\\" class=\\\"com.arash.models.ANumber\\\">\\n                    <property name=\\\"randomNumber\\\" value=\\\"#{someClass.prop}\\\"/>\\n                    </bean>\"})]}),/*#__PURE__*/_jsxs(Bullet,{title:'1.',level:1,children:[/*#__PURE__*/_jsx(Bold,{children:\"annotation:\"}),/*#__PURE__*/_jsx(Java,{children:\"\\n                    public class ANumber {\\n                    @Value(\\\"900\\\")\\n                    private int randomNumber;\\n\\n                    public void setRandomNumber(int randomNumber) {\\n                    this.randomNumber = randomNumber;\\n                    }\\n                    }\"})]}),/*#__PURE__*/_jsx(HorizontalLine,{}),/*#__PURE__*/_jsx(Java,{children:\"\\n                    /*** literal expression ***/\\n                    \\u201C'Hello World'\\u201D\\n                    \\\"6.0221415E+23\\\"\\n                    \\\"0x7FFFFFFF\\\"\\n                    \\\"true\\\"\\n                    \\\"null\\\"\\n\\n                    /*** properties, arrays, lists, maps, indexers ***/\\n                    \\\"Birthdate.Year + 1900\\\"\\n                    \\\"Members[0].Inventions[6]\\\"\\n                    \\\"Officers['president'].PlaceOfBirth.City\\\"\\n\\n                    StandardEvaluationContext context = new StandardEvaluationContext();\\n\\n                    /*** inline lists, Maps ***/\\n                    List numbers = (List) parser.parseExpression(\\\"{1,2,3,4}\\\").getValue(context);\\n                    List listOfLists = (List) parser.parseExpression(\\\"{{'a','b'},{'x','y'}}\\\").getValue(context);\\n                    Map lst = (Map) parser.parseExpression(\\\"{'k1':'v1','k2':'v2'}\\\").getValue(context);\\n\\n                    /*** array construction ***/\\n                    int[] numbers1 = (int[]) parser.parseExpression(\\\"new int[4]\\\").getValue(context);\\n                    int[] numbers2 = (int[]) parser.parseExpression(\\\"new int[]{1,2,3}\\\").getValue(context);\\n                    int[][] numbers3 = (int[][]) parser.parseExpression(\\\"new int[4][5]\\\").getValue(context);\\n\\n                    /*** methods ***/\\n                    String c = parser.parseExpression(\\\"'abc'.substring(2, 3)\\\").getValue(String.class);\\n\\n                    /*** operators ***/\\n                    boolean a = parser.parseExpression(\\\"2 == 2\\\").getValue(Boolean.class); //true\\n                    boolean b = parser.parseExpression(\\\"2 < -5.0\\\").getValue(Boolean.class); //false\\n                    boolean c = parser.parseExpression(\\\"'black' < 'block'\\\").getValue(Boolean.class); //true\\n                    boolean d = parser.parseExpression(\\\"'5.00' matches '^-?\\\\\\\\d+(\\\\\\\\.\\\\\\\\d{2})?$'\\\").getValue(Boolean.class); //true\\n                    boolean e = parser.parseExpression(\\\"true and false\\\").getValue(Boolean.class); //false\\n                    String expression = \\\"isMember('Nikola Tesla') and isMember('Mihajlo Pupin')\\\";\\n                    boolean f = parser.parseExpression(\\\"!true\\\").getValue(Boolean.class); //false\\n                    int two = parser.parseExpression(\\\"1 + 1\\\").getValue(Integer.class); // 2\\n                    String g = parser.parseExpression(\\\"'test' + ' ' + 'string'\\\").getValue(String.class);  // 'test string'\\n                    double h = parser.parseExpression(\\\"1000.00 - 1e4\\\").getValue(Double.class); // -9000\\n                    String i = parser.parseExpression(\\\"Name = 'Alexandar Seovic'\\\").getValue(context, String.class);\\n\\n                    /*** types ***/\\n                    Class dateClass = parser.parseExpression(\\\"T(java.util.Date)\\\").getValue(Class.class);\\n                    Class stringClass = parser.parseExpression(\\\"T(String)\\\").getValue(Class.class);\\n                    boolean j = parser.parseExpression(\\\"T(java.math.RoundingMode).CEILING < T(java.math.RoundingMode).FLOOR\\\").getValue(Boolean.class); //true\\n\\n                    /*** constructors ***/\\n                    Inventor einstein = parser.parseExpression(\\\"new com.arash.Inventor('Albert Einstein', 'German')\\\").getValue(Inventor.class);\\n\\n                    /*** variables ***/\\n                    Inventor tesla = new Inventor(\\\"Nikola Tesla\\\", \\\"Serbian\\\");\\n                    StandardEvaluationContext context2 = new StandardEvaluationContext(tesla);\\n                    context2.setVariable(\\\"newName\\\", \\\"Mike Tesla\\\");\\n                    parser.parseExpression(\\\"Name = #newName\\\").getValue(context);\\n                    System.out.println(tesla.getName()); // \\\"Mike Tesla\\\"\\n\\n                    /*** another sample ***/\\n                    List<Integer> primes = new ArrayList<Integer>();\\n                    primes.addAll(Arrays.asList(2, 3, 5, 7, 11, 13, 17));\\n                    context2.setVariable(\\\"primes\\\", primes);\\n                    List<Integer> primes2 = (List<Integer>) parser.parseExpression(\\\"#primes.?[#this>10]\\\").getValue(context); // select of numbers > 10\\n\\n                    /*** functions ***/\\n                    context2.registerFunction(\\\"reverseString\\\", StringUtils.class.getDeclaredMethod(\\\"reverseString\\\", new Class[]{String.class}));\\n                    String helloWorldReversed = parser.parseExpression(\\\"#reverseString('hello')\\\").getValue(context, String.class);\\n                    context2.setBeanResolver(new MyBeanResolver());\\n                    Object bean = parser.parseExpression(\\\"@foo\\\").getValue(context);\\n\\n                    /*** ternary Operator (If - Then - Else) ***/\\n                    String falseString = parser.parseExpression(\\\"false ? 'trueExp' : 'falseExp'\\\").getValue(String.class);\\n\\n                    /*** collection Selection ***/\\n                    List<Inventor> list = (List<Inventor>) parser.parseExpression(\\\"Members.?[Nationality == 'Serbian']\\\").getValue(context2);\\n                    Map newMap = (Map) parser.parseExpression(\\\"map.?[value<27]\\\").getValue();\\n                    List placesOfBirth = (List) parser.parseExpression(\\\"Members.![placeOfBirth.city]\\\");\\n\\n\\n                    /*** expression templating ***/\\n                    String randomPhrase = parser.parseExpression(\\\"random number is #{T(java.lang.Math).random()}\\\", new TemplateParserContext()).getValue(String.class);\\n                \"})]});}function getProfile(){return/*#__PURE__*/_jsxs(Frame,{title:'Profile selection',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsx(Java,{children:\"\\n                    // To check a property existence:\\n                    context.getEnvironment().containsProperty(\\\"who_is_your_daddy\\\");\\n                    \\n                    //all environments are not available in spring and some are provide by jvm\\n                    System.getProperty(\\\"propertyName\\\");\\n                    \"}),/*#__PURE__*/_jsx(\"br\",{}),\"To change profile at runtime:\",/*#__PURE__*/_jsx(Red,{children:\"!Not tested!\"}),/*#__PURE__*/_jsx(Bash,{children:'java -Dspring.profiles.active.pro -jar myJar.jar'})]}),\"We can switch to another config via profile.\",/*#__PURE__*/_jsx(\"br\",{}),\"First of, mark all classes belong to a profile\",/*#__PURE__*/_jsx(Java,{description:'source code',children:\"\\n                @Profile(\\\"develop\\\",\\\"!dev\\\")//! => active profile\\n                public class Bean1 {\\n                \\n                    //access your desired environment\\n                    @Autowired\\n                    public EnvironmentConfiguration env;\\n                }\"}),\"In xml, we have to assign a file for a profile:\",/*#__PURE__*/_jsx(Xml,{children:\"\\n                <beans\\n                    ...\\n                    profile=\\\"develop\\\">\\n                ...\\n                </beans>\"}),/*#__PURE__*/_jsx(HorizontalLine,{}),\"Now, select a profile:\",/*#__PURE__*/_jsx(Xml,{description:'pom.xml',children:\"\\n                <profiles>\\n                    <profile>\\n                        <id>develop</id>\\n                        <activation>\\n                            <activeByDefault>true</activeByDefault>\\n                        </activation>\\n                    </profile>\\n                </profiles>\"}),/*#__PURE__*/_jsx(HorizontalLine,{}),\"To catch active profile:\",/*#__PURE__*/_jsx(Java,{children:\"\\n                @Component\\n                public class Bean1 {\\n                    @Autowired\\n                    public Environment env;\\n                \\n                    public void loopThroughActiveProfiles() {\\n                        Arrays.stream(env.getActiveProfiles())\\n                            .forEach(System.out::println);\\n                    }\\n                    \\n                    @Value(\\\"#{${spring.profiles.active}}\\\")\\n                    String activeProfile;\\n                \\n                    @Autowired\\n                    private ConfigurableEnvironment cfgEnv;\\n                    \\n                    public void setActiveProfile(String pName) {\\n                        //other information is available here\\n                        cfgEnv.setActiveProfiles(\\\"develop\\\");\\n                    }\\n                }\"}),/*#__PURE__*/_jsx(\"div\",{style:{width:'22rem'},children:/*#__PURE__*/_jsxs(Highlight,{children:[\"You have to follow \",/*#__PURE__*/_jsx(Bold,{children:\"profile\"}),\" structure in the whole of project when you mention it.\"]})})]});}function getEvent(){return/*#__PURE__*/_jsxs(Frame,{title:'Events',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"In every event 3 parties are involved: \",/*#__PURE__*/_jsx(Bold,{children:\"Publisher\"}),\", \",/*#__PURE__*/_jsx(Bold,{children:\"Listener\"}),\" and \",/*#__PURE__*/_jsx(Bold,{children:\"EvnetObject\"})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"If event extends \",/*#__PURE__*/_jsx(Bold,{children:\"ApplicationEvent\"}),\", it is called \",/*#__PURE__*/_jsx(Blue,{children:\"standard evnet\"}),\" and if it implements \",/*#__PURE__*/_jsx(Bold,{children:\"EvnetListener\"}),\", it is called \",/*#__PURE__*/_jsx(Blue,{children:\"custom\"}),\" evnet.\",/*#__PURE__*/_jsx(\"br\",{})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"There are limited standard evnets:\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Bullet,{title:'ContextStartedEvent',children:\"When the ApplicationContext is started using the start() method on the ConfigurableApplicationContext interface. You can poll your database or you can restart any stopped application after receiving this event.\"}),/*#__PURE__*/_jsx(Bullet,{title:'ContextStopedEvnet',children:\"When the ApplicationContext is stopped using the stop() method on the ConfigurableApplicationContext interface. You can do required housekeep work after receiving this event.\"}),/*#__PURE__*/_jsx(Bullet,{title:'ContextClosedEvent',children:\"When the ApplicationContext is closed using the close() method on the ConfigurableApplicationContext interface.\"}),/*#__PURE__*/_jsx(Bullet,{title:'ContextRefreshedEvnet',children:\"When the ApplicationContext is either initialized or refreshed. This can also be raised using the refresh() method on the ConfigurableApplicationContext interface.\"}),/*#__PURE__*/_jsx(Bullet,{title:'RequestHandledEvnet',children:\"This is a web-specific event telling all beans that an HTTP request has been serviced.\"}),/*#__PURE__*/_jsx(Bullet,{title:'ServletRequestHandledEvent',children:\"This one is child of the previous one and refers those requests from servlet\"})]})]}),\"To raise a standard event:\",/*#__PURE__*/_jsx(Java,{children:\"\\n                @Component\\n                public class RegisterPersonEventListener implements ApplicationListener<ContextStartedEvent> {\\n                \\n                    @Override\\n                    public void onApplicationEvent(ContextStartedEvent contextStartedEvent) {\\n                        System.out.println(\\\"context started\\\");\\n                    }\\n                }\\n                \\n                //usage>>>\\n                ConfigurableApplicationContext ctx= (ConfigurableApplicationContext) ContextProvider.getAnnotaionContext();\\n                ctx.start();\\n                \\n                //output>>>\\n                context started\\n                \"}),\"To raise custom event:\",/*#__PURE__*/_jsx(Java,{children:\"\\n                // event object \\n                public class RegisterPersonEvent extends ApplicationEvent {\\n                    public RegisterPersonEvent(Object source) {\\n                        super(source);\\n                    }\\n                }\\n                \\n                // publisher object\\n                @Component\\n                public class RegisterPersonEventPublisher implements ApplicationEventPublisherAware {\\n                \\n                    private ApplicationEventPublisher publisher;\\n                \\n                    @Override\\n                    public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\\n                        this.publisher = applicationEventPublisher;\\n                    }\\n                \\n                    public void send() {\\n                        publisher.publishEvent(new RegisterPersonEvent(this));\\n                    }\\n                }\\n                \\n                // listener object\\n                @Component\\n                public class RegisterPersonEventListener implements ApplicationListener<RegisterPersonEvent> {\\n                \\n                    @Override\\n                    public void onApplicationEvent(RegisterPersonEvent registerPersonEvent) {\\n                        System.out.println(\\\"register person raised\\\");\\n                    }\\n                }\\n                \"}),/*#__PURE__*/_jsx(Red,{children:\"This event mechanism is synched and used has to wait till the event process finish.\"}),/*#__PURE__*/_jsx(\"br\",{}),\"To come over this issue, we should go to asynch event mechanism:\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Java,{children:\"\\n                //by annotation\\n                @EnableAsync\\n                \\n                //by java\\n                public class MyExecutor implements AsyncConfigurer {\\n                    @Override\\n                    public Executor getAsyncExecutor() {\\n                        return new ThreadPoolTaskExecutor();\\n                    }\\n                }\\n                \"}),/*#__PURE__*/_jsx(Xml,{children:'<task:annotation-driven executor=\"anExecutor\"/>'}),/*#__PURE__*/_jsx(\"br\",{})]});}// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }","map":{"version":3,"sources":["/media/arash/usb_stick/my-cheat-book/src/contents/spring5/core/core-cheats.js"],"names":["React","Bash","Frame","GenericCode","Java","Xml","InfoIcon","Blue","BlueBold","Bold","Bullet","FlexRow","Highlight","HorizontalLine","Important","Purple","Red","Float","appContext","circularDependency","beanLifecycle","components","CoreCheats","getBeanContainer","getScanningFilter","getMerging","getProfile","getMultipleCandidate","getXmlBasic","getAnnotationBasic","getAlias","getPrivateConstructor","getXmlLocalClass","getAnnotationLocalClass","getXmlCircularDependencies","getAnnotationCircularDependencies","getXmlLoadFromFile","getJavaLoadFromFile","getXmlChangingMethodBody","getCollections","getSpel","getScopes","getScopeIssue","getBeanAware","getTemplateClass","getEvent","width","maxWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Bash, Frame, GenericCode, Java, Xml} from \"../../../components/blocks\";\nimport {InfoIcon} from \"../../../components/bubble\";\nimport {\n    Blue,\n    BlueBold,\n    Bold,\n    Bullet,\n    FlexRow,\n    Highlight,\n    HorizontalLine,\n    Important,\n    Purple,\n    Red\n} from \"../../../components/components\";\nimport {Float} from \"../../../components/float\";\nimport appContext from '../../../res/images/ApplicationContext.png';\nimport circularDependency from \"../../../res/images/circular-dependency.png\";\nimport beanLifecycle from \"../../../res/images/bean-life-cycle.png\";\nimport components from \"../../../res/images/components.png\";\n\nexport function CoreCheats() {\n    return (\n        <>\n            {getBeanContainer()}\n            {getScanningFilter()}\n            {getMerging()}\n            {getProfile()}\n            {getMultipleCandidate()}\n            {getXmlBasic()}\n            {getAnnotationBasic()}\n            {getAlias()}\n            {getPrivateConstructor()}\n            {getXmlLocalClass()}\n            {getAnnotationLocalClass()}\n            {getXmlCircularDependencies()}\n            {getAnnotationCircularDependencies()}\n            {getXmlLoadFromFile()}\n            {getJavaLoadFromFile()}\n            {getXmlChangingMethodBody()}\n            {getCollections()}\n            {getSpel()}\n            {getScopes()}\n            {getScopeIssue()}\n            {getBeanAware()}\n            {getTemplateClass()}\n            {getEvent()}\n        </>\n    )\n}\n\nfunction getBeanContainer() {\n    return (\n        <Frame title={'Catching bean'}>\n            <InfoIcon>\n                <Important>!the path in which we put java source and resource files is called ClassPath. It also can\n                    hold resources too.<br/>\n                </Important>\n                This is why, we use ClassPathXmlResource class to bring in our desired configuration file.<br/>\n                Every thing under main dir is called ClassPath, so test is out of that.\n            </InfoIcon>\n            <FlexRow>\n                <Java description={'using BeanFactory is deprecated'}>\n                    {`\n                    ClassPathResource resource = new ClassPathResource(\"containerconfig.xml\");\n                    BeanFactory beanFactory = new XmlBeanFactory(resource);\n                    return beanFactory.getBean(\"targetId\");\n                    `}\n                </Java>\n                <Java description={'new fasion'}>\n                    {`\n                    ApplicationContext context = new ClassPathXmlApplicationContext(\"containerconfig.xml\");\n                    return (Car) context.getBean(\"car\");`}\n                </Java>\n            </FlexRow>\n            <Important>ApplicationContext provides multiple configuration file registration.</Important>\n            <div className={'float-holder'} className={'center-horizontally-relative inline'}>\n                <img src={appContext} alt={'application context implementations'} style={{width: '1200px'}}/>\n                <Float l={1000} t={180} lineTo={[1072, 262]}>\n                    <div style={{width: '190px'}}>To fetch xml configuration from a file inside the application itself\n                    </div>\n                </Float>\n                <Float l={850} t={120} lineTo={[835, 262]}>\n                    <div style={{width: '260px'}}>To read xml configuration from a file system. Path must be relative\n                    </div>\n                </Float>\n                <Float l={890} t={362} lineTo={[873, 364]}>\n                    <div style={{width: '300px'}}>To read configuration from groovy file</div>\n                </Float>\n                <Float l={250} t={362} lineTo={[625, 365]}>\n                    <div style={{width: '300px'}}>To configure beans by annotations</div>\n                </Float>\n                <Float l={10} t={260} lineTo={[383, 330]}>\n                    <div style={{width: '350px'}}>To setup features via programmatic registration, rather than reading\n                        bean definitions from external configuration sources. Mainly useful for testing\n                    </div>\n                </Float>\n            </div>\n            <br/><br/>\n            Configuration file is due to determine instantiating mechanism.<br/>\n            <Blue>How to provide configuration file:</Blue>\n            <Bullet title={'1.'}>XML based configuration:\n                provide a xml file to define instantiation mechanism. We name it \"containerconfix.xml\" in here:\n                <Xml>\n                    {`\n                    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n                           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                           xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n                    \n                        <bean id=\"bean1\" class=\"Bean1\"/>\n                    </beans>`}\n                </Xml>\n                <Java>{`\n                    public static void main(String[] args){\n                        ApplicationContext context = new ClassPathXmlApplicationContext(\"containerconfig.xml\");\n                        Bean1 bean1 = context.getBean(\"bean1\");\n                    }`}</Java>\n            </Bullet>\n            <Bullet title={'2.'}>Java based configuration:\n                <Java>\n                    {`\n                    /* provide a class to create instances and annotate it with @Configuration */\n                    @Configuration\n                    public class AppConfig {\n                    \n                        @Bean\n                        public Bean1 getBean1(){\n                            return new Bean1();\n                        }\n                    }\n                    \n                    public static void main(String[] args){\n                        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n                        context.register(AppConfig.class);\n                        context.refresh();\n                        \n                        Bean1 bean1 = context.getBean(Bean1.class);\n                    }`}\n                </Java>\n            </Bullet>\n            <Bullet title={'3.'}>Annotation based configuration:<br/>\n                Using annotation instead of direct java codes such\n                as <Bold>@Component</Bold>, <Bold>@Repository</Bold>, <Bold>@Service</Bold>, <Bold>@Configuration</Bold>,\n                <Bold>@Controller</Bold><br/>\n                Then we should aware spring of these classes by <Bold>@ComponentScan</Bold>\n                <FlexRow>\n                    <Java>\n                        {`\n                        @Configuration\n                        @ComponentScan(\"com.arash\")\n                        public class AppConfig {\n                        }\n                        \n                        /* bean class */\n                        @Component\n                        public class Bean1 {\n                        }\n                        \n                        /* catching bean */\n                        public static void main(String[] args){\n                            AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n                            context.register(AppConfig.class);\n                            context.refresh();\n                            \n                            Bean1 bean1 = context.getBean(Bean1.class);\n                        }\n                        `}\n                    </Java>\n                    <div>\n                        <img src={components} alt={'Component hierarchy'}/>\n                    </div>\n                </FlexRow>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getScanningFilter() {\n    return (\n        <Frame title={'Filtering through component scan'}>\n            It is wise to exclude unwanted classes from being scanned by spring.<br/>\n            <Java title={1}>\n                {`\n                @Configuration\n                /*\n                 * type = FilterType.REGEX\n                 * type = FilterType.ANNOTATION\n                 * type = FilterType.ASPECTJ\n                 * type = FilterType.ASSIGNABLE_TYPE\n                 * type = FilterType.CUSTOM\n                 */\n                @ComponentScan(basePackages = \"com\", includeFilters = {\n                @ComponentScan.Filter(type = FilterType.REGEX, pattern = \"*.*spring.obje*\"),\n                    @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = MyAnnotation.class),\n                    @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = Person.class)\n                })\n                public class AppConfig {\n                }`}\n            </Java>\n            <Xml title={1}>\n                {`\n                <beans ...>\n                    <context:component-scan base-package=\"com\">\n                        <context:include-filter type=\"regex\" expression=\"soWhat*\"/>\n                        <context:include-filter type=\"annotation\" expression=\"com.arash.models.common.MyAnnotation\"/>\n                    </context:component-scan>\n                </beans>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getXmlBasic() {\n    return (\n        <Frame title={'Passing arguments in xml'}>\n            <InfoIcon>\n                Catching data source for mysql sample:\n                <Xml>\n                    {`\n                    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\">\n                        <property name=\"username\" value=\"root\"/>\n                        <property name=\"password\" value=\"\"/>\n                        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/spring\"/>\n                    </bean>`}\n                </Xml>\n            </InfoIcon>\n            Passing arguments through xml configuration file is available via constructor and setters.\n            <Java>\n                {`\n                public class Car {\n                    private String name;\n                    private int color;\n                \n                    public Car(String name, int color) {\n                        this.name = name;\n                        this.color = color;\n                    }\n                }\n                \n                public class Person {\n                    private String name;\n                    private String email;\n                    private int age;\n                    private int hairColor;\n                    private Car car;\n                \n                    public Person(String name, String email, int age) {\n                        this.name = name;\n                        this.email = email;\n                        this.age = age;\n                    }\n                \n                    public void setHairColor(int hairColor) {\n                        this.hairColor = hairColor;\n                    }\n                    \n                    public void setCar(Car car) {\n                        this.car = car;\n                    }\n                }\n                `}\n            </Java>\n            <Xml>\n                {`\n                <bean id=\"car\" class=\"com.arash.models.multiconfigfiles.Car\">\n                    <constructor-arg value=\"ford\"/>\n                    <constructor-arg value=\"-16711936\"/>\n                </bean>\n            \n                <bean id=\"person\" class=\"com.arash.models.multiconfigfiles.Person\">\n                    <!--\n                        constructor args are sent by order by default,\n                        but you can provide more information such as type or index\n                    -->\n                    <constructor-arg value=\"Arash\"/>\n                    <constructor-arg index=\"1\" value=\"arash.12@gmail.com\"/>\n                    <constructor-arg type=\"int\" value=\"33\"/>\n                    \n                    <!-- passing parameter by setter -->\n                    <property name=\"hairColor\" value=\"-16777216\"/>\n                    <property name=\"car\" ref=\"car\"/> <!-- sending by ref -->\n                </bean>\n                `}\n            </Xml>\n            <HorizontalLine/>\n            It is also possible to pass values to relevant field by namespace<br/>\n            <Highlight>Remember to load <Red>xmlns:p=\"http://www.springframework.org/schema/p\"</Red> in\n                header</Highlight>\n            <Xml>\n                {`\n                    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n                           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                           xmlns:p=\"http://www.springframework.org/schema/p\"\n                           xsi:schemaLocation=\"\n                                http://www.springframework.org/schema/beans\n                                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n                        <bean id=\"person2\" class=\"com.arash.models.xml.namespace.Person\"\n                              p:car-ref=\"car\"\n                              p:hairColor=\"-16711936\">\n                            <constructor-arg value=\"Arash\"/>\n                            <constructor-arg index=\"1\" value=\"arash.12@gmail.com\"/>\n                            <constructor-arg type=\"int\" value=\"33\"/>\n                        </bean>\n                    </bean>\n                    `}\n            </Xml>\n\n            <Important>Using property is recommended over constructor when we face \"circular dependency\" or \"different\n                life length\"</Important>\n        </Frame>\n    )\n}\n\nfunction getAnnotationBasic() {\n    return (\n        <Frame title={'Passing arguments in annotation'}>\n            <InfoIcon>\n                <p>\n                    <Blue>Wiring:</Blue> connecting objects to each other is called wiring.\n                </p>\n                <p>\n                    <Blue>@Autowired</Blue> does not work on arrays\n                </p>\n                <p>\n                    <Purple>some equivalents for annotations:</Purple><br/>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>Spring</th>\n                            <th>javax</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td>@Autowired</td>\n                            <td>@Inject, @Resource</td>\n                        </tr>\n                        <tr>\n                            <td>@Component</td>\n                            <td>@Named, @ManagedBean</td>\n                        </tr>\n                        <tr>\n                            <td>@Qualifier</td>\n                            <td>@Qualifier, @Named</td>\n                        </tr>\n                        <tr>\n                            <td>@Value</td>\n                            <td>---</td>\n                        </tr>\n                        <tr>\n                            <td>@Required</td>\n                            <td>---</td>\n                        </tr>\n                        <tr>\n                            <td>@Lazy</td>\n                            <td>---</td>\n                        </tr>\n                        <tr>\n                            <td>@Scope(“singleton”)</td>\n                            <td>@Singleton</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </p>\n            </InfoIcon>\n            <Java>\n                {`\n                @Component\n                public class Car {\n                    private String name;\n                    private int color;\n                \n                    public Car(@Value(\"ford\") String name, @Value(\"-16711936\") int color) {\n                        this.name = name;\n                        this.color = color;\n                    }\n                }\n                \n                @Component\n                public class Person {\n                    private String name;\n                \n                    @Value(\"-16777216\")\n                    private int hairColor;\n                \n                    @Autowired\n                    private Car car;\n                    \n                    @Value(\"Arash\")\n                    public void setName(String name){\n                        this.name = name;\n                    }\n                }\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getXmlLocalClass() {\n    return (\n        <Frame title={'Inner & Nested class in xml'}>\n            Instantiating nested class is easy as the class is static\n            <Java>\n                {`\n                    public class ParentClass {\n                        \n                        public static class NestedClass {\n                        }\n                        \n                        public class InnerClass {\n                        }\n                    }\n                    \n                    //how to get instance in java\n                    ParentClass parentClass = new ParentClass();\n                    ParentClass.NestedClass nestedClass = new ParentClass.NestedClass();\n                    ParentClass.InnerClass innerClass = pc.new InnerClass();`}\n            </Java>\n            <Xml>\n                {`\n                    <!-- parent class: -->\n                    <bean id=\"parentClass\" class=\"ParentClass\"/>\n                    \n                    <!-- creating public nested class is easy. Use '$' instead of '.' -->\n                    <bean id=\"nestedClass\" class=\"ParentClass$NestedClass\"/>\n                    `}\n            </Xml>\n            Instantiating inner class is a bit more complicated as it needs its parent class instance.<br/>\n            To do that, we should hire a generator<br/><br/>\n            <Bullet title={'1.'}><BlueBold>factory-bean:</BlueBold>\n                <Java>\n                    {`\n                        public class ParentClass {\n                        \n                            public static class NestedClass {\n                            }\n                            \n                            public class InnerClass {\n                            }\n                        }\n                        \n                        public class InnerClassFactory implements FactoryBean<ParentClass.InnerClass> {\n                \n                            @Override\n                            public ParentClass.InnerClass getObject() throws Exception {\n                                ApplicationContext ctx = ContextProvider.getXmlContext();\n                                ParentClass pc = (ParentClass) ctx.getBean(\"parentClass\");\n                                return pc.new InnerClass();\n                            }\n                        \n                            @Override\n                            public Class<?> getObjectType() {\n                                return ParentClass.InnerClass.class;\n                            }\n                            \n                            @Override\n                            public boolean isSingleton() {\n                                return false;\n                            }\n                        }\n                        `}\n                </Java>\n                <Xml>\n                    {`\n                        <bean id=\"parentClass\" class=\"ParentClass\"/>\n                                \n                        <!-- creating InnerClass by factory bean. Factory class must implement FactoryBean -->\n                        <bean id=\"innerClass\" class=\"com.arash.models.localclass.InnerClassFactory\">`}\n                </Xml>\n\n            </Bullet>\n            <Bullet title={'2.'}><BlueBold>factory-method:</BlueBold>\n                <Java>\n                    {`\n                        public class ParentClass {\n                            public static class NestedClass {\n                            }\n                        \n                            public class InnerClass {\n                            }\n                            \n                            public InnerClass getInnerClassInstance() {\n                                return new InnerClass();\n                            }\n                        }`}\n                </Java>\n                <Xml>\n                    {`\n                        <bean id=\"parentClass\" class=\"ParentClass\"/>\n                        \n                        <!-- creating InnerClass by factory method -->\n                        <bean id=\"innerClass\" class=\"com.arash.models.localclass.ParentClass.InnerClass\"\n                                factory-bean=\"parentClass\" factory-method=\"getInnerClassInstance\"/>`}\n                </Xml>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getAnnotationLocalClass() {\n    return (\n        <Frame title={'Inner & Nested class in annotation'}>\n            <Java>\n                {`\n                @Component\n                public class ParentClass {\n                    @Component\n                    public static class NestedClass {\n                    }\n                \n                    @Component\n                    public class InnerClass {\n                    }\n                }\n                \n                //usage>>>\n                ApplicationContext ctx = ContextProvider.getAnnotaionContext();\n                ParentClass pc = ctx.getBean(ParentClass.class);\n                ParentClass.NestedClass nc = ctx.getBean(ParentClass.NestedClass.class);\n                ParentClass.InnerClass ic=ctx.getBean(ParentClass.InnerClass.class);\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getAlias() {\n    return (\n        <Frame title={'Alias'}>\n            <Xml title={1}>\n                {`\n                <bean id=\"car\" name=\"car\" class=\"com.arash.models.Car\"/>\n                <alias name=\"car\" alias=\"automobile\"/>\n                <alias name=\"car\" alias=\"vehicle\"/>\n                `}\n            </Xml>\n            <Java title={1}>\n                {`\n                @Bean({\"car\", \"automobile\", \"vehicle\"})\n                private Car getCar() {\n                    return new Car(\"ford\", -16711936);\n                }`}\n            </Java>\n            <Java description={'usage'}>\n                {`\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                Car car = (Car) ctx.getBean(\"car\");\n                Car car2 = (Car) ctx.getBean(\"automobile\");\n                Car car3 = (Car) ctx.getBean(\"vehicle\");`}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getPrivateConstructor() {\n    return (\n        <Frame title={'Private constructor'}>\n            <Java>\n                {`\n                public class PrivateConstructor {\n                \n                    private PrivateConstructor() {\n                    }\n                    \n                    public static PrivateConstructor getInstance(){\n                        return new PrivateConstructor();\n                    }\n                }`}\n            </Java>\n            <Xml>\n                {`\n                <!-- \n                    as spring is all about reflection, so program elements scope makes no problem.\n                    It works pretty nice in spring 4. Also, some other ways are avaiable\n                -->\n                <bean id=\"privateConstructor\" class=\"com.arash.models.privateconstructor.PrivateConstructor\"/>\n                \n                <!-- access through static method -->\n                <bean id=\"privateConstructor2\" class=\"com.arash.models.privateconstructor.PrivateConstructor\"\n                    factory-method=\"getInstance\"/>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getXmlCircularDependencies() {\n    return (\n        <Frame title={'Circular dependency in xml configuration'}>\n            The problem is a set of commplicated dependencies which can not be resolved so easily.<br/>\n            <img src={circularDependency} alt={'circular dependency'}/><br/><br/>\n            check the following examples out:\n            <FlexRow>\n                <Java title={true}>\n                    {`\n                    public class Student {\n                        private Shoes shoes;\n        \n                        public Student(Shoes shoes) {\n                            this.shoes = shoes;\n                        }\n                    }\n                    \n                    public class Shoes {\n                        private Student student;\n                    \n                        public Shoes(Student student) {\n                            this.student = student;\n                        }\n                    }`}\n                </Java>\n                <Xml title={true} description={'this config fails'}>\n                    {`\n                    <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                        <constructor-arg ref=\"shoes\"/>\n                    </bean>\n                    <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\">\n                        <constructor-arg ref=\"student\"/>\n                    </bean>\n                `}\n                </Xml>\n            </FlexRow>\n            <HorizontalLine/>\n            <span className={'purple'}>To overcome this problem there are some suggestions:</span>\n            <Bullet title={'1.'}>Changing a constructor to setter<br/>\n                <Important>Bean definition follows no order whilst usage order is, so this way is not\n                    recommended</Important><br/>\n                <Highlight>If you turn constructor of both mentioned classes to setter, there would be no matter with\n                    the\n                    order</Highlight>\n                <FlexRow>\n                    <Java title={true} description={'use setter instead of constructor'}>\n                        {`\n                        public class Student {\n                            private Shoes shoes;\n                        \n                            public void setShoes(Shoes shoes) {\n                                this.shoes = shoes;\n                            }\n                        }\n                        \n                        public class Shoes {\n                            private Student student;\n                        \n                            public Shoes(Student student) {\n                                this.student = student;\n                            }\n                        }\n                        \n                        ----------------------------------------------------------\n                        \n                        //usage\n                        ApplicationContext ctx = ContextProvider.getXmlContext();\n                        \n                        //correct order\n                        Student student = (Student) ctx.getBean(\"student\");\n                        Shoes shoes= (Shoes) ctx.getBean(\"shoes\");\n                        \n                        //incorrect order\n                        Shoes shoes= (Shoes) ctx.getBean(\"shoes\");\n                        Student student = (Student) ctx.getBean(\"student\");\n                        `}\n                    </Java>\n                    <Xml title={true}\n                         description={'one property & one constructor'}>\n                        {`\n                        <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                            <property name=\"shoes\" ref=\"shoes\"/>\n                        </bean>\n                        \n                        <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\">\n                            <constructor-arg ref=\"student\"/>\n                        </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet><br/>\n            <Bullet title={'2.'}>Using lazy-init<br/>\n                By this way, we can define that which bean must be initialized on demand, therefor order problem\n                ignored.\n                <FlexRow>\n                    <Java title={true} description={'only student drops its constructor'}>\n                        {`\n                        public class Student {\n                            private Shoes shoes;\n                        \n                            public void setShoes(Shoes shoes) {\n                                this.shoes = shoes;\n                            }\n                        }\n                        \n                        public class Shoes {\n                            private Student student;\n                        \n                            public Shoes(Student student) {\n                                this.student = student;\n                            }\n                        }\n                        `}\n                    </Java>\n                    <Xml title={true} description={'define who has to laod at first'}>\n                        {`\n                         <bean id=\"student\" class=\"com.arash.models.circulardep.Student\" lazy-init=\"false\">\n                             <property name=\"student\" ref=\"shoes\"/>\n                         </bean>\n                        \n                         <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\" lazy-init=\"true\">\n                             <constructor-arg ref=\"student\"/>\n                         </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet><br/>\n            <Bullet title={'3.'}>Using idref (idref is id of a bean as string, but it checks the existence of the\n                bean)\n                <FlexRow>\n                    <Java title={true} description={'save idref and init before use'}>\n                        {`\n                        public class Student {\n                            private String shoesId;\n                            private Shoes shoes;\n                        \n                            public Student(String shoesId) {\n                                this.shoesId = shoesId;\n                            }\n                        \n                            public void init(){\n                                ApplicationContext ctx = ContextProvider.getXmlContext();\n                                shoes = (Shoes) ctx.getBean(shoesId);\n                            }\n                        }`}\n                    </Java>\n                    <Xml title={true} description={'pass idref insted of ref'}>\n                        {`\n                        <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                            <constructor-arg>\n                                <idref bean=\"shoes\"/>\n                            </constructor-arg>\n                        </bean>\n                        <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\">\n                            <constructor-arg ref=\"student\"/>\n                        </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet><br/>\n            <Bullet title={'4.'}>Using depends-on\n                <FlexRow>\n                    <Java title={true}>\n                        {`\n                        public class Student {\n                            private Shoes shoes;\n                        \n                            public void setShoes(Shoes shoes) {\n                                this.shoes = shoes;\n                            }\n                        }\n                        \n                        public class Shoes {\n                            private Student student;\n                        \n                            public Shoes(Student student) {\n                                this.student = student;\n                            }\n                        }\n                        `}\n                    </Java>\n                    <Xml title={true} description={'define who depends on who'}>\n                        {`\n                        <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                            <property name=\"student\" ref=\"shoes\"/>\n                        </bean>\n                    \n                        <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\" depends-on=\"student\" >\n                            <constructor-arg ref=\"student\"/>\n                        </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getAnnotationCircularDependencies() {\n    return (\n        <Frame title={'Circular dependency in annotation configuration'}>\n            <InfoIcon>\n                <Blue>@Lazy</Blue> is available in spring too to load a programming element on demand\n                <Java>\n                    {`\n                    @Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.FIELD})\n                    @Retention(RetentionPolicy.RUNTIME)\n                    @Documented\n                    public @interface Lazy {\n                        boolean value() default true;\n                    }`}\n                </Java>\n            </InfoIcon>\n            <Java description={'resolve both via constructor; won\\'t work'}>\n                {`\n                @Component\n                public class Student {\n                    private Shoes shoes;\n                \n                    public Student(@Autowired Shoes shoes) {\n                        this.shoes = shoes;\n                    }\n                }\n                \n                @Component\n                public class Shoes {\n                    private Student student;\n                \n                    public Shoes(@Autowired Student student) {\n                        this.student = student;\n                    }\n                }`}\n            </Java>\n            <HorizontalLine/>\n            <Java description={'resolve only one via constructor; works painless'}>\n                {`\n                @Component\n                public class Student {\n                    private Shoes shoes;\n                    \n                     public Student(@Autowired Shoes shoes) {\n                        this.shoes = shoes;\n                    }\n                }\n                \n                @Component\n                public class Shoes {\n                    @Autowired\n                    private Student student;\n                }`}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getXmlLoadFromFile() {\n    return (\n        <Frame title={'Load properties from a file in xml'}>\n            Let's have a property file containing:\n            <GenericCode title={'jdbc.properties'}>\n                {`\n                    jdbc.driverClassName=com.mysql.jdbc.Driver\n                    jdbc.url=jdbc:mysql://localhost:3306/concretepage\n                    jdbc.username=root\n                    jdbc.password=`}\n            </GenericCode>\n\n            Now it's time to load the file\n            <Xml description={'using PropertySourcesPlaceholderConfigurer class'}>\n                {`\n                    <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n                        <property name=\"location\" value=\"jdbc.properties\"/>\n                    </bean>`}\n            </Xml>\n            <Xml description={'using spring itself place-holder manager'}>\n                {'<context:property-placeholder location=\"jdbc.properties\"/>'}\n            </Xml>\n            <Xml description={'usage'}>\n                {`\n                    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\">\n                        <property name=\"username\" value=\"$\\{jdbc.username}\"/>\n                        <property name=\"password\" value=\"$\\{jdbc.password}\"/>\n                        <property name=\"url\" value=\"$\\{jdbc.url}\"/>\n                        <property name=\"driverClassName\" value=\"$\\{jdbc.driverClassName}\"/>\n                    </bean>`}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getJavaLoadFromFile() {\n    return (\n        <Frame title={'Load properties from a file in annotation'}>\n            <Bullet title={'1.'}>\n                Via context environment:<br/>\n                add <Blue>@PropertySource</Blue> to your configuration class and catch it by context.getEnvironment()\n                <Java>\n                    {`\n                    @Configuration\n                    @ComponentScan(\"com.arash\")\n                    @PropertySource(\"classpath:jdbc.properties\")\n                    public class AppConfig {\n                    }\n                    \n                    //usage>>>\n                    ApplicationContext ctx = ContextProvider.getAnnotaionContext();\n                    Environment env = ctx.getEnvironment();\n                    System.out.println(\"driver: \" + env.getProperty(\"jdbc.driverClassName\"));\n                    System.out.println(\"url: \"+env.getProperty(\"jdbc.url\"));\n                    System.out.println(\"username: \"+env.getProperty(\"jdbc.username\"));\n                    System.out.println(\"password: \"+env.getProperty(\"jdbc.password\"));\n                    `}\n                </Java>\n            </Bullet>\n            <Bullet title={'2.'}>\n                Via <Blue>@Value</Blue>:<br/>\n                use <Blue>@PropertySource</Blue> on configuration file and\n                define <Blue>PropertySourcesPlaceholderConfigurer</Blue> bean\n                <Java>\n                    {`\n                    @Configuration\n                    @ComponentScan(\"com.arash\")\n                    @PropertySources({\n                            @PropertySource(\"configs.properties\"),\n                            @PropertySource(\"classpath:jdbc.properties\")\n                    })\n                    public class AppConfig {\n                    \n                        @Bean\n                        public PropertySourcesPlaceholderConfigurer propertyConfigInDev() {\n                            return new PropertySourcesPlaceholderConfigurer();\n                        }\n                    }\n                    \n                    // Please notice that you must follow format \"#{'$\\{prop-name}'}\" for @Value\n                    @Component\n                    public class JdbcProp {\n                        @Value(\"#{'$\\{jdbc.driverClassName}'}\")\n                        private String driverClassName;\n                    \n                        @Value(\"#{'$\\{jdbc.url}'}\")\n                        private String url;\n                    \n                        @Value(\"#{'$\\{jdbc.username}'}\")\n                        private String username;\n                    \n                        @Value(\"#{'$\\{jdbc.password}'}\")\n                        private String password;\n                    }`}\n                </Java>\n            </Bullet>\n            <HorizontalLine/>\n            Loading generic file:\n            <Bullet title={'1.'}>\n                Through <Blue>@Value</Blue>\n                <Java>\n                    {`\n                    @Component\n                    public class TextFile {\n                        @Value(\"classpath:data.bat\")\n                        private String value;\n                    }\n                    `}\n                </Java>\n            </Bullet>\n            <Bullet title={'2.'}>\n                Through <Blue>Resource</Blue>:<br/>\n                Context has a Resource object embedded, So you can use that one too\n                <Java>\n                    {`\n                    @Component\n                    public class AnyFile {\n                        @Autowired\n                        private ResourceLoader resourceLoader;\n                    \n                        public Resource getBigFile(){\n                            return resourceLoader.getResource(\"classpath:bigData.dat\");\n                        }\n                    }`}\n                </Java>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getXmlChangingMethodBody() {\n    return (\n        <Frame title={'Changing method body'}>\n            <Bullet title={'1.'}>\n                Lookup method<br/>\n                To put it in simple words, lookup method injection is the process to override a Spring bean at the\n                runtime.<br/>\n                Use \"lookup\" to inject a method body without implementing an abstract class<br/>\n                <Java>\n                    {`\n                    public class CheeseBurger {\n                    }\n                    \n                    public class MushroomBurger {\n                    }\n                    \n                    public abstract class BurgerShop {\n                        public abstract MushroomBurger getMushroomBurger();\n                    \n                        public abstract CheeseBurger getCheeseBurger();\n                    }\n                    `}\n                </Java>\n                <Xml>\n                    {`\n                    <bean id=\"cheeseBurger\" class=\"com.arash.models.lookup.CheeseBurger\"/>\n                    <bean id=\"mushroomBurger\" class=\"com.arash.models.lookup.MushroomBurger\"/>\n                    <bean id=\"burgerShop\" class=\"com.arash.models.lookup.BurgerShop\">\n                        <lookup-method bean=\"cheeseBurger\" name=\"getCheeseBurger\"/>\n                        <lookup-method bean=\"mushroomBurger\" name=\"getMushroomBurger\"/>\n                    </bean>\n                    `}\n                </Xml>\n            </Bullet>\n            <HorizontalLine/>\n            <Bullet title={'2.'}>\n                Replacer method<br/>\n                Use \"method replacer\" to replace a method with the desired one by implementing MethodReplacer\n                <Java>\n                    {`\n                    public class MyCar {\n                        public String getMyFavoriteCar() {\n                            return \"Pagani\";\n                        }\n                    }\n                    \n                    public class MyReplacer implements MethodReplacer {\n                        @Override\n                        public Object reimplement(Object o, Method method, Object[] objects) throws Throwable {\n                            return \"Lamborghini\";\n                        }\n                    }\n                    `}\n                </Java>\n                <Xml>\n                    {`\n                    <bean id=\"replacer\" class=\"com.arash.models.replacer.MyReplacer\"/>\n                    <bean id=\"myCar\" class=\"com.arash.models.replacer.MyCar\">\n                        <replaced-method name=\"getMyFavoriteCar\" replacer=\"replacer\"/>\n                    </bean>\n                    `}\n                </Xml>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getScopes() {\n    return (\n        <Frame title={'Scopes'}>\n            <Blue>Defined scopes:</Blue>\n            <Bullet title={'singleton:'}>only one instance</Bullet>\n            <Bullet title={'prototype:'}>new instance on each call</Bullet>\n            <Bullet title={'request:'}>one instance per network request. It saves on request object</Bullet>\n            <Bullet title={'session:'}>one instance per session (again on the network)</Bullet>\n            <Bullet title={'application:'}>one instance per application. It stores in ServletContext</Bullet>\n            <Bullet title={'websocket:'}>one instance per websocket.</Bullet>\n            <Xml description={'xml configuration'}>\n                {`<bean id=\"bean1\" class=\"Bean1\" scope=\"prototype\"/>`}\n            </Xml>\n            <Java description={'java configuration'}>\n                {`\n                @Configuration\n                public class AppConfig {\n                    @Bean()\n                    @Scope(\"prototype\")\n                    private Bean1 getBean1(){\n                        return new Bean1();\n                    }\n                }`}\n            </Java>\n            <Java description={'annotation configuration'}>\n                {`\n                @Component\n                @Scope(\"prototype\")\n                public class Bean1 {\n                }`}\n\n            </Java>\n            <p>\n                <Red>All web scopes need listener to get worked and listeners must be defined at web layer</Red>\n            </p>\n        </Frame>\n    )\n}\n\nfunction getScopeIssue() {\n    return (\n        <Frame title={'Different scope wiring issue'}>\n            <InfoIcon>\n                Some times we involve with Longer Lived objects and Shorter Lived objects. What really happens\n                when you have different scopes? Who has to handle this situation.<br/>\n                For example, you have a singleton class which contains some prototype classes. Singleton class is\n                created only once and never changes but prototype classes must be changed each time.<br/><br/>\n                Consider the following example:\n                <FlexRow>\n                    <Java>\n                        {`\n                public class PrototypeClass {\n                }\n                \n                public class SingletonClass {\n                    private PrototypeClass prototypeClass;\n                    \n                    public PrototypeClass getPrototypeClass() {\n                        return prototypeClass;\n                    }\n                    \n                    public void setPrototypeClass(PrototypeClass prototypeClass) {\n                        this.prototypeClass = prototypeClass;\n                    }\n                }`}\n                    </Java>\n                    <Xml>\n                        {`\n                    <bean id=\"singletonClass\" class=\"com.arash.models.scopes.SingletonClass\" scope=\"singleton\">\n                        <property name=\"prototypeClass\" ref=\"prototypeClass\"/>\n                    </bean>\n                    <bean id=\"prototypeClass\" class=\"com.arash.models.scopes.PrototypeClass\" scope=\"prototype\"/>`}\n                    </Xml>\n                </FlexRow>\n                <Java description={'usage:'}>\n                    {`\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                SingletonClass sc = ctx.getBean(\"singletonClass\", SingletonClass.class);\n                Stream\n                        .generate(sc::getPrototypeClass)\n                        .limit(2)\n                        .forEach(System.out::println);\n                \n                result: >>>\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\n                `}\n                </Java>\n                <Red>You see that created objects are the same:</Red>\n            </InfoIcon>\n            To solve this issue\n            <Bullet title={'1.'}><Purple>lookup-method & replacer-method:</Purple><br/>\n                lookup and replacer methods create object under defined circumstances.\n            </Bullet>\n            <Bullet title={'2.'}><Purple>Scoped proxy:</Purple><br/>\n                we can declare a proxy to join a short-life time and long-life time classes.<br/>\n                In fact, proxy comes stands in the middle and takes the responsibility of object creation.<br/><br/>\n                <Important>Put the proxy on shorter-life time class</Important>\n                <Xml title={1}>\n                    {`\n                    <bean id=\"singletonClass\" class=\"com.arash.models.scopes.SingletonClass\" scope=\"singleton\">\n                        <property name=\"prototypeClass\" ref=\"prototypeClass\"/>\n                    </bean>\n                    <bean id=\"prototypeClass\" class=\"com.arash.models.scopes.PrototypeClass\" scope=\"prototype\">\n                        <aop:scoped-proxy/>\n                    </bean>`}\n                </Xml>\n                <Java title={1}>\n                    {`\n                    @Component\n                    @Singleton\n                    public class SingletonClass {\n                    }\n                    \n                    @Component\n                    @Scope(value = \"prototype\",proxyMode = ScopedProxyMode.TARGET_CLASS)\n                    public class PrototypeClass {\n                    }\n                    `}\n                </Java>\n            </Bullet>\n            <div style={{maxWidth: '40rem'}}>\n                <Highlight>When {'<aop:scoped-proxy/>'} is in root node, all beans will be serialized at first, then\n                    on request, the bean will be deserialized, so the instance is a copy of the object.</Highlight>\n            </div>\n        </Frame>\n    )\n}\n\nfunction getCollections() {\n    return (\n        <Frame title={'Collections'}>\n            <Xml>\n                {`\n                <bean id=\"propCollection\" class=\"com.arash.models.collections.PropertyCollection\">\n                    <property name=\"map\">\n                        <props>\n                            <prop key=\"key1\">value1</prop>\n                            <prop key=\"key2\">value2</prop>\n                        </props>\n                    </property>\n                </bean>\n                \n                <bean id=\"mapCollection\" class=\"com.arash.models.collections.MapCollection\">\n                    <property name=\"map\">\n                        <map>\n                            <entry key=\"key1\" value=\"value1\"/>\n                            <entry key=\"key2\" value=\"value2\"/>\n                        </map>\n                    </property>\n                </bean>\n                \n                <bean id=\"listCollection\" class=\"com.arash.models.collections.ListCollection\">\n                    <property name=\"map\">\n                        <list>\n                            <value>entry1</value>\n                            <ref bean=\"bean1\"/>\n                        </list>\n                    </property>\n                </bean>\n                \n                <bean id=\"setCollection\" class=\"com.arash.models.collections.SetCollection\">\n                    <property name=\"map\">\n                        <set>\n                            <value>entry1</value>\n                            <ref bean=\"bean1\"/>\n                        </set>\n                    </property>\n                </bean>`}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getBeanAware() {\n    return (\n        <Frame title={'Aware classes'}>\n            <InfoIcon>\n                <Purple>Bean lifecycle</Purple><br/>\n                <img src={beanLifecycle} alt={'bean lifecycle'} className={'center-horizontally-relative'}\n                     style={{width: '500px'}}/>\n            </InfoIcon>\n            Some times we need that a bean be aware of its context features. To reach this, we can use aware interfaces.<br/>\n            <div style={{maxWidth: '40rem'}}>\n                To hook our code into bean lifecycle, there are some interfaces available which do the job, also you can\n                do that via xml or annotaion in some cases.\n            </div>\n            <Java>\n                {`\n                public class MyBean implements Phased, BeanNameAware, BeanFactoryAware, ApplicationContextAware,\n                                                BeanPostProcessor, InitializingBean, DisposableBean {\n                    /*Phased*/\n                    @Override\n                    public int getPhase() {return 0;}\n                \n                    /*BeanNameAware*/\n                    @Override\n                    public void setBeanName(String s) {}\n                \n                    /*BeanFactoryAware*/\n                    @Override\n                    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {}\n                \n                    /*ApplicationContextAware*/\n                    @Override\n                    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {}\n                \n                    /*BeanPostProcessor.preInitialization*/\n                    @Override\n                    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n                        return null;\n                    }\n                \n                    /*InitializingBean*/\n                    @Override\n                    public void afterPropertiesSet() throws Exception {}\n                \n                    /*BeanPostProcessor.postInitialization*/\n                    @Override\n                    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n                        return null;\n                    }\n                \n                    /*DisposableBean*/\n                    @Override\n                    public void destroy() throws Exception {}\n                }`}\n            </Java>\n            <Important>To listen to all beans destruction: <Bold>context.registerShutDownHook()</Bold></Important>\n            <br/><br/>\n            <FlexRow>\n                <Xml description={'pom.xml'}>\n                    {`\n                    <dependency>\n                        <groupId>org.apache.james</groupId>\n                        <artifactId>james-server-lifecycle-spring</artifactId>\n                        <version>3.0-beta4</version>\n                    </dependency>\n                `}\n                </Xml>\n                <Java description={'annotation'}>\n                    {`\n                    public class MyBean2 {\n                        \n                        @PostConstruct\n                        void afterContruct(){}\n        \n                        @PreDestroy\n                        void preDestroy(){}\n                    }`}\n                </Java>\n            </FlexRow>\n            <Java title={1}>\n                {`\n                    @Configuration\n                    public class AppConfig {\n                        \n                        @Bean(initMethod = \"\")\n                        public Bean1 getBean1(){\n                            return new Bean1();\n                        }\n                    }`}\n            </Java>\n            <Xml description={'Via xml'}>\n                {`\n                <!-- post-init -->\n                <bean init-bean=\"...\"/>\n                <bean init-method=\"...\"/>\n                \n                <!-- to init all bean as the same -->\n                <beans default-init-method=\"unique method\"/>\n\n                <!-- pre-destroy -->\n                <bean destroy-method=\"...\"/>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getTemplateClass() {\n    return (\n        <Frame title={'Template class'}>\n            Template class come in when we are willing to initialize a set of beans refusing any much bothering.\n            <FlexRow>\n                <Java>\n                    {`\n                    public class Student {\n                    private String name;\n                    private int age;\n                    private String hairColor;\n\n                    public void setName(String name) {\n                    this.name = name;\n                }\n\n                    public void setAge(int age) {\n                    this.age = age;\n                }\n\n                    public void setHairColor(String hairColor) {\n                    this.hairColor = hairColor;\n                }\n                }`}\n                </Java>\n                <Xml>\n                    {`\n                    <!-- declare an abstract class -->\n                    <bean id=\"templatePerson\" abstract=\"true\">\n                    <property name=\"name\" value=\"arash\"/>\n                    <property name=\"age\" value=\"33\"/>\n                    </bean>\n\n                    <!-- define the abstract class as parent -->\n                    <bean id=\"student\" class=\"com.arash.models.Student\" parent=\"templatePerson\">\n                    <property name=\"hairColor\" value=\"black\"/>\n                    </bean>`}\n                </Xml>\n            </FlexRow>\n\n        </Frame>\n    )\n}\n\nfunction getMerging() {\n    return (\n        <Frame title={'Merging configuration files'}>\n            <Xml description={'merging other configurations into xml'}>\n                {`\n                    <beans ...>\n                        <context:annotation-config/>\n                        \n                        <!-- scan a package to figure out its Components -->\n                        <context:component-scan base-package=\"com\"/>\n                    </beans>\n                `}\n            </Xml>\n            <Java description={'merging other configurations into java class'}>\n                {`\n                //merge other classes\n                @Import(OtherAppConfig.class)\n                \n                //merge xml files\n                @ImportResource(locations = \"classpath:containerconfig.xml\")\n                \n                @Configuration\n                public class AppConfig {\n                }\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getMultipleCandidate() {\n    return (\n        <Frame title={'multiple candidate'}>\n            There is possibility to have more than 1 candidate when you request a bean. To make spring to return true\n            object you can use <Bold>primary</Bold> and <Bold>qualifier</Bold> key words.\n            <Bullet title={'1.'}>\n                <Bold>Primary:</Bold><br/>\n                Set a bean as primary\n                <FlexRow>\n                    <Xml title={1}>\n                        {`\n                    <bean id=\"ferrai\" class=\"com.arash.models.multiplecandidates.Ferrari\" primary=\"true\"/>\n                    <bean id=\"lamborghini\" class=\"com.arash.models.multiplecandidates.Lamborghini\">`}\n                    </Xml>\n                    <Java title={1}>\n                        {`\n                    @Configuration\n                    public class AppConfig {\n                        @Primary\n                        @Bean\n                        public Car getLamborghini() {\n                            return new Lamborghini();\n                        }\n    \n                        @Bean\n                        public Car getFerrari() {\n                            return new Ferrari();\n                        }\n                    }`}\n                    </Java>\n                </FlexRow>\n            </Bullet>\n            <Bullet title={'2.'}>\n                <Bold>Qualifier:</Bold><br/>\n                determine what object should be injected based on the given information\n                <Java description={'custom qualifier'}>\n                    {`\n                    @Target(ElementType.FIELD)\n                    @Retention(RetentionPolicy.RUNTIME)\n                    @Qualifier\n                    public @interface MyQualifier {\n                        String value() default \"\";\n                        String color();\n                    }`}\n                </Java>\n                <FlexRow>\n                    <Xml title={1}>\n                        {`\n                    <!--qualifier with a simple string-->\n                    <bean id=\"ferrai\" className=\"com.arash.models.multiplecandidates.Ferrari\">\n                        <qualifier value=\"ferrari\"/>\n                    </bean>\n\n                    <!--qualifier with custom selection property-->\n                    <bean id=\"lamborghini\"className=\"com.arash.models.multiplecandidates.Lamborghini\">\n                        <qualifier type=\"com.arash.models.multiplecandidates.MyQualifier\">\n                            <attribute key=\"color\"value=\"green\"/>\n                        </qualifier>\n                    </bean>\n\n                    <bean id=\"pagani\"className=\"com.arash.models.multiplecandidates.Pagani\">\n                        <qualifier type=\"com.arash.models.multiplecandidates.MyQualifier\">\n                            <attribute key=\"color\"value=\"black\"/>\n                        </qualifier>\n                    </bean>`}\n                    </Xml>\n                    <Java title={1}>\n                        {`\n                    @Configuration\n                    public class AppConfig {\n                        @Qualifier(\"ferrari\")\n                        @Bean\n                        public Car getFerrari() {\n                            return new Ferrari();\n                        }\n    \n                        @MyQualifier(name = \"lambo\",color = \"green\")\n                        @Bean\n                        public Car getLamborghini() {\n                            return new Lamborghini();\n                        }\n    \n                        @Bean\n                        @MyQualifier(name = \"lambo\",color = \"black\")\n                        public Car getPagani(){\n                            return new Pagani();\n                        }\n                    }`}\n                    </Java>\n                </FlexRow>\n                <Java description={'usage'}>\n                    {`\n                    public class Engineer extends Person {\n                        @MyQualifier(name = \"lambo\", color = \"black\")\n                        @Autowired\n                        private Car car1;\n    \n                        @Autowired\n                        @MyQualifier(name = \"lambo\", color = \"green\")\n                        private Car car2;\n    \n                        @Autowired\n                        @Qualifier(\"ferrari\")\n                        private Car car3;\n                    }`}\n                </Java>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getSpel() {\n    return (\n        <Frame title={'Spring Expression Language (SPEL)'}>\n            this expression is useful when we are willing to pass some data via @Value or XML or to execute a tiny piece\n            of\n            code easily.<br/>\n            The general format is <Bold>{'#{SPEL}'}</Bold><br/><br/>\n            <Purple>Usage:</Purple>\n            <Bullet title={'1.'} level={1}>\n                <Bold>java:</Bold>\n                <Java>\n                    {`\n                    ExpressionParser parser = new SpelExpressionParser();\n                    Expression exp = parser.parseExpression(\"'Hello World'\");\n                    String message = (String) exp.getValue();`}\n                </Java>\n            </Bullet>\n            <Bullet title={'2.'} level={1}>\n                <Bold>xml:</Bold>\n                <Xml>\n                    {`\n                    <!--calculate some value by spel-->\n                    <bean id=\"numberGuess\" class=\"com.arash.models.ANumber\">\n                    <property name=\"randomNumber\" value=\"#{T(java.lang.Math).random() * 100.0}\"/>\n                    </bean>\n\n                    <!--using a property of another class-->\n                    <bean id=\"shapeGuess\" class=\"com.arash.models.ANumber\">\n                    <property name=\"randomNumber\" value=\"#{someClass.prop}\"/>\n                    </bean>`}\n                </Xml>\n            </Bullet>\n            <Bullet title={'1.'} level={1}>\n                <Bold>annotation:</Bold>\n                <Java>\n                    {`\n                    public class ANumber {\n                    @Value(\"900\")\n                    private int randomNumber;\n\n                    public void setRandomNumber(int randomNumber) {\n                    this.randomNumber = randomNumber;\n                    }\n                    }`}\n                </Java>\n            </Bullet>\n            <HorizontalLine/>\n            <Java>\n                {`\n                    /*** literal expression ***/\n                    “'Hello World'”\n                    \"6.0221415E+23\"\n                    \"0x7FFFFFFF\"\n                    \"true\"\n                    \"null\"\n\n                    /*** properties, arrays, lists, maps, indexers ***/\n                    \"Birthdate.Year + 1900\"\n                    \"Members[0].Inventions[6]\"\n                    \"Officers['president'].PlaceOfBirth.City\"\n\n                    StandardEvaluationContext context = new StandardEvaluationContext();\n\n                    /*** inline lists, Maps ***/\n                    List numbers = (List) parser.parseExpression(\"{1,2,3,4}\").getValue(context);\n                    List listOfLists = (List) parser.parseExpression(\"{{'a','b'},{'x','y'}}\").getValue(context);\n                    Map lst = (Map) parser.parseExpression(\"{'k1':'v1','k2':'v2'}\").getValue(context);\n\n                    /*** array construction ***/\n                    int[] numbers1 = (int[]) parser.parseExpression(\"new int[4]\").getValue(context);\n                    int[] numbers2 = (int[]) parser.parseExpression(\"new int[]{1,2,3}\").getValue(context);\n                    int[][] numbers3 = (int[][]) parser.parseExpression(\"new int[4][5]\").getValue(context);\n\n                    /*** methods ***/\n                    String c = parser.parseExpression(\"'abc'.substring(2, 3)\").getValue(String.class);\n\n                    /*** operators ***/\n                    boolean a = parser.parseExpression(\"2 == 2\").getValue(Boolean.class); //true\n                    boolean b = parser.parseExpression(\"2 < -5.0\").getValue(Boolean.class); //false\n                    boolean c = parser.parseExpression(\"'black' < 'block'\").getValue(Boolean.class); //true\n                    boolean d = parser.parseExpression(\"'5.00' matches '^-?\\\\\\\\d+(\\\\\\\\.\\\\\\\\d{2})?$'\").getValue(Boolean.class); //true\n                    boolean e = parser.parseExpression(\"true and false\").getValue(Boolean.class); //false\n                    String expression = \"isMember('Nikola Tesla') and isMember('Mihajlo Pupin')\";\n                    boolean f = parser.parseExpression(\"!true\").getValue(Boolean.class); //false\n                    int two = parser.parseExpression(\"1 + 1\").getValue(Integer.class); // 2\n                    String g = parser.parseExpression(\"'test' + ' ' + 'string'\").getValue(String.class);  // 'test string'\n                    double h = parser.parseExpression(\"1000.00 - 1e4\").getValue(Double.class); // -9000\n                    String i = parser.parseExpression(\"Name = 'Alexandar Seovic'\").getValue(context, String.class);\n\n                    /*** types ***/\n                    Class dateClass = parser.parseExpression(\"T(java.util.Date)\").getValue(Class.class);\n                    Class stringClass = parser.parseExpression(\"T(String)\").getValue(Class.class);\n                    boolean j = parser.parseExpression(\"T(java.math.RoundingMode).CEILING < T(java.math.RoundingMode).FLOOR\").getValue(Boolean.class); //true\n\n                    /*** constructors ***/\n                    Inventor einstein = parser.parseExpression(\"new com.arash.Inventor('Albert Einstein', 'German')\").getValue(Inventor.class);\n\n                    /*** variables ***/\n                    Inventor tesla = new Inventor(\"Nikola Tesla\", \"Serbian\");\n                    StandardEvaluationContext context2 = new StandardEvaluationContext(tesla);\n                    context2.setVariable(\"newName\", \"Mike Tesla\");\n                    parser.parseExpression(\"Name = #newName\").getValue(context);\n                    System.out.println(tesla.getName()); // \"Mike Tesla\"\n\n                    /*** another sample ***/\n                    List<Integer> primes = new ArrayList<Integer>();\n                    primes.addAll(Arrays.asList(2, 3, 5, 7, 11, 13, 17));\n                    context2.setVariable(\"primes\", primes);\n                    List<Integer> primes2 = (List<Integer>) parser.parseExpression(\"#primes.?[#this>10]\").getValue(context); // select of numbers > 10\n\n                    /*** functions ***/\n                    context2.registerFunction(\"reverseString\", StringUtils.class.getDeclaredMethod(\"reverseString\", new Class[]{String.class}));\n                    String helloWorldReversed = parser.parseExpression(\"#reverseString('hello')\").getValue(context, String.class);\n                    context2.setBeanResolver(new MyBeanResolver());\n                    Object bean = parser.parseExpression(\"@foo\").getValue(context);\n\n                    /*** ternary Operator (If - Then - Else) ***/\n                    String falseString = parser.parseExpression(\"false ? 'trueExp' : 'falseExp'\").getValue(String.class);\n\n                    /*** collection Selection ***/\n                    List<Inventor> list = (List<Inventor>) parser.parseExpression(\"Members.?[Nationality == 'Serbian']\").getValue(context2);\n                    Map newMap = (Map) parser.parseExpression(\"map.?[value<27]\").getValue();\n                    List placesOfBirth = (List) parser.parseExpression(\"Members.![placeOfBirth.city]\");\n\n\n                    /*** expression templating ***/\n                    String randomPhrase = parser.parseExpression(\"random number is #{T(java.lang.Math).random()}\", new TemplateParserContext()).getValue(String.class);\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getProfile() {\n    return (\n        <Frame title={'Profile selection'}>\n            <InfoIcon>\n                <Java>\n                    {`\n                    // To check a property existence:\n                    context.getEnvironment().containsProperty(\"who_is_your_daddy\");\n                    \n                    //all environments are not available in spring and some are provide by jvm\n                    System.getProperty(\"propertyName\");\n                    `}\n                </Java>\n                <br/>\n                To change profile at runtime:\n                <Red>!Not tested!</Red>\n                <Bash>{'java -Dspring.profiles.active.pro -jar myJar.jar'}</Bash>\n            </InfoIcon>\n            We can switch to another config via profile.<br/>\n            First of, mark all classes belong to a profile\n            <Java description={'source code'}>\n                {`\n                @Profile(\"develop\",\"!dev\")//! => active profile\n                public class Bean1 {\n                \n                    //access your desired environment\n                    @Autowired\n                    public EnvironmentConfiguration env;\n                }`}\n            </Java>\n            In xml, we have to assign a file for a profile:\n            <Xml>\n                {`\n                <beans\n                    ...\n                    profile=\"develop\">\n                ...\n                </beans>`}\n            </Xml>\n            <HorizontalLine/>\n            Now, select a profile:\n            <Xml description={'pom.xml'}>\n                {`\n                <profiles>\n                    <profile>\n                        <id>develop</id>\n                        <activation>\n                            <activeByDefault>true</activeByDefault>\n                        </activation>\n                    </profile>\n                </profiles>`}\n            </Xml>\n            <HorizontalLine/>\n            To catch active profile:\n            <Java>\n                {`\n                @Component\n                public class Bean1 {\n                    @Autowired\n                    public Environment env;\n                \n                    public void loopThroughActiveProfiles() {\n                        Arrays.stream(env.getActiveProfiles())\n                            .forEach(System.out::println);\n                    }\n                    \n                    @Value(\"#\\{$\\{spring.profiles.active}}\")\n                    String activeProfile;\n                \n                    @Autowired\n                    private ConfigurableEnvironment cfgEnv;\n                    \n                    public void setActiveProfile(String pName) {\n                        //other information is available here\n                        cfgEnv.setActiveProfiles(\"develop\");\n                    }\n                }`}\n            </Java>\n            <div style={{width: '22rem'}}>\n                <Highlight>You have to follow <Bold>profile</Bold> structure in the whole of project when you mention\n                    it.</Highlight>\n            </div>\n        </Frame>\n    )\n}\n\nfunction getEvent() {\n    return (\n        <Frame title={'Events'}>\n            <InfoIcon>\n                <p>\n                    In every event 3 parties are\n                    involved: <Bold>Publisher</Bold>, <Bold>Listener</Bold> and <Bold>EvnetObject</Bold>\n                </p>\n                <p>\n                    If event extends <Bold>ApplicationEvent</Bold>, it is called <Blue>standard evnet</Blue> and if it\n                    implements <Bold>EvnetListener</Bold>, it is called <Blue>custom</Blue> evnet.<br/>\n                </p>\n                <p>\n                    There are limited standard evnets:<br/>\n                    <Bullet title={'ContextStartedEvent'}>When the ApplicationContext is started using the start()\n                        method on the ConfigurableApplicationContext interface. You can poll your database or you can\n                        restart any stopped application after receiving this event.</Bullet>\n                    <Bullet title={'ContextStopedEvnet'}>When the ApplicationContext is stopped using the stop() method\n                        on the ConfigurableApplicationContext interface. You can do required housekeep work after\n                        receiving this event.</Bullet>\n                    <Bullet title={'ContextClosedEvent'}>When the ApplicationContext is closed using the close() method\n                        on the ConfigurableApplicationContext interface.</Bullet>\n                    <Bullet title={'ContextRefreshedEvnet'}>When the ApplicationContext is either initialized or\n                        refreshed. This can also be raised using the refresh() method on the\n                        ConfigurableApplicationContext interface.</Bullet>\n                    <Bullet title={'RequestHandledEvnet'}>This is a web-specific event telling all beans that an HTTP\n                        request has been serviced.</Bullet>\n                    <Bullet title={'ServletRequestHandledEvent'}>This one is child of the previous one and refers those\n                        requests from servlet</Bullet>\n                </p>\n            </InfoIcon>\n            To raise a standard event:\n            <Java>\n                {`\n                @Component\n                public class RegisterPersonEventListener implements ApplicationListener<ContextStartedEvent> {\n                \n                    @Override\n                    public void onApplicationEvent(ContextStartedEvent contextStartedEvent) {\n                        System.out.println(\"context started\");\n                    }\n                }\n                \n                //usage>>>\n                ConfigurableApplicationContext ctx= (ConfigurableApplicationContext) ContextProvider.getAnnotaionContext();\n                ctx.start();\n                \n                //output>>>\n                context started\n                `}\n            </Java>\n            To raise custom event:\n            <Java>\n                {`\n                // event object \n                public class RegisterPersonEvent extends ApplicationEvent {\n                    public RegisterPersonEvent(Object source) {\n                        super(source);\n                    }\n                }\n                \n                // publisher object\n                @Component\n                public class RegisterPersonEventPublisher implements ApplicationEventPublisherAware {\n                \n                    private ApplicationEventPublisher publisher;\n                \n                    @Override\n                    public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\n                        this.publisher = applicationEventPublisher;\n                    }\n                \n                    public void send() {\n                        publisher.publishEvent(new RegisterPersonEvent(this));\n                    }\n                }\n                \n                // listener object\n                @Component\n                public class RegisterPersonEventListener implements ApplicationListener<RegisterPersonEvent> {\n                \n                    @Override\n                    public void onApplicationEvent(RegisterPersonEvent registerPersonEvent) {\n                        System.out.println(\"register person raised\");\n                    }\n                }\n                `}\n            </Java>\n            <Red>This event mechanism is synched and used has to wait till the event process finish.</Red><br/>\n            To come over this issue, we should go to asynch event mechanism:<br/>\n            <Java>\n                {`\n                //by annotation\n                @EnableAsync\n                \n                //by java\n                public class MyExecutor implements AsyncConfigurer {\n                    @Override\n                    public Executor getAsyncExecutor() {\n                        return new ThreadPoolTaskExecutor();\n                    }\n                }\n                `}\n            </Java>\n            <Xml>{'<task:annotation-driven executor=\"anExecutor\"/>'}</Xml><br/>\n        </Frame>\n    )\n}\n\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}