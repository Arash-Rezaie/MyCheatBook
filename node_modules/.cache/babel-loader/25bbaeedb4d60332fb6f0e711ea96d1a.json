{"ast":null,"code":"import { Shape } from \"./shape\";\nimport { Utils } from \"../../../tools/utils\";\nimport { Text } from \"./text\";\nexport class Line extends Shape {\n  constructor() {\n    super();\n    this.processed = false;\n    this.setStrokeWidth(1);\n  }\n\n  setPosition(position) {\n    this.start = this.getPointObject(position);\n    return this;\n  }\n\n  setStart(point) {\n    return this.setPosition(point);\n  }\n\n  setEnd(point) {\n    this.end = this.getPointObject(point);\n    return this;\n  }\n\n  setQuadraticPoint(point) {\n    this.qCurve = this.getPointObject(point);\n    return this;\n  }\n  /**\n   * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n   */\n\n\n  getPointObject(point) {\n    let ans = {};\n\n    switch (this.getTypeOf(point)) {\n      case \"number,number\":\n        //[x,y]\n        ans[\"xy\"] = point;\n        break;\n\n      case \"string,number\":\n        //[intR,length] or [intD,length]\n        let i = point[0].length - 1;\n        let c = point[0][i];\n        let v = Number(point[0].substring(0, i));\n\n        if (c === 'R' || c === 'r') {\n          ans[\"angle\"] = Utils.normalizeRadian(v);\n          ans[\"gap\"] = point[1];\n        } else if (c === 'D' || c === 'd') {\n          ans[\"angle\"] = Utils.normalizeRadian(Utils.deg2Rad(v));\n          ans[\"gap\"] = point[1];\n        } else {\n          throw new Error('wrong input');\n        }\n\n        break;\n\n      case \"object,number\":\n        //[shape,gap]\n        ans[\"shape\"] = point[0];\n        ans[\"gap\"] = point[1];\n        break;\n\n      default:\n        throw new Error('wrong input');\n    }\n\n    return ans;\n  }\n\n  getTypeOf(point) {\n    return typeof point[0] + ',' + typeof point[1];\n  }\n\n  render(canvasCtx) {\n    this.preparePoints();\n    canvasCtx.beginPath();\n    canvasCtx.moveTo(this.start[\"xy\"][0], this.start[\"xy\"][1]);\n    if (this.qCurve) canvasCtx.quadraticCurveTo(this.qCurve[\"xy\"][0], this.qCurve[\"xy\"][1], this.end[\"xy\"][0], this.end[\"xy\"][1]);else canvasCtx.lineTo(this.end[\"xy\"][0], this.end[\"xy\"][1]); // canvasCtx.closePath();\n\n    super.render(canvasCtx); // if (this.direction !== undefined && this.places !== undefined) {\n    //     if (!this.places[0])\n    //         this.places = [this.places];\n    //     let angle = this.direction ? Utils.getAngle(this.secondP[0], this.secondP[1], p1[0], p1[1]) : Utils.getAngle(p1[0], p1[1], this.secondP[0], this.secondP[1]);\n    //     for (let i = 0; i < this.places.length; i++) {\n    //         let x = p1[0] + (this.secondP[0] - p1[0]) * this.places[i];\n    //         let y = p1[1] + (this.secondP[1] - p1[1]) * this.places[i];\n    //         this.drawArrow(canvasCtx, 10, angle, x, y);\n    //     }\n    // }\n  }\n\n  preparePoints() {\n    if (!this.processed) {\n      if (this.qCurve != null) {\n        if (this.qCurve[\"shape\"] != null) {\n          this.process2PointsXY(this.qCurve, this.start, true);\n          this.process2PointsXY(this.end[\"shape\"] != null ? this.qCurve : this.start, this.end, true);\n          this.processCurveAsShape(this.start, this.qCurve, this.end); //pick an accurate point for curve\n        } else {\n          this.process2PointsXY(this.start, this.qCurve);\n          this.process2PointsXY(this.start, this.end);\n        }\n      } else {\n        this.process2PointsXY(this.start, this.end);\n      }\n\n      this.processed = true;\n    }\n  }\n\n  process2PointsXY(p1, p2, ignoreP1XYModification = false) {\n    let c1;\n\n    if (p2[\"xy\"] == null) {\n      if (p2[\"angle\"] != null) {\n        let angle = p2[\"angle\"];\n        p2[\"xy\"] = Utils.getPointByAngle(this.getTargetXY(p1, angle), angle, p2[\"gap\"]);\n      } else if (p2[\"shape\"] != null) {\n        c1 = this.getPointCenter(p1);\n        let c2 = p2[\"shape\"].getCenterPoint();\n        let angle = Utils.getAngle(c2[0], c2[1], c1[0], c1[1]); //angle from p2 to p1\n\n        p2[\"xy\"] = this.getTargetXY(p2, angle);\n      } else {\n        throw new Error(\"no way to calculate point.xy\");\n      }\n    }\n\n    if (!ignoreP1XYModification && p1[\"xy\"] == null) {\n      if (c1 == null) c1 = this.getPointCenter(p1);\n      let angle = Utils.getAngleByPoint(c1, p2[\"xy\"]);\n      p1[\"xy\"] = this.getTargetXY(p1, angle);\n    }\n  }\n\n  getPointCenter(p) {\n    if (p[\"xy\"]) {\n      return p[\"xy\"];\n    } else if (p[\"shape\"] != null) {\n      return p[\"shape\"].getCenterPoint();\n    } else {\n      throw new Error(\"p1 is not acceptable. It must be a point or a shape\");\n    }\n  }\n\n  processCurveAsShape(start, curve, end) {\n    let t = this.qCurve[\"shape\"].getCenterPoint();\n    let angle1 = Utils.getAngleByPoint(t, start[\"xy\"]);\n    let angle2 = Utils.getAngleByPoint(t, end[\"xy\"]);\n    let midAngle = (angle1 + angle2) / 2;\n    if (Math.abs(angle1 - angle2) > Math.PI) //if angle1 - angle3 > 180deg => correct mid angle\n      midAngle -= Math.PI;\n    curve[\"xy\"] = this.getTargetXY(curve[\"shape\"], midAngle);\n  } //p must be a shape\n\n\n  getTargetXY(p, angle) {\n    return p[\"xy\"] != null ? p[\"xy\"] : p[\"shape\"][\"getExternalPoint\"] != null ? p[\"shape\"].getExternalPoint(angle, p[\"gap\"]) : Utils.getPointByAngle(p[\"shape\"].getCenterPoint(), angle, p[\"gap\"]);\n  }\n\n  getCenterPoint() {\n    this.preparePoints();\n    return [(this.start[0] + this.end[0]) / 2, (this.start[1] + this.end[1]) / 2];\n  }\n  /**\n   * show arrows on the line\n   * @param direction 0 or 1\n   * @param places array of float values, each is 0 - 1;\n   * @return Shape\n   */\n\n\n  showArrow(direction, places) {\n    this.direction = direction;\n    this.places = places;\n    return this;\n  }\n\n  drawArrow(canvasCtx, length, angle, x, y) {\n    canvasCtx.beginPath();\n    let p1 = [x + length * Math.cos(angle - Utils._PI6), y + length * Math.sin(angle - Utils._PI6)];\n    let p2 = [x + length * Math.cos(angle + Utils._PI6), y + length * Math.sin(angle + Utils._PI6)];\n    canvasCtx.moveTo(x, y);\n    canvasCtx.lineTo(p1[0], p1[1]);\n    canvasCtx.lineTo(p2[0], p2[1]);\n    canvasCtx.closePath();\n    super.render(canvasCtx);\n  }\n\n  determineAngles() {\n    if (this.qCurve != null) {\n      this.start[\"connAngle\"] = Utils.getAngleByPoint(this.start[\"xy\"], this.qCurve[\"xy\"]);\n      this.end[\"connAngle\"] = Utils.getAngleByPoint(this.end[\"xy\"], this.qCurve[\"xy\"]);\n    } else {\n      this.start[\"connAngle\"] = Utils.getAngleByPoint(this.start[\"xy\"], this.end[\"xy\"]);\n      this.start[\"connAngle\"] = this.start[\"connAngle\"] - Math.PI;\n    }\n  }\n\n}\nexport class HLine extends Line {\n  setLength(l) {\n    l > 0 ? this.lineTo(['0D', l]) : this.lineTo(['180D', -l]);\n    return this;\n  }\n\n}\nexport class VLine extends Line {\n  setLength(l) {\n    l > 0 ? this.lineTo(['90D', l]) : this.lineTo(['270D', -l]);\n    return this;\n  }\n\n}\nexport class Vector extends Line {\n  constructor() {\n    super();\n    this.setStrokeColor('black').setFillColor('black').setStrokeWidth(2).showArrow(1, 1);\n  }\n\n}\nexport class HVector extends Vector {\n  setLabel(label) {\n    if (typeof label === 'string') label = new Text().setPosition(this.getCenterPoint()).setLabel(label).setOffset([0, -6]).setFontStyle('');\n    return super.setLabel(label);\n  }\n\n  setLength(l) {\n    return l > 0 ? this.lineTo(['0D', l]) : this.lineTo(['180D', -l]);\n  }\n\n}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/components/drawbox/simple/line.js"],"names":["Shape","Utils","Text","Line","constructor","processed","setStrokeWidth","setPosition","position","start","getPointObject","setStart","point","setEnd","end","setQuadraticPoint","qCurve","ans","getTypeOf","i","length","c","v","Number","substring","normalizeRadian","deg2Rad","Error","render","canvasCtx","preparePoints","beginPath","moveTo","quadraticCurveTo","lineTo","process2PointsXY","processCurveAsShape","p1","p2","ignoreP1XYModification","c1","angle","getPointByAngle","getTargetXY","getPointCenter","c2","getCenterPoint","getAngle","getAngleByPoint","p","curve","t","angle1","angle2","midAngle","Math","abs","PI","getExternalPoint","showArrow","direction","places","drawArrow","x","y","cos","_PI6","sin","closePath","determineAngles","HLine","setLength","l","VLine","Vector","setStrokeColor","setFillColor","HVector","setLabel","label","setOffset","setFontStyle"],"mappings":"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","sourcesContent":["import {Shape} from \"./shape\";\nimport {Utils} from \"../../../tools/utils\";\nimport {Text} from \"./text\";\n\nexport class Line extends Shape {\n    start;\n    end;\n    qCurve;\n    processed = false;\n\n    constructor() {\n        super();\n        this.setStrokeWidth(1);\n    }\n\n    setPosition(position) {\n        this.start = this.getPointObject(position);\n        return this;\n    }\n\n    setStart(point) {\n        return this.setPosition(point);\n    }\n\n    setEnd(point) {\n        this.end = this.getPointObject(point);\n        return this;\n    }\n\n    setQuadraticPoint(point) {\n        this.qCurve = this.getPointObject(point);\n        return this;\n    }\n\n    /**\n     * @param point [x,y] or [intR, length] for radian, [intD, length] for degree or [shape,gap].<br/>\n     */\n    getPointObject(point) {\n        let ans = {};\n        switch (this.getTypeOf(point)) {\n            case \"number,number\"://[x,y]\n                ans[\"xy\"] = point;\n                break;\n            case \"string,number\"://[intR,length] or [intD,length]\n                let i = point[0].length - 1;\n                let c = point[0][i];\n                let v = Number(point[0].substring(0, i));\n                if (c === 'R' || c === 'r') {\n                    ans[\"angle\"] = Utils.normalizeRadian(v);\n                    ans[\"gap\"] = point[1];\n                } else if (c === 'D' || c === 'd') {\n                    ans[\"angle\"] = Utils.normalizeRadian(Utils.deg2Rad(v));\n                    ans[\"gap\"] = point[1];\n                } else {\n                    throw new Error('wrong input');\n                }\n                break;\n            case \"object,number\"://[shape,gap]\n                ans[\"shape\"] = point[0];\n                ans[\"gap\"] = point[1];\n                break;\n            default:\n                throw new Error('wrong input');\n        }\n        return ans;\n    }\n\n    getTypeOf(point) {\n        return typeof point[0] + ',' + typeof point[1]\n    }\n\n    render(canvasCtx) {\n        this.preparePoints();\n        canvasCtx.beginPath();\n        canvasCtx.moveTo(this.start[\"xy\"][0], this.start[\"xy\"][1]);\n        if (this.qCurve)\n            canvasCtx.quadraticCurveTo(this.qCurve[\"xy\"][0], this.qCurve[\"xy\"][1], this.end[\"xy\"][0], this.end[\"xy\"][1]);\n        else\n            canvasCtx.lineTo(this.end[\"xy\"][0], this.end[\"xy\"][1]);\n        // canvasCtx.closePath();\n        super.render(canvasCtx);\n        // if (this.direction !== undefined && this.places !== undefined) {\n        //     if (!this.places[0])\n        //         this.places = [this.places];\n        //     let angle = this.direction ? Utils.getAngle(this.secondP[0], this.secondP[1], p1[0], p1[1]) : Utils.getAngle(p1[0], p1[1], this.secondP[0], this.secondP[1]);\n        //     for (let i = 0; i < this.places.length; i++) {\n        //         let x = p1[0] + (this.secondP[0] - p1[0]) * this.places[i];\n        //         let y = p1[1] + (this.secondP[1] - p1[1]) * this.places[i];\n        //         this.drawArrow(canvasCtx, 10, angle, x, y);\n        //     }\n        // }\n    }\n\n    preparePoints() {\n        if (!this.processed) {\n            if (this.qCurve != null) {\n                if (this.qCurve[\"shape\"] != null) {\n                    this.process2PointsXY(this.qCurve, this.start, true);\n                    this.process2PointsXY((this.end[\"shape\"] != null ? this.qCurve : this.start), this.end, true);\n                    this.processCurveAsShape(this.start, this.qCurve, this.end);//pick an accurate point for curve\n                } else {\n                    this.process2PointsXY(this.start, this.qCurve);\n                    this.process2PointsXY(this.start, this.end);\n                }\n            } else {\n                this.process2PointsXY(this.start, this.end);\n            }\n            this.processed = true;\n        }\n    }\n\n    process2PointsXY(p1, p2, ignoreP1XYModification = false) {\n        let c1;\n        if (p2[\"xy\"] == null) {\n            if (p2[\"angle\"] != null) {\n                let angle = p2[\"angle\"];\n                p2[\"xy\"] = Utils.getPointByAngle(this.getTargetXY(p1, angle), angle, p2[\"gap\"]);\n            } else if (p2[\"shape\"] != null) {\n                c1 = this.getPointCenter(p1);\n                let c2 = p2[\"shape\"].getCenterPoint();\n                let angle = Utils.getAngle(c2[0], c2[1], c1[0], c1[1]);//angle from p2 to p1\n                p2[\"xy\"] = this.getTargetXY(p2, angle);\n            } else {\n                throw new Error(\"no way to calculate point.xy\");\n            }\n        }\n\n        if (!ignoreP1XYModification && p1[\"xy\"] == null) {\n            if (c1 == null)\n                c1 = this.getPointCenter(p1);\n            let angle = Utils.getAngleByPoint(c1, p2[\"xy\"]);\n            p1[\"xy\"] = this.getTargetXY(p1, angle);\n        }\n    }\n\n    getPointCenter(p) {\n        if (p[\"xy\"]) {\n            return p[\"xy\"];\n        } else if (p[\"shape\"] != null) {\n            return p[\"shape\"].getCenterPoint();\n        } else {\n            throw new Error(\"p1 is not acceptable. It must be a point or a shape\")\n        }\n    }\n\n    processCurveAsShape(start, curve, end) {\n        let t = this.qCurve[\"shape\"].getCenterPoint();\n        let angle1 = Utils.getAngleByPoint(t, start[\"xy\"]);\n        let angle2 = Utils.getAngleByPoint(t, end[\"xy\"]);\n        let midAngle = (angle1 + angle2) / 2;\n\n        if (Math.abs(angle1 - angle2) > Math.PI) //if angle1 - angle3 > 180deg => correct mid angle\n            midAngle -= Math.PI;\n        curve[\"xy\"] = this.getTargetXY(curve[\"shape\"], midAngle);\n    }\n\n    //p must be a shape\n    getTargetXY(p, angle) {\n        return (p[\"xy\"] != null) ?\n            p[\"xy\"] :\n            (\n                (p[\"shape\"][\"getExternalPoint\"] != null) ?\n                    p[\"shape\"].getExternalPoint(angle, p[\"gap\"]) :\n                    Utils.getPointByAngle(p[\"shape\"].getCenterPoint(), angle, p[\"gap\"])\n            )\n    }\n\n    getCenterPoint() {\n        this.preparePoints();\n        return [(this.start[0] + this.end[0]) / 2, (this.start[1] + this.end[1]) / 2]\n    }\n\n    /**\n     * show arrows on the line\n     * @param direction 0 or 1\n     * @param places array of float values, each is 0 - 1;\n     * @return Shape\n     */\n    showArrow(direction, places) {\n        this.direction = direction;\n        this.places = places;\n        return this;\n    }\n\n    drawArrow(canvasCtx, length, angle, x, y) {\n        canvasCtx.beginPath();\n        let p1 = [x + length * Math.cos(angle - Utils._PI6), y + length * Math.sin(angle - Utils._PI6)];\n        let p2 = [x + length * Math.cos(angle + Utils._PI6), y + length * Math.sin(angle + Utils._PI6)];\n        canvasCtx.moveTo(x, y);\n        canvasCtx.lineTo(p1[0], p1[1]);\n        canvasCtx.lineTo(p2[0], p2[1]);\n        canvasCtx.closePath();\n        super.render(canvasCtx);\n    }\n\n    determineAngles() {\n        if (this.qCurve != null) {\n            this.start[\"connAngle\"] = Utils.getAngleByPoint(this.start[\"xy\"], this.qCurve[\"xy\"]);\n            this.end[\"connAngle\"] = Utils.getAngleByPoint(this.end[\"xy\"], this.qCurve[\"xy\"]);\n        } else {\n            this.start[\"connAngle\"] = Utils.getAngleByPoint(this.start[\"xy\"], this.end[\"xy\"]);\n            this.start[\"connAngle\"] = this.start[\"connAngle\"] - Math.PI;\n        }\n    }\n}\n\nexport class HLine\n    extends Line {\n    setLength(l) {\n        l > 0 ?\n            this.lineTo(['0D', l]) :\n            this.lineTo(['180D', -l])\n        return this;\n    }\n}\n\nexport class VLine extends Line {\n    setLength(l) {\n        l > 0 ?\n            this.lineTo(['90D', l]) :\n            this.lineTo(['270D', -l])\n        return this;\n    }\n}\n\nexport class Vector extends Line {\n    constructor() {\n        super();\n        this.setStrokeColor('black')\n            .setFillColor('black')\n            .setStrokeWidth(2)\n            .showArrow(1, 1);\n    }\n}\n\nexport class HVector extends Vector {\n    setLabel(label) {\n        if (typeof label === 'string')\n            label = new Text()\n                .setPosition(this.getCenterPoint())\n                .setLabel(label)\n                .setOffset([0, -6])\n                .setFontStyle('');\n        return super.setLabel(label);\n    }\n\n    setLength(l) {\n        return (l > 0) ?\n            this.lineTo(['0D', l]) :\n            this.lineTo(['180D', -l])\n    }\n}"]},"metadata":{},"sourceType":"module"}