{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import React from\"react\";import{Frame,GenericCode}from\"../../components/blocks\";import{Blue,Bullet,Highlight,Important}from\"../../components/components\";import{InfoIcon}from\"../../components/bubble\";export function TomcatCheats(){return/*#__PURE__*/_jsxs(_Fragment,{children:[getTomcatStructure(),getWeblogicFeatures()]});}function getTomcatStructure(){return/*#__PURE__*/_jsxs(Frame,{title:'Tomcat',children:[/*#__PURE__*/_jsxs(InfoIcon,{children:[/*#__PURE__*/_jsx(Blue,{children:\"What is the difference between tomcat, weblogic, jboss, \\u2026?\"}),/*#__PURE__*/_jsx(\"br\",{}),\"The difference is up to their container. The most important thing about application server is its container.\",/*#__PURE__*/_jsxs(\"p\",{children:[\"Container provides an isolated environment which executes our application along its all dependencies. Therefor any technology inside the application must be supported by the container.\",/*#__PURE__*/_jsx(\"br\",{}),\"For example, consider that tomcat container does not supports EJB. So you can not serve an ejb application with the help of tomcat. To do that, one option is using TomEE.\",/*#__PURE__*/_jsx(\"br\",{}),\"Let's say we are going to include JSF into our application. If you are planning to hire weblogic, then you have to Mojara instead of JSF\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"In fact each company is free to implement a technology as it's willing but they have to follow a specification. That's why we should take care of hired technologies.\"]}),/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsxs(Important,{children:[\"As Tomcat is heavy to load and execute, it is recommended to use \",/*#__PURE__*/_jsx(Highlight,{children:\"Pivotal\"}),\" or \",/*#__PURE__*/_jsx(Highlight,{children:\"Jetty\"}),\" in development time.\"]})})]}),/*#__PURE__*/_jsx(GenericCode,{title:'Tomcat structure',children:\"\\n                catalina root\\n                \\u251C\\u2500\\u2500 bin\\n                \\u2502   \\u251C\\u2500\\u2500 shutdown.bat\\n                \\u2502   \\u251C\\u2500\\u2500 shutdown.sh\\n                \\u2502   \\u251C\\u2500\\u2500 startup.bat\\n                \\u2502   \\u251C\\u2500\\u2500 startup.sh\\n                \\u2502   \\u251C\\u2500\\u2500 ...\\n                \\u251C\\u2500\\u2500 BUILDING.txt\\n                \\u251C\\u2500\\u2500 conf\\n                \\u2502   \\u251C\\u2500\\u2500 Catalina\\n                \\u2502   \\u251C\\u2500\\u2500 catalina.policy\\n                \\u2502   \\u251C\\u2500\\u2500 catalina.properties\\n                \\u2502   \\u251C\\u2500\\u2500 context.xml\\n                \\u2502   \\u251C\\u2500\\u2500 jaspic-providers.xml\\n                \\u2502   \\u251C\\u2500\\u2500 jaspic-providers.xsd\\n                \\u2502   \\u251C\\u2500\\u2500 logging.properties\\n                \\u2502   \\u251C\\u2500\\u2500 server.xml\\n                \\u2502   \\u251C\\u2500\\u2500 tomcat-users.xml\\n                \\u2502   \\u251C\\u2500\\u2500 tomcat-users.xsd\\n                \\u2502   \\u2514\\u2500\\u2500 web.xml\\n                \\u251C\\u2500\\u2500 CONTRIBUTING.md\\n                \\u251C\\u2500\\u2500 lib //All jars in this dir shares among all applications\\n                \\u2502   \\u251C\\u2500\\u2500 servlet-api.jar\\n                \\u2502   \\u251C\\u2500\\u2500 websocket-api.jar\\n                \\u2502   \\u2514\\u2500\\u2500 ...\\n                \\u251C\\u2500\\u2500 LICENSE\\n                \\u251C\\u2500\\u2500 logs\\n                \\u2502   \\u251C\\u2500\\u2500 catalina.2020-04-05.log\\n                \\u2502   \\u2514\\u2500\\u2500 ...\\n                \\u251C\\u2500\\u2500 NOTICE\\n                \\u251C\\u2500\\u2500 original libs.zip\\n                \\u251C\\u2500\\u2500 README.md\\n                \\u251C\\u2500\\u2500 RELEASE-NOTES\\n                \\u251C\\u2500\\u2500 RUNNING.txt\\n                \\u251C\\u2500\\u2500 temp //Tomcat temp files. Useless for us\\n                \\u2502   \\u2514\\u2500\\u2500 safeToDelete.tmp\\n                \\u251C\\u2500\\u2500 webapps //Put war or exploded files here\\n                \\u2502   \\u251C\\u2500\\u2500 docs\\n                \\u2502   \\u251C\\u2500\\u2500 host-manager\\n                \\u2502   \\u251C\\u2500\\u2500 manager\\n                \\u2502   \\u2514\\u2500\\u2500 ROOT\\n                \\u2514\\u2500\\u2500 work\\n                \\u2514\\u2500\\u2500 Catalina\\n                \"})]});}function getWeblogicFeatures(){return/*#__PURE__*/_jsxs(Frame,{title:'weblogic features',children:[/*#__PURE__*/_jsx(Bullet,{title:'1. Coherence:',children:\" cache server for session. Clustering for session, if all servers go down, user will not be logged out.\"}),/*#__PURE__*/_jsx(Bullet,{title:'2. SLA:',children:\" promises to keep success on a gate way for example 80% and on the other 70%\"}),/*#__PURE__*/_jsx(Bullet,{title:'3. CICD:',children:\" let\\u2019s say we update the project,-\\u2192 logged in user will not thrown out and new users will be on new\"})]});}","map":{"version":3,"sources":["/media/arash/SanDisk/MyCheatBook/src/contents/tomcat/tomcat-cheats.js"],"names":["React","Frame","GenericCode","Blue","Bullet","Highlight","Important","InfoIcon","TomcatCheats","getTomcatStructure","getWeblogicFeatures"],"mappings":"6IAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,KAAR,CAAeC,WAAf,KAAiC,yBAAjC,CACA,OAAQC,IAAR,CAAcC,MAAd,CAAsBC,SAAtB,CAAiCC,SAAjC,KAAiD,6BAAjD,CACA,OAAQC,QAAR,KAAuB,yBAAvB,CAEA,MAAO,SAASC,CAAAA,YAAT,EAAwB,CAC3B,mBACI,2BACKC,kBAAkB,EADvB,CAEKC,mBAAmB,EAFxB,GADJ,CAMH,CAED,QAASD,CAAAA,kBAAT,EAA8B,CAC1B,mBACI,MAAC,KAAD,EAAO,KAAK,CAAE,QAAd,wBACI,MAAC,QAAD,yBACI,KAAC,IAAD,8EADJ,cAC2E,aAD3E,6HAKI,6NAGsF,aAHtF,2LAK+E,aAL/E,yJAOoD,aAPpD,cAOyD,aAPzD,2KALJ,cAgBI,gCAAG,MAAC,SAAD,6FACK,KAAC,SAAD,sBADL,qBACuC,KAAC,SAAD,oBADvC,2BAAH,EAhBJ,GADJ,cAqBI,KAAC,WAAD,EAAa,KAAK,CAAE,kBAApB,22EArBJ,GADJ,CAuEH,CAED,QAASC,CAAAA,mBAAT,EAA+B,CAC3B,mBACI,MAAC,KAAD,EAAO,KAAK,CAAE,mBAAd,wBACI,KAAC,MAAD,EAAQ,KAAK,CAAE,eAAf,qHADJ,cAII,KAAC,MAAD,EAAQ,KAAK,CAAE,SAAf,0FAJJ,cAMI,KAAC,MAAD,EAAQ,KAAK,CAAE,UAAf,2HANJ,GADJ,CAYH","sourcesContent":["import React from \"react\";\nimport {Frame, GenericCode} from \"../../components/blocks\";\nimport {Blue, Bullet, Highlight, Important} from \"../../components/components\";\nimport {InfoIcon} from \"../../components/bubble\";\n\nexport function TomcatCheats() {\n    return (\n        <>\n            {getTomcatStructure()}\n            {getWeblogicFeatures()}\n        </>\n    )\n}\n\nfunction getTomcatStructure() {\n    return (\n        <Frame title={'Tomcat'}>\n            <InfoIcon>\n                <Blue>What is the difference between tomcat, weblogic, jboss, …?</Blue><br/>\n                The difference is up to their container. The most important thing about application server is its\n                container.\n\n                <p>\n                    Container provides an isolated environment which executes our application along its all\n                    dependencies.\n                    Therefor any technology inside the application must be supported by the container.<br/>\n                    For example, consider that tomcat container does not supports EJB. So you can not serve an ejb\n                    application with the help of tomcat. To do that, one option is using TomEE.<br/>\n                    Let's say we are going to include JSF into our application. If you are planning to hire\n                    weblogic, then you have to Mojara instead of JSF<br/><br/>\n                    In fact each company is free to implement a technology as it's willing but they have to follow a\n                    specification. That's why we should take care of hired technologies.\n                </p>\n                <p><Important>As Tomcat is heavy to load and execute, it is recommended to\n                    use <Highlight>Pivotal</Highlight> or <Highlight>Jetty</Highlight> in development\n                    time.</Important></p>\n            </InfoIcon>\n            <GenericCode title={'Tomcat structure'}>\n                {`\n                catalina root\n                ├── bin\n                │   ├── shutdown.bat\n                │   ├── shutdown.sh\n                │   ├── startup.bat\n                │   ├── startup.sh\n                │   ├── ...\n                ├── BUILDING.txt\n                ├── conf\n                │   ├── Catalina\n                │   ├── catalina.policy\n                │   ├── catalina.properties\n                │   ├── context.xml\n                │   ├── jaspic-providers.xml\n                │   ├── jaspic-providers.xsd\n                │   ├── logging.properties\n                │   ├── server.xml\n                │   ├── tomcat-users.xml\n                │   ├── tomcat-users.xsd\n                │   └── web.xml\n                ├── CONTRIBUTING.md\n                ├── lib //All jars in this dir shares among all applications\n                │   ├── servlet-api.jar\n                │   ├── websocket-api.jar\n                │   └── ...\n                ├── LICENSE\n                ├── logs\n                │   ├── catalina.2020-04-05.log\n                │   └── ...\n                ├── NOTICE\n                ├── original libs.zip\n                ├── README.md\n                ├── RELEASE-NOTES\n                ├── RUNNING.txt\n                ├── temp //Tomcat temp files. Useless for us\n                │   └── safeToDelete.tmp\n                ├── webapps //Put war or exploded files here\n                │   ├── docs\n                │   ├── host-manager\n                │   ├── manager\n                │   └── ROOT\n                └── work\n                └── Catalina\n                `}\n            </GenericCode>\n        </Frame>\n    )\n}\n\nfunction getWeblogicFeatures() {\n    return (\n        <Frame title={'weblogic features'}>\n            <Bullet title={'1. Coherence:'}> cache server for session. Clustering for session, if all servers go down,\n                user\n                will not be logged out.</Bullet>\n            <Bullet title={'2. SLA:'}> promises to keep success on a gate way for example 80% and on the other\n                70%</Bullet>\n            <Bullet title={'3. CICD:'}> let’s say we update the project,-→ logged in user will not thrown out and new\n                users\n                will be on new</Bullet>\n        </Frame>\n    )\n}"]},"metadata":{},"sourceType":"module"}