[{"/home/arash/Application/project/web/base-react-app/src/index.js":"1","/home/arash/Application/project/web/base-react-app/src/App.js":"2","/home/arash/Application/project/web/base-react-app/src/reportWebVitals.js":"3","/media/arash/usb_stick/my-cheat-book2/src/index.js":"4","/media/arash/usb_stick/my-cheat-book2/src/components/content.js":"5","/media/arash/usb_stick/my-cheat-book2/src/components/popup-handler.js":"6","/media/arash/usb_stick/my-cheat-book2/src/components/blocks.js":"7","/media/arash/usb_stick/my-cheat-book2/src/tools/event-dispatcher.js":"8","/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/index.js":"9","/media/arash/usb_stick/my-cheat-book2/src/contents/tomcat/index.js":"10","/media/arash/usb_stick/my-cheat-book2/src/contents/java8/index.js":"11","/media/arash/usb_stick/my-cheat-book2/src/contents/maven/index.js":"12","/media/arash/usb_stick/my-cheat-book2/src/contents/regex/index.js":"13","/media/arash/usb_stick/my-cheat-book2/src/components/my-button.js":"14","/media/arash/usb_stick/my-cheat-book2/src/contents/tomcat/tomcat-cheats.js":"15","/media/arash/usb_stick/my-cheat-book2/src/contents/regex/regex-cheats.js":"16","/media/arash/usb_stick/my-cheat-book2/src/contents/java8/java-cheats.js":"17","/media/arash/usb_stick/my-cheat-book2/src/contents/maven/maven-cheats.js":"18","/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/db/db-cheats.js":"19","/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/core/core-cheats.js":"20","/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/mvc/mvc-cheats.js":"21","/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/boot/boot-cheats.js":"22","/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/theory/theory.js":"23","/media/arash/usb_stick/my-cheat-book2/src/components/components.js":"24","/media/arash/usb_stick/my-cheat-book2/src/components/bubble.js":"25","/media/arash/usb_stick/my-cheat-book2/src/components/float.js":"26"},{"size":500,"mtime":1609699189133,"results":"27","hashOfConfig":"28"},{"size":528,"mtime":1609699189133,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1609699189133,"results":"30","hashOfConfig":"28"},{"size":960,"mtime":1608654178027,"results":"31","hashOfConfig":"32"},{"size":1503,"mtime":1609236797227,"results":"33","hashOfConfig":"32"},{"size":7762,"mtime":1606864041075,"results":"34","hashOfConfig":"32"},{"size":3659,"mtime":1608725502156,"results":"35","hashOfConfig":"32"},{"size":5203,"mtime":1606842648000,"results":"36","hashOfConfig":"32"},{"size":1471,"mtime":1609250797428,"results":"37","hashOfConfig":"32"},{"size":340,"mtime":1608058824509,"results":"38","hashOfConfig":"32"},{"size":283,"mtime":1608058824530,"results":"39","hashOfConfig":"32"},{"size":335,"mtime":1608063992514,"results":"40","hashOfConfig":"32"},{"size":287,"mtime":1609250797359,"results":"41","hashOfConfig":"32"},{"size":430,"mtime":1608842642658,"results":"42","hashOfConfig":"32"},{"size":4515,"mtime":1609169088950,"results":"43","hashOfConfig":"32"},{"size":10555,"mtime":1609250495787,"results":"44","hashOfConfig":"32"},{"size":29553,"mtime":1609169020575,"results":"45","hashOfConfig":"32"},{"size":32822,"mtime":1609169135293,"results":"46","hashOfConfig":"32"},{"size":100,"mtime":1608059481287,"results":"47","hashOfConfig":"32"},{"size":78529,"mtime":1609581702534,"results":"48","hashOfConfig":"32"},{"size":101,"mtime":1608059481214,"results":"49","hashOfConfig":"32"},{"size":102,"mtime":1608059481296,"results":"50","hashOfConfig":"32"},{"size":10659,"mtime":1609169269498,"results":"51","hashOfConfig":"32"},{"size":2838,"mtime":1609168442823,"results":"52","hashOfConfig":"32"},{"size":1625,"mtime":1607974638791,"results":"53","hashOfConfig":"32"},{"size":5117,"mtime":1608842951796,"results":"54","hashOfConfig":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ubo90h",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},"19c5lqb",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/arash/Application/project/web/base-react-app/src/index.js",[],"/home/arash/Application/project/web/base-react-app/src/App.js",[],"/home/arash/Application/project/web/base-react-app/src/reportWebVitals.js",[],"/media/arash/usb_stick/my-cheat-book2/src/index.js",["114"],"import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport './res/styles/main.css';\nimport {Content} from \"./components/content\";\nimport PopupHandler from \"./components/popup-handler\";\nimport {Xml} from \"./components/blocks\";\n\nfunction getMainContent() {\n    return <><Content/><PopupHandler/></>;\n}\n\nfunction getScript() {\n    return (\n        <Xml title={true} description={'this config fails'}>\n            {`<bean id=\"student\" class=\"com.arash.models.disorderedbean.Student\">\n                                    <constructor-arg ref=\"shoes\"/>\n                                </bean>\n                                <bean id=\"shoes\" class=\"com.arash.models.disorderedbean.Shoes\">\n                                    <constructor-arg ref=\"student\"/>\n                                </bean>`}\n        </Xml>\n    )\n}\n\nReactDOM.render(getMainContent(), document.querySelector('#root'));\n// ReactDOM.render(getScript(), document.querySelector('#root'));",["115","116"],"/media/arash/usb_stick/my-cheat-book2/src/components/content.js",[],"/media/arash/usb_stick/my-cheat-book2/src/components/popup-handler.js",[],"/media/arash/usb_stick/my-cheat-book2/src/components/blocks.js",[],"/media/arash/usb_stick/my-cheat-book2/src/tools/event-dispatcher.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/index.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/tomcat/index.js",["117"],"import React from \"react\";\nimport {MyButton} from \"../../components/my-button\";\nimport {TomcatCheats} from \"./tomcat-cheats\";\nimport {JavaCheats} from \"../java8/java-cheats\";\n\nexport class Index extends MyButton {\n    getTitle() {\n        return 'Tomcat Cheats'\n    }\n\n    handleOnClick() {\n        this.setContent(<TomcatCheats/>);\n    }\n}","/media/arash/usb_stick/my-cheat-book2/src/contents/java8/index.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/maven/index.js",["118"],"import React from \"react\";\nimport {MyButton} from \"../../components/my-button\";\nimport {MavenCheats} from \"./maven-cheats\";\nimport {JavaCheats} from \"../java8/java-cheats\";\n\nexport class Index extends MyButton {\n    getTitle() {\n        return 'Maven Cheats'\n    }\n\n    handleOnClick() {\n        this.setContent(<MavenCheats/>)\n    }\n}","/media/arash/usb_stick/my-cheat-book2/src/contents/regex/index.js",[],"/media/arash/usb_stick/my-cheat-book2/src/components/my-button.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/tomcat/tomcat-cheats.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/regex/regex-cheats.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/java8/java-cheats.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/maven/maven-cheats.js",["119","120"],"import React from \"react\";\nimport {Bash, Frame, GenericCode, Xml} from \"../../components/blocks\";\nimport {InfoIcon} from \"../../components/bubble\";\nimport {Blue, Bullet, Highlight, Important} from \"../../components/components\";\nimport dependencyProblem from '../../res/images/dependency_problem.png';\nimport mavenInteraction from '../../res/images/maven_interaction.png';\nimport mavenLifecycle from '../../res/images/maven_lifecycle.png';\nimport mavenEmbedded from '../../res/images/maven_embedded.png';\nimport multiModule from '../../res/images/multi-module.png';\n\nexport function MavenCheats() {\n    return (\n        <>\n            {getMavenStructure()}\n            {getMavenDuty()}\n            {getSettings()}\n            {getLifecycle()}\n            {getProjectStructure()}\n            {getPomStructure()}\n            {getMultiModule()}\n        </>\n    )\n}\n\nfunction getMavenStructure() {\n    return (\n        <Frame title={'Maven directory structure'}>\n            There are two directories available for Maven, the Maven itself directory and m2 directory which holds\n            dependencies. In fact \".m2\" directory is your local repository<br/>\n            In Maven 1, \"setting.xml“ is located in Maven home directory at first and after the first execution, another\n            \"setting.xml\" file wil be created in \".m2\" directory which contains your specialized configuration. This\n            mechanism has changed in Maven 2 newer versi/on and \"settings.xml\" is located in Maven home directory\n            only.<br/>\n            <GenericCode>{`\n                    MAVEN_HOME\n                    ├── bin\n                    │   ├── m2.conf\n                    │   └── mvn\n                    ├── boot\n                    │   └── plexus-classworlds-2.6.0.jar\n                    ├── conf\n                    │   ├── logging\n                    │   ├── settings.xml //Proxies, local m2, … are configured here\n                    │   └── toolchains.xml\n                    ├── lib\n                    │   ├── cdi-api-1.0.jar\n                    │   ├── ext\n                    │   ├── slf4j-api-1.7.29.jar\n                    │   └── slf4j-api.license\n                    ├── LICENSE\n                    ├── NOTICE\n                    └── README.txt`}\n            </GenericCode>\n            <InfoIcon>\n                <Important>Maven path must include no space</Important>\n                <p>\n                    current mave version is 2 but its lib version may be higher.<br/>\n                    Maven is going to handle dependency managing, compiling, building, testing, reporting,… .\n                </p>\n                <p>\n                    You must define <span className={'purple'}>M2_HOME → %M2_HOME/bin%</span> in your OS\n                    environment. To check that, enter command: <span className={'blue'}>mvn -version</span>\n                </p>\n            </InfoIcon>\n        </Frame>\n    )\n}\n\nfunction getMavenDuty() {\n    return (\n        <Frame title={'Maven duty'}>\n\n            <Blue>Dependency prolem:</Blue><br/>\n            Imagine we need lib \"a\" and \"b\" and these libs need lib f version 2 and f version 3. Now which lib we\n            should keep?<br/>\n            Maven fetches dependency tree and keeps the first visited version. So we ourselves must handle\n            versioning issue. To check dependency tree enter: <Highlight>mvn dependency:tree</Highlight><br/>\n            <img className={'center-horizontally-relative'} src={dependencyProblem}\n                 alt={'dependency problem'}/><br/>\n            <Bash>\n                {`\n                    $:~/Applications/projects/java/maventest$ mvn dependency:tree\n                    [INFO] Scanning for projects...\n                    [INFO]\n                    [INFO] -----------------------< org.example:maventest >------------------------\n                    [INFO] Building maventest 1.0-SNAPSHOT\n                    [INFO] --------------------------------[ jar ]---------------------------------\n                    [INFO]\n                    [INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ maventest ---\n                    [INFO] org.example:maventest:jar:1.0-SNAPSHOT\n                    [INFO] \\- mysql:mysql-connector-java:jar:8.0.22:compile\n                    [INFO]    \\- com.google.protobuf:protobuf-java:jar:3.11.4:compile\n                    [INFO] ------------------------------------------------------------------------\n                    [INFO] BUILD SUCCESS\n                    [INFO] ------------------------------------------------------------------------\n                    [INFO] Total time:  1.136 s\n                    [INFO] Finished at: 2020-11-04T16:35:30+03:30\n                    [INFO] ------------------------------------------------------------------------\n                    `}\n            </Bash>\n\n            <p>\n                <Blue>Maven ecosystem:</Blue><br/>\n                When we request a dependency in maven ecosystem, maven firstly, searches the local repository (m2\n                directory). Maven itself manipulates m2 directory. If it couldn't find the dependency, then it sends the\n                request to a Repository Manager such as Nexus and Nexus downloads it from other public repositories. The\n                dependency will be obtained in m2 directory. Next time, there is no need to download that files\n                again<br/><br/>\n                <img className={'center-horizontally-relative'} src={mavenInteraction} alt={'maven interaction'}/>\n            </p>\n            <p>\n                Full map of embedded Maven:<br/>\n                Zabbix monitors git continuously. On alter, builds the project with the help of Puppet on maven. Then\n                puppet sends war/jar to Jenkins for test and test will be monitored by Zabbix.<br/>\n                <img className={'center-horizontally-relative'} src={mavenEmbedded} alt={'embed maven'}/>\n            </p>\n        </Frame>\n    )\n}\n\nfunction getSettings() {\n    return (\n        <Frame title={'Settings.xml'}>\n            <Xml>\n                {`\n                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <!--\n                 | This is the configuration file for Maven. It can be specified at two levels:\n                 |\n                 |  1. User Level. This settings.xml file provides configuration for a single user,\n                 |                 and is normally provided in $\\{user.home}/.m2/settings.xml.\n                 |\n                 |                 NOTE: This location can be overridden with the CLI option:\n                 |\n                 |                 -s /path/to/user/settings.xml\n                 |\n                 |  2. Global Level. This settings.xml file provides configuration for all Maven\n                 |                 users on a machine (assuming they're all using the same Maven\n                 |                 installation). It's normally provided in\n                 |                 $\\{maven.conf}/settings.xml.\n                 |\n                 |                 NOTE: This location can be overridden with the CLI option:\n                 |\n                 |                 -gs /path/to/global/settings.xml\n                 |\n                 | The sections in this sample file are intended to give you a running start at\n                 | getting the most out of your Maven installation. Where appropriate, the default\n                 | values (values used when the setting is not specified) are provided.\n                 |\n                 |-->\n                <settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n                          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n                    <!-- localRepository\n                     | The path to the local repository maven will use to store artifacts.\n                     | you can define more than 1 localRepository and there is no priority among them.\n                     |\n                     | Default: $\\{user.home}/.m2/repository $\\{user.home} is taken from OS\n                    -->\n                    <localRepository>/path/to/local/repo</localRepository>\n                    <!-- interactiveMode\n                     | Maven asks question when some changes come in. It is better to make it false, so maven will do its job by itself.\n                     |\n                     | Default: true\n                    -->\n                    <interactiveMode>true</interactiveMode>\n                    <!-- offline\n                     | Determines whether maven should attempt to connect to the network when executing a build.\n                     | This will have an effect on artifact downloads, artifact deployment, and others.\n                     |\n                     | Am I allowed to use the Internet. If you want to use online policy, then you should define proxy too.\n                     |\n                     | Default: false\n                    -->\n                    <offline>false</offline>\n                    <!-- pluginGroups\n                     | maven is plugin based, So we have to define plugins for every operation.\n                     |-->\n                    <pluginGroups>\n                        <pluginGroup>com.your.plugins</pluginGroup>\n                    </pluginGroups>\n                    <!-- proxies\n                     | This is a list of proxies which can be used on this machine to connect to the network.\n                     | Unless otherwise specified (by system property or command-line switch), the first proxy\n                     | specification in this list marked as active will be used.\n                     |-->\n                    <proxies>\n                        <proxy>\n                            <id>optional</id> <!--you define this to distinguish multiple proxies-->\n                            <active>true</active> <!-- enabled or not -->\n                            <protocol>http</protocol>\n                            <username>proxyuser</username>\n                            <password>proxypass</password>\n                            <host>proxy.host.net</host><!--there are often more than 1 host. separate them with '|' character-->\n                            <port>80</port>\n                            <nonProxyHosts>local.net|some.host.com\n                            </nonProxyHosts> <!-- usually, some parts of a proxy is free and doesn't need any username & password. This one is for them -->\n                        </proxy>\n                    </proxies>\n                    <!-- servers\n                     | This is a list of authentication profiles, keyed by the server-id used within the system.\n                     | Authentication profiles can be used whenever maven must make a connection to a remote server.\n                     |-->\n                    <servers>\n                        <!-- server\n                         | Specifies the authentication information to use when connecting to a particular server, identified by\n                         | a unique name within the system (referred to by the 'id' attribute below).\n                         |\n                         | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are\n                         |       used together.\n                         |\n                         -->\n                        <server>\n                            <id>deploymentRepo</id>\n                            <!-- use username & password or key & passphrase-->\n                            <username>repouser</username>\n                            <password>repopwd</password>\n                            <!--\n                            | If you are not willing to leave the setting file plain, you can hash your username & password and put that into another file\n                            | mvn -emp yourPassword -> returns a hash code\n                            | you must create a file named settings-security.xml under .m2. Go to next node.\n                            -->\n                            <privateKey>/path/to/private/key</privateKey> <!-- private/public key which you have for system-->\n                            <passphrase>optional; leave empty if not used.</passphrase>\n                            <filePermissions></filePermissions> <!-- the permission to create files on server-->\n                            <directoryPermissions></directoryPermissions> <!-- like above for directory -->\n                        </server>\n                    </servers>\n                    <!-- this part must be written in setting-security.xml file not here!!!\n                     | create <settings> node just like above:\n                     -->\n                    <settingsSecurity>\n                        <master>\n                            <!-- hashcode created by npm -emp -->\n                        </master>\n                    </settingsSecurity>\n                    <!-- this part must be written in setting-security.xml file not here!!! -->\n                    <mirrors>\n                        <mirror>\n                            <id>mirrorId</id> <!-- must be unique -->\n                            <mirrorOf>repositoryId</mirrorOf> <!-- this is mirror of which server -->\n                            <name>Human Readable Name for this Mirror.</name>\n                            <url>http://my.repository.com/repo/path</url>\n                            <layout>default</layout> <!-- no details yet in maven -->\n                            <mirrorOfLayouts>default | legacy</mirrorOfLayouts> <!-- no details yet in maven. Use default -->\n                        </mirror>\n                    </mirrors>\n                    <!-- profiles\n                     | We use profile to set environmental for your production. For example develop and test\n                     |\n                     |-->\n                    <profiles>\n                        <profile>\n                            <id>jdk-1.4</id>\n                            <!-- we speak about OS settings... -->\n                            <activation>\n                                <jdk>1.4</jdk> <!-- which jdk is used -->\n                            </activation>\n                            <properties/><!-- a property file (key:value) -->\n                            <pluginRepositories></pluginRepositories> <!-- plugins which are useful for this profile-->\n                            <repositories> <!-- if you want to use Nexus,-→ you must have defined it here-->\n                                <repository>\n                                    <id>jdk14</id>\n                                    <name>Repository for JDK 1.4 builds</name>\n                                    <url>http://www.myhost.com/maven/jdk14</url>\n                                    <layout>default</layout>\n                                    <snapshotPolicy>always</snapshotPolicy>\n                                </repository>\n                            </repositories>\n                        </profile>\n                        <!--\n                         | Here is another profile, activated by the system property 'target-env' with a value of 'dev',\n                         | which provides a specific path to the Tomcat instance. To use this, your plugin configuration\n                         | might hypothetically look like:\n                         |\n                         | ...\n                         | <plugin>\n                         |   <groupId>org.myco.myplugins</groupId>\n                         |   <artifactId>myplugin</artifactId>\n                         |\n                         |   <configuration>\n                         |     <tomcatLocation>$\\{tomcatPath}</tomcatLocation>\n                         |   </configuration>\n                         | </plugin>\n                         | ...\n                         |\n                         | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to\n                         |       anything, you could just leave off the <value/> inside the activation-property.\n                         |\n                        <profile>\n                          <id>env-dev</id>\n                          <activation>\n                            <property>\n                              <name>target-env</name>\n                              <value>dev</value>\n                            </property>\n                          </activation>\n                          <properties>\n                            <tomcatPath>/path/to/tomcat/instance</tomcatPath>\n                          </properties>\n                        </profile>\n                        -->\n                    </profiles>\n                    <!-- activeProfiles\n                     | List of profiles that are active for all builds.\n                     |\n                    <activeProfiles>\n                      <activeProfile>alwaysActiveProfile</activeProfile>\n                      <activeProfile>anotherAlwaysActiveProfile</activeProfile>\n                    </activeProfiles>\n                    -->\n                </settings>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getProjectStructure() {\n    return (\n        <Frame title={'Project structure'}>\n            <InfoIcon>\n                <p>\n                    Project assembling: Creating project structure is called assembling.\n                </p>\n                We should determine the structure of the project first. To do that, there are some predefined arch-types\n                (\n                <span\n                    className={'purple'}>An arch-type is responsible to assemble the project and manipulates pom file</span>).<br/>\n                <p>\n                    maven uses two major repository: repo.mavne.apache.org and uk.maven.org. If you are willing to\n                    upload your project in that repository, its name must be unique. To reach this goal we should follow\n                    (GroupName,ProjectName,Version) pattern.\n                </p>\n            </InfoIcon>\n            <div className={'float-holder'} style={{minWidth: '700px'}}>\n                <GenericCode title={''}>{`\n                .\n                ├── pom.xml //1\n                └── src\n                    ├── LICENSE.txt //2\n                    ├── main\n                    │   ├── config //3\n                    │   ├── db //4\n                    │   ├── java //5\n                    │   │   └── sourcePackages\n                    │   ├── resources\n                    │   │   └── META-INF\n                    │   ├── scripts //6\n                    │   └── webapp\n                    │       └── WEB-INF //7\n                    │           └── web.xml\n                    ├── NOTICE.txt //8\n                    ├── README.txt //9\n                    ├── site //10\n                    └── test\n                        ├── java\n                        └── resources\n                `}\n                </GenericCode>\n                <Bullet title={'1.'}>This is the heart of maven structure</Bullet>\n                <Bullet title={'2.'}>Talk about license here</Bullet>\n                <Bullet title={'3.'}>e.x: tomcat context files or mail server configs. This dir must not included in\n                    artifact</Bullet>\n                <Bullet title={'4.'}>DB info. SQL scripts are important</Bullet>\n                <Bullet title={'5.'}>Source code goes here</Bullet>\n                <Bullet title={'6.'}>Everything about system administration or things that a developer may need or OS\n                    environmental things.</Bullet>\n                <Bullet title={'7.'}>Window is able to recognize this dir in small and capital cases, but Linux accepts\n                    only capital case. Previously, all configs were going here, but now we almost use @, but never lose\n                    this dir. Some times it comes handy. After compile, classes dir will be created under this dir and\n                    .class files are located here.</Bullet>\n                <Bullet title={'8.'}>Notices goes here</Bullet>\n                <Bullet title={'9.'}>Instruction Information</Bullet>\n                <Bullet title={'10.'}>Images and any thing necessary for build</Bullet>\n            </div>\n        </Frame>\n    )\n}\n\nfunction getPomStructure() {\n    return (\n        <Frame title={'Pom.xml structure'}>\n            <InfoIcon>\n                <Blue>To declare a variable inside pom file:</Blue>\n                <Xml>\n                    {`\n                    <properties>\n                        <mysql.version>8.0.22</mysql.version>\n                    </properties>\n                    \n                    <someOtherNode>$\\{mysql.version}</someOtherNode>\n                    `}\n                </Xml>\n                <p>\n                    <Blue>Scope is declared to determine target place of dependency</Blue><br/>\n                    <span className={'purple'}>Compile:</span> build, test, run<br/>\n                    <span className={'purple'}>Provided:</span> build, test, run, !artifact<br/>\n                    <span className={'purple'}>Runtime:</span> artifact<br/>\n                    <span className={'purple'}>System:</span> like provided but is hardcoded in system in another\n                    path<br/>\n                    <span className={'purple'}>Test:</span> test, !artifact<br/>\n                </p>\n            </InfoIcon>\n            <Important>It is possible to put {`<dependencies/>`} in project node instead of profile. By this way, please\n                notice that it may cause some trouble if you address a dependency from your computer, then others will\n                fail to load that dependency. So it is recommended to put your desired depenedencies inside your own\n                profile node</Important>\n            <GenericCode>\n                {`\n                <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n                         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n                    <modelVersion>4.0.0</modelVersion>\n                \n                    <!-- this part must be unique →\n                    <!-- version: MajorVersion.MinorVersion.IncrementalVersion-qualifier(RC,alpha,beta,SNAPSHOT) →\n                    <!-- version.SNAPSHOT: it means that the project is under develop and is not stable, so maven downloads it on each sync cmd. -->\n                    <groupId>your company name/domain</groupId>\n                    <artifactId>project</artifactId>\n                    <version>1.0-SNAPSHOT</version>\n                   \n                    <packaging>jar</packaging> <!-- output package type-->\n                    <name>start with maven</name> <!-- the name of generated document -->\n                    <url>http://www.arash.softwares.com</url> <!-- the target URL which we want to send the document →\n                \n                    <!-- some information about developers -->\n                    <developers>\n                        <developer>\n                            <id>myId</id>\n                            <name>Arash Rezaie</name>\n                            <email>arash.re.12@gmail.com</email>\n                            <properties>\n                                <active>true</active>\n                            </properties>\n                        </developer>\n                    </developers>\n                \n                    <!-- you can define any variable here and it can be a new one or builtin.Ref: $\\{propertyName} -->\n                    <properties>\n                        <mysql.version>8.0.22</mysql.version>\n                    </properties>\n                \n                    <profiles>\n                        <profile>\n                            <id>develop</id>\n                            <activation>\n                                <!-- address a file indide project -->\n                                <file>\n                                    <exists>/src/main/lib.jar</exists>\n                                </file>\n                            </activation>\n                            <dependencies>\n                                <dependency>\n                                    <groupId>mysql</groupId>\n                                    <artifactId>mysql-connector-java</artifactId>\n                                    <version>$\\{mysql.version}</version>\n                                    <scope>compile</scope>\n                                    <exclusions>\n                                        <!-- We can exclude some lib in a scope to avoid conflict -->\n                                        <exclusion>\n                                            <groupId></groupId>\n                                            <artifactId></artifactId>\n                                        </exclusion>\n                                    </exclusions>\n                                </dependency>\n                                <dependency>\n                                    <!-- address a file in your system like this -->\n                                    <systemPath>local address</systemPath>\n                                </dependency>\n                            </dependencies>\n                        </profile>\n                    </profiles>\n                </project>\n                `}\n            </GenericCode>\n        </Frame>\n    )\n}\n\nfunction getLifecycle() {\n    return (\n        <Frame title={'Lifecycle'}>\n            Every operation in Maven executes by a plugin. One lifecycle includes some stages and each stage has some\n            goals to be passed one after the other to conclude the lifecycle.<br/>\n            There is an order to pass all phases,It stars from phase1.goal1, then phase1.goal2, ... till the end. So,\n            all prerequisite phases must be passed to execute an special stage<br/>\n            <img className={'center-horizontally-relative'} src={mavenLifecycle} alt={'maven lifecycle'}/>\n            <p>\n                Running stages:<br/>\n                <span className={'purple'}>mvn plugin</span><br/>\n                <span className={'purple'}>mvn plugin:goal</span><br/>\n                <span className={'blue'}>mvn compiler:compile</span><br/>\n                <br/>\n                Show what plugin does:<br/>\n                <span className={'blue'}>mvn help:describe -Dplugin=compiler</span><br/>\n            </p>\n        </Frame>\n    )\n}\n\nfunction getMultiModule() {\n    return (\n        <Frame title={'Multi-Module'}>\n            We have to separate a project into multiple subprojects, so a team will be able to develop the project at\n            the same time without breaking the code of others.<br/>\n            A multi-module project consists of multiple maven project, then we link them together and compile the root\n            project.<br/>\n            <img src={multiModule} alt={'multi-module project structure'}\n                 className={'center-horizontally-relative'}/><br/>\n            <GenericCode title={'project assembly'}>\n                {`\n                .\n                ├── config\n                ├── db\n                ├── LICENSE.txt\n                ├── maventest.iml\n                ├── NOTICE.txt\n                ├── persistence //module persistence\n                │   ├── main\n                │   │   ├── java\n                │   │   │   ├── com\n                │   │   │   │   └── arash\n                │   │   │   │       ├── Main.java\n                │   │   │   │       └── model\n                │   │   │   └── META-INF\n                │   │   └── resources\n                │   │       └── META-INF\n                │   ├── pom.xml //module pom file\n                │   ├── target\n                │   │   ├── maven-archiver\n                │   │   │   └── pom.properties\n                │   │   └── persistence.jar\n                │   └── test\n                │       ├── java\n                │       └── resources\n                ├── pom.xml  //main pom file\n                ├── README.txt\n                ├── scripts\n                ├── services //module services\n                │   ├── main\n                │   │   ├── java\n                │   │   │   ├── com\n                │   │   │   │   └── arash\n                │   │   │   │       └── Main.java\n                │   │   │   └── META-INF\n                │   │   └── resources\n                │   │       └── META-INF\n                │   ├── pom.xml //module pom file\n                │   ├── target\n                │   │   ├── maven-archiver\n                │   │   │   └── pom.properties\n                │   │   └── services.jar\n                │   └── test\n                │       ├── java\n                │       └── resources\n                ├── site\n                └── webapp\n                    └── WEB-INF\n                        └── web.xml\n                `}\n            </GenericCode>\n\n            <div className={'flex-row'}>\n                <Xml description={'Parent pom file'}>\n                    {`\n                <groupId>com.arash</groupId>\n                <artifactId>web</artifactId>\n                <version>1.0-SNAPSHOT</version>\n                <name>parent multi module</name>\n                \n                <!-- packaging must be pom -->\n                <packaging>pom</packaging>\n                \n                <!-- children must be defined in modules node, so main project becomes aware of them -->\n                <modules>\n                    <module>services</module>\n                    <module>persistence</module>\n                </modules>\n                \n                <properties>\n                    <mysql.version>8.0.22</mysql.version>\n                </properties>\n                <profiles>\n                    <profile>\n                        <id>develop</id>\n                        <build>\n                            <plugins>\n                                <plugin>\n                                    <groupId>org.apache.maven.plugins</groupId>\n                                    <artifactId>maven-compiler-plugin</artifactId>\n                                    <version>3.8.1</version>\n                                    <configuration>\n                                        <source>1.8</source>\n                                        <target>1.8</target>\n                                    </configuration>\n                                </plugin>\n                            </plugins>\n                        </build>\n                    </profile>\n                </profiles>\n                `}\n                </Xml>\n                <Xml description={'Child pom file'}>\n                    {`\n                <artifactId>services</artifactId>\n                <version>1.0-SNAPSHOT</version>\n                <name>child module service</name>\n                <packaging>jar</packaging>\n                \n                <!-- introduce main parent -->\n                <parent>\n                    <groupId>com.arash</groupId>\n                    <artifactId>web</artifactId>\n                    <version>1.0-SNAPSHOT</version>\n                </parent>\n                \n                <dependencies>\n                    <dependency>\n                        <groupId>com.arash</groupId>\n                        <artifactId>persistence</artifactId>\n                        <version>1.0-SNAPSHOT</version>\n                    </dependency>\n                </dependencies>\n                <build>\n                    <!-- parent name will be replaced if you drop this one -->\n                    <finalName>services</finalName>\n                </build>\n                `}\n                </Xml>\n            </div>\n        </Frame>\n    )\n}","/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/db/db-cheats.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/core/core-cheats.js",["121","122"],"import React from \"react\";\nimport {Bash, Frame, GenericCode, Java, Xml} from \"../../../components/blocks\";\nimport {InfoIcon} from \"../../../components/bubble\";\nimport {\n    Blue,\n    BlueBold,\n    Bold,\n    Bullet,\n    FlexRow,\n    Highlight,\n    HorizontalLine,\n    Important,\n    Purple,\n    Red\n} from \"../../../components/components\";\nimport {Float} from \"../../../components/float\";\nimport appContext from '../../../res/images/ApplicationContext.png';\nimport circularDependency from \"../../../res/images/circular-dependency.png\";\nimport beanLifecycle from \"../../../res/images/bean-life-cycle.png\";\nimport components from \"../../../res/images/components.png\";\n\nexport function CoreCheats() {\n    return (\n        <>\n            {getBeanContainer()}\n            {getScanningFilter()}\n            {getMerging()}\n            {getProfile()}\n            {getMultipleCandidate()}\n            {getXmlBasic()}\n            {getAnnotationBasic()}\n            {getAlias()}\n            {getPrivateConstructor()}\n            {getXmlLocalClass()}\n            {getAnnotationLocalClass()}\n            {getXmlCircularDependencies()}\n            {getAnnotationCircularDependencies()}\n            {getXmlLoadFromFile()}\n            {getJavaLoadFromFile()}\n            {getXmlChangingMethodBody()}\n            {getCollections()}\n            {getSpel()}\n            {getScopes()}\n            {getScopeIssue()}\n            {getBeanAware()}\n            {getTemplateClass()}\n            {getEvent()}\n        </>\n    )\n}\n\nfunction getBeanContainer() {\n    return (\n        <Frame title={'Catching bean'}>\n            <InfoIcon>\n                <Important>!the path in which we put java source and resource files is called ClassPath. It also can\n                    hold resources too.<br/>\n                </Important>\n                This is why, we use ClassPathXmlResource class to bring in our desired configuration file.<br/>\n                Every thing under main dir is called ClassPath, so test is out of that.\n            </InfoIcon>\n            <FlexRow>\n                <Java description={'using BeanFactory is deprecated'}>\n                    {`\n                    ClassPathResource resource = new ClassPathResource(\"containerconfig.xml\");\n                    BeanFactory beanFactory = new XmlBeanFactory(resource);\n                    return beanFactory.getBean(\"targetId\");\n                    `}\n                </Java>\n                <Java description={'new fasion'}>\n                    {`\n                    ApplicationContext context = new ClassPathXmlApplicationContext(\"containerconfig.xml\");\n                    return (Car) context.getBean(\"car\");`}\n                </Java>\n            </FlexRow>\n            <Important>ApplicationContext provides multiple configuration file registration.</Important>\n            <div className={'float-holder'} className={'center-horizontally-relative inline'}>\n                <img src={appContext} alt={'application context implementations'} style={{width: '1200px'}}/>\n                <Float l={1000} t={180} lineTo={[1072, 262]}>\n                    <div style={{width: '190px'}}>To fetch xml configuration from a file inside the application itself\n                    </div>\n                </Float>\n                <Float l={850} t={120} lineTo={[835, 262]}>\n                    <div style={{width: '260px'}}>To read xml configuration from a file system. Path must be relative\n                    </div>\n                </Float>\n                <Float l={890} t={362} lineTo={[873, 364]}>\n                    <div style={{width: '300px'}}>To read configuration from groovy file</div>\n                </Float>\n                <Float l={250} t={362} lineTo={[625, 365]}>\n                    <div style={{width: '300px'}}>To configure beans by annotations</div>\n                </Float>\n                <Float l={10} t={260} lineTo={[383, 330]}>\n                    <div style={{width: '350px'}}>To setup features via programmatic registration, rather than reading\n                        bean definitions from external configuration sources. Mainly useful for testing\n                    </div>\n                </Float>\n            </div>\n            <br/><br/>\n            Configuration file is due to determine instantiating mechanism.<br/>\n            <Blue>How to provide configuration file:</Blue>\n            <Bullet title={'1.'}>XML based configuration:\n                provide a xml file to define instantiation mechanism. We name it \"containerconfix.xml\" in here:\n                <Xml>\n                    {`\n                    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n                           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                           xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n                    \n                        <bean id=\"bean1\" class=\"Bean1\"/>\n                    </beans>`}\n                </Xml>\n                <Java>{`\n                    public static void main(String[] args){\n                        ApplicationContext context = new ClassPathXmlApplicationContext(\"containerconfig.xml\");\n                        Bean1 bean1 = context.getBean(\"bean1\");\n                    }`}</Java>\n            </Bullet>\n            <Bullet title={'2.'}>Java based configuration:\n                <Java>\n                    {`\n                    /* provide a class to create instances and annotate it with @Configuration */\n                    @Configuration\n                    public class AppConfig {\n                    \n                        @Bean\n                        public Bean1 getBean1(){\n                            return new Bean1();\n                        }\n                    }\n                    \n                    public static void main(String[] args){\n                        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n                        context.register(AppConfig.class);\n                        context.refresh();\n                        \n                        Bean1 bean1 = context.getBean(Bean1.class);\n                    }`}\n                </Java>\n            </Bullet>\n            <Bullet title={'3.'}>Annotation based configuration:<br/>\n                Using annotation instead of direct java codes such\n                as <Bold>@Component</Bold>, <Bold>@Repository</Bold>, <Bold>@Service</Bold>, <Bold>@Configuration</Bold>,\n                <Bold>@Controller</Bold><br/>\n                Then we should aware spring of these classes by <Bold>@ComponentScan</Bold>\n                <FlexRow>\n                    <Java>\n                        {`\n                        @Configuration\n                        @ComponentScan(\"com.arash\")\n                        public class AppConfig {\n                        }\n                        \n                        /* bean class */\n                        @Component\n                        public class Bean1 {\n                        }\n                        \n                        /* catching bean */\n                        public static void main(String[] args){\n                            AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n                            context.register(AppConfig.class);\n                            context.refresh();\n                            \n                            Bean1 bean1 = context.getBean(Bean1.class);\n                        }\n                        `}\n                    </Java>\n                    <div>\n                        <img src={components} alt={'Component hierarchy'}/>\n                    </div>\n                </FlexRow>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getScanningFilter() {\n    return (\n        <Frame title={'Filtering through component scan'}>\n            It is wise to exclude unwanted classes from being scanned by spring.<br/>\n            <Java title={1}>\n                {`\n                @Configuration\n                /*\n                 * type = FilterType.REGEX\n                 * type = FilterType.ANNOTATION\n                 * type = FilterType.ASPECTJ\n                 * type = FilterType.ASSIGNABLE_TYPE\n                 * type = FilterType.CUSTOM\n                 */\n                @ComponentScan(basePackages = \"com\", includeFilters = {\n                @ComponentScan.Filter(type = FilterType.REGEX, pattern = \"*.*spring.obje*\"),\n                    @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = MyAnnotation.class),\n                    @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = Person.class)\n                })\n                public class AppConfig {\n                }`}\n            </Java>\n            <Xml title={1}>\n                {`\n                <beans ...>\n                    <context:component-scan base-package=\"com\">\n                        <context:include-filter type=\"regex\" expression=\"soWhat*\"/>\n                        <context:include-filter type=\"annotation\" expression=\"com.arash.models.common.MyAnnotation\"/>\n                    </context:component-scan>\n                </beans>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getXmlBasic() {\n    return (\n        <Frame title={'Passing arguments in xml'}>\n            <InfoIcon>\n                Catching data source for mysql sample:\n                <Xml>\n                    {`\n                    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\">\n                        <property name=\"username\" value=\"root\"/>\n                        <property name=\"password\" value=\"\"/>\n                        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/spring\"/>\n                    </bean>`}\n                </Xml>\n            </InfoIcon>\n            Passing arguments through xml configuration file is available via constructor and setters.\n            <Java>\n                {`\n                public class Car {\n                    private String name;\n                    private int color;\n                \n                    public Car(String name, int color) {\n                        this.name = name;\n                        this.color = color;\n                    }\n                }\n                \n                public class Person {\n                    private String name;\n                    private String email;\n                    private int age;\n                    private int hairColor;\n                    private Car car;\n                \n                    public Person(String name, String email, int age) {\n                        this.name = name;\n                        this.email = email;\n                        this.age = age;\n                    }\n                \n                    public void setHairColor(int hairColor) {\n                        this.hairColor = hairColor;\n                    }\n                    \n                    public void setCar(Car car) {\n                        this.car = car;\n                    }\n                }\n                `}\n            </Java>\n            <Xml>\n                {`\n                <bean id=\"car\" class=\"com.arash.models.multiconfigfiles.Car\">\n                    <constructor-arg value=\"ford\"/>\n                    <constructor-arg value=\"-16711936\"/>\n                </bean>\n            \n                <bean id=\"person\" class=\"com.arash.models.multiconfigfiles.Person\">\n                    <!--\n                        constructor args are sent by order by default,\n                        but you can provide more information such as type or index\n                    -->\n                    <constructor-arg value=\"Arash\"/>\n                    <constructor-arg index=\"1\" value=\"arash.12@gmail.com\"/>\n                    <constructor-arg type=\"int\" value=\"33\"/>\n                    \n                    <!-- passing parameter by setter -->\n                    <property name=\"hairColor\" value=\"-16777216\"/>\n                    <property name=\"car\" ref=\"car\"/> <!-- sending by ref -->\n                </bean>\n                `}\n            </Xml>\n            <HorizontalLine/>\n            It is also possible to pass values to relevant field by namespace<br/>\n            <Highlight>Remember to load <Red>xmlns:p=\"http://www.springframework.org/schema/p\"</Red> in\n                header</Highlight>\n            <Xml>\n                {`\n                    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                    <beans xmlns=\"http://www.springframework.org/schema/beans\"\n                           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                           xmlns:p=\"http://www.springframework.org/schema/p\"\n                           xsi:schemaLocation=\"\n                                http://www.springframework.org/schema/beans\n                                http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n                        <bean id=\"person2\" class=\"com.arash.models.xml.namespace.Person\"\n                              p:car-ref=\"car\"\n                              p:hairColor=\"-16711936\">\n                            <constructor-arg value=\"Arash\"/>\n                            <constructor-arg index=\"1\" value=\"arash.12@gmail.com\"/>\n                            <constructor-arg type=\"int\" value=\"33\"/>\n                        </bean>\n                    </bean>\n                    `}\n            </Xml>\n\n            <Important>Using property is recommended over constructor when we face \"circular dependency\" or \"different\n                life length\"</Important>\n        </Frame>\n    )\n}\n\nfunction getAnnotationBasic() {\n    return (\n        <Frame title={'Passing arguments in annotation'}>\n            <InfoIcon>\n                <p>\n                    <Blue>Wiring:</Blue> connecting objects to each other is called wiring.\n                </p>\n                <p>\n                    <Blue>@Autowired</Blue> does not work on arrays\n                </p>\n                <p>\n                    <Purple>some equivalents for annotations:</Purple><br/>\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>Spring</th>\n                            <th>javax</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td>@Autowired</td>\n                            <td>@Inject, @Resource</td>\n                        </tr>\n                        <tr>\n                            <td>@Component</td>\n                            <td>@Named, @ManagedBean</td>\n                        </tr>\n                        <tr>\n                            <td>@Qualifier</td>\n                            <td>@Qualifier, @Named</td>\n                        </tr>\n                        <tr>\n                            <td>@Value</td>\n                            <td>---</td>\n                        </tr>\n                        <tr>\n                            <td>@Required</td>\n                            <td>---</td>\n                        </tr>\n                        <tr>\n                            <td>@Lazy</td>\n                            <td>---</td>\n                        </tr>\n                        <tr>\n                            <td>@Scope(“singleton”)</td>\n                            <td>@Singleton</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </p>\n            </InfoIcon>\n            <Java>\n                {`\n                @Component\n                public class Car {\n                    private String name;\n                    private int color;\n                \n                    public Car(@Value(\"ford\") String name, @Value(\"-16711936\") int color) {\n                        this.name = name;\n                        this.color = color;\n                    }\n                }\n                \n                @Component\n                public class Person {\n                    private String name;\n                \n                    @Value(\"-16777216\")\n                    private int hairColor;\n                \n                    @Autowired\n                    private Car car;\n                    \n                    @Value(\"Arash\")\n                    public void setName(String name){\n                        this.name = name;\n                    }\n                }\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getXmlLocalClass() {\n    return (\n        <Frame title={'Inner & Nested class in xml'}>\n            Instantiating nested class is easy as the class is static\n            <Java>\n                {`\n                    public class ParentClass {\n                        \n                        public static class NestedClass {\n                        }\n                        \n                        public class InnerClass {\n                        }\n                    }\n                    \n                    //how to get instance in java\n                    ParentClass parentClass = new ParentClass();\n                    ParentClass.NestedClass nestedClass = new ParentClass.NestedClass();\n                    ParentClass.InnerClass innerClass = pc.new InnerClass();`}\n            </Java>\n            <Xml>\n                {`\n                    <!-- parent class: -->\n                    <bean id=\"parentClass\" class=\"ParentClass\"/>\n                    \n                    <!-- creating public nested class is easy. Use '$' instead of '.' -->\n                    <bean id=\"nestedClass\" class=\"ParentClass$NestedClass\"/>\n                    `}\n            </Xml>\n            Instantiating inner class is a bit more complicated as it needs its parent class instance.<br/>\n            To do that, we should hire a generator<br/><br/>\n            <Bullet title={'1.'}><BlueBold>factory-bean:</BlueBold>\n                <Java>\n                    {`\n                        public class ParentClass {\n                        \n                            public static class NestedClass {\n                            }\n                            \n                            public class InnerClass {\n                            }\n                        }\n                        \n                        public class InnerClassFactory implements FactoryBean<ParentClass.InnerClass> {\n                \n                            @Override\n                            public ParentClass.InnerClass getObject() throws Exception {\n                                ApplicationContext ctx = ContextProvider.getXmlContext();\n                                ParentClass pc = (ParentClass) ctx.getBean(\"parentClass\");\n                                return pc.new InnerClass();\n                            }\n                        \n                            @Override\n                            public Class<?> getObjectType() {\n                                return ParentClass.InnerClass.class;\n                            }\n                            \n                            @Override\n                            public boolean isSingleton() {\n                                return false;\n                            }\n                        }\n                        `}\n                </Java>\n                <Xml>\n                    {`\n                        <bean id=\"parentClass\" class=\"ParentClass\"/>\n                                \n                        <!-- creating InnerClass by factory bean. Factory class must implement FactoryBean -->\n                        <bean id=\"innerClass\" class=\"com.arash.models.localclass.InnerClassFactory\">`}\n                </Xml>\n\n            </Bullet>\n            <Bullet title={'2.'}><BlueBold>factory-method:</BlueBold>\n                <Java>\n                    {`\n                        public class ParentClass {\n                            public static class NestedClass {\n                            }\n                        \n                            public class InnerClass {\n                            }\n                            \n                            public InnerClass getInnerClassInstance() {\n                                return new InnerClass();\n                            }\n                        }`}\n                </Java>\n                <Xml>\n                    {`\n                        <bean id=\"parentClass\" class=\"ParentClass\"/>\n                        \n                        <!-- creating InnerClass by factory method -->\n                        <bean id=\"innerClass\" class=\"com.arash.models.localclass.ParentClass.InnerClass\"\n                                factory-bean=\"parentClass\" factory-method=\"getInnerClassInstance\"/>`}\n                </Xml>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getAnnotationLocalClass() {\n    return (\n        <Frame title={'Inner & Nested class in annotation'}>\n            <Java>\n                {`\n                @Component\n                public class ParentClass {\n                    @Component\n                    public static class NestedClass {\n                    }\n                \n                    @Component\n                    public class InnerClass {\n                    }\n                }\n                \n                //usage>>>\n                ApplicationContext ctx = ContextProvider.getAnnotaionContext();\n                ParentClass pc = ctx.getBean(ParentClass.class);\n                ParentClass.NestedClass nc = ctx.getBean(ParentClass.NestedClass.class);\n                ParentClass.InnerClass ic=ctx.getBean(ParentClass.InnerClass.class);\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getAlias() {\n    return (\n        <Frame title={'Alias'}>\n            <Xml title={1}>\n                {`\n                <bean id=\"car\" name=\"car\" class=\"com.arash.models.Car\"/>\n                <alias name=\"car\" alias=\"automobile\"/>\n                <alias name=\"car\" alias=\"vehicle\"/>\n                `}\n            </Xml>\n            <Java title={1}>\n                {`\n                @Bean({\"car\", \"automobile\", \"vehicle\"})\n                private Car getCar() {\n                    return new Car(\"ford\", -16711936);\n                }`}\n            </Java>\n            <Java description={'usage'}>\n                {`\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                Car car = (Car) ctx.getBean(\"car\");\n                Car car2 = (Car) ctx.getBean(\"automobile\");\n                Car car3 = (Car) ctx.getBean(\"vehicle\");`}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getPrivateConstructor() {\n    return (\n        <Frame title={'Private constructor'}>\n            <Java>\n                {`\n                public class PrivateConstructor {\n                \n                    private PrivateConstructor() {\n                    }\n                    \n                    public static PrivateConstructor getInstance(){\n                        return new PrivateConstructor();\n                    }\n                }`}\n            </Java>\n            <Xml>\n                {`\n                <!-- \n                    as spring is all about reflection, so program elements scope makes no problem.\n                    It works pretty nice in spring 4. Also, some other ways are avaiable\n                -->\n                <bean id=\"privateConstructor\" class=\"com.arash.models.privateconstructor.PrivateConstructor\"/>\n                \n                <!-- access through static method -->\n                <bean id=\"privateConstructor2\" class=\"com.arash.models.privateconstructor.PrivateConstructor\"\n                    factory-method=\"getInstance\"/>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getXmlCircularDependencies() {\n    return (\n        <Frame title={'Circular dependency in xml configuration'}>\n            The problem is a set of commplicated dependencies which can not be resolved so easily.<br/>\n            <img src={circularDependency} alt={'circular dependency'}/><br/><br/>\n            check the following examples out:\n            <FlexRow>\n                <Java title={true}>\n                    {`\n                    public class Student {\n                        private Shoes shoes;\n        \n                        public Student(Shoes shoes) {\n                            this.shoes = shoes;\n                        }\n                    }\n                    \n                    public class Shoes {\n                        private Student student;\n                    \n                        public Shoes(Student student) {\n                            this.student = student;\n                        }\n                    }`}\n                </Java>\n                <Xml title={true} description={'this config fails'}>\n                    {`\n                    <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                        <constructor-arg ref=\"shoes\"/>\n                    </bean>\n                    <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\">\n                        <constructor-arg ref=\"student\"/>\n                    </bean>\n                `}\n                </Xml>\n            </FlexRow>\n            <HorizontalLine/>\n            <span className={'purple'}>To overcome this problem there are some suggestions:</span>\n            <Bullet title={'1.'}>Changing a constructor to setter<br/>\n                <Important>Bean definition follows no order whilst usage order is, so this way is not\n                    recommended</Important><br/>\n                <Highlight>If you turn constructor of both mentioned classes to setter, there would be no matter with\n                    the\n                    order</Highlight>\n                <FlexRow>\n                    <Java title={true} description={'use setter instead of constructor'}>\n                        {`\n                        public class Student {\n                            private Shoes shoes;\n                        \n                            public void setShoes(Shoes shoes) {\n                                this.shoes = shoes;\n                            }\n                        }\n                        \n                        public class Shoes {\n                            private Student student;\n                        \n                            public Shoes(Student student) {\n                                this.student = student;\n                            }\n                        }\n                        \n                        ----------------------------------------------------------\n                        \n                        //usage\n                        ApplicationContext ctx = ContextProvider.getXmlContext();\n                        \n                        //correct order\n                        Student student = (Student) ctx.getBean(\"student\");\n                        Shoes shoes= (Shoes) ctx.getBean(\"shoes\");\n                        \n                        //incorrect order\n                        Shoes shoes= (Shoes) ctx.getBean(\"shoes\");\n                        Student student = (Student) ctx.getBean(\"student\");\n                        `}\n                    </Java>\n                    <Xml title={true}\n                         description={'one property & one constructor'}>\n                        {`\n                        <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                            <property name=\"shoes\" ref=\"shoes\"/>\n                        </bean>\n                        \n                        <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\">\n                            <constructor-arg ref=\"student\"/>\n                        </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet><br/>\n            <Bullet title={'2.'}>Using lazy-init<br/>\n                By this way, we can define that which bean must be initialized on demand, therefor order problem\n                ignored.\n                <FlexRow>\n                    <Java title={true} description={'only student drops its constructor'}>\n                        {`\n                        public class Student {\n                            private Shoes shoes;\n                        \n                            public void setShoes(Shoes shoes) {\n                                this.shoes = shoes;\n                            }\n                        }\n                        \n                        public class Shoes {\n                            private Student student;\n                        \n                            public Shoes(Student student) {\n                                this.student = student;\n                            }\n                        }\n                        `}\n                    </Java>\n                    <Xml title={true} description={'define who has to laod at first'}>\n                        {`\n                         <bean id=\"student\" class=\"com.arash.models.circulardep.Student\" lazy-init=\"false\">\n                             <property name=\"student\" ref=\"shoes\"/>\n                         </bean>\n                        \n                         <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\" lazy-init=\"true\">\n                             <constructor-arg ref=\"student\"/>\n                         </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet><br/>\n            <Bullet title={'3.'}>Using idref (idref is id of a bean as string, but it checks the existence of the\n                bean)\n                <FlexRow>\n                    <Java title={true} description={'save idref and init before use'}>\n                        {`\n                        public class Student {\n                            private String shoesId;\n                            private Shoes shoes;\n                        \n                            public Student(String shoesId) {\n                                this.shoesId = shoesId;\n                            }\n                        \n                            public void init(){\n                                ApplicationContext ctx = ContextProvider.getXmlContext();\n                                shoes = (Shoes) ctx.getBean(shoesId);\n                            }\n                        }`}\n                    </Java>\n                    <Xml title={true} description={'pass idref insted of ref'}>\n                        {`\n                        <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                            <constructor-arg>\n                                <idref bean=\"shoes\"/>\n                            </constructor-arg>\n                        </bean>\n                        <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\">\n                            <constructor-arg ref=\"student\"/>\n                        </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet><br/>\n            <Bullet title={'4.'}>Using depends-on\n                <FlexRow>\n                    <Java title={true}>\n                        {`\n                        public class Student {\n                            private Shoes shoes;\n                        \n                            public void setShoes(Shoes shoes) {\n                                this.shoes = shoes;\n                            }\n                        }\n                        \n                        public class Shoes {\n                            private Student student;\n                        \n                            public Shoes(Student student) {\n                                this.student = student;\n                            }\n                        }\n                        `}\n                    </Java>\n                    <Xml title={true} description={'define who depends on who'}>\n                        {`\n                        <bean id=\"student\" class=\"com.arash.models.circulardep.Student\">\n                            <property name=\"student\" ref=\"shoes\"/>\n                        </bean>\n                    \n                        <bean id=\"shoes\" class=\"com.arash.models.circulardep.Shoes\" depends-on=\"student\" >\n                            <constructor-arg ref=\"student\"/>\n                        </bean>`}\n                    </Xml>\n                </FlexRow>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getAnnotationCircularDependencies() {\n    return (\n        <Frame title={'Circular dependency in annotation configuration'}>\n            <InfoIcon>\n                <Blue>@Lazy</Blue> is available in spring too to load a programming element on demand\n                <Java>\n                    {`\n                    @Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.FIELD})\n                    @Retention(RetentionPolicy.RUNTIME)\n                    @Documented\n                    public @interface Lazy {\n                        boolean value() default true;\n                    }`}\n                </Java>\n            </InfoIcon>\n            <Java description={'resolve both via constructor; won\\'t work'}>\n                {`\n                @Component\n                public class Student {\n                    private Shoes shoes;\n                \n                    public Student(@Autowired Shoes shoes) {\n                        this.shoes = shoes;\n                    }\n                }\n                \n                @Component\n                public class Shoes {\n                    private Student student;\n                \n                    public Shoes(@Autowired Student student) {\n                        this.student = student;\n                    }\n                }`}\n            </Java>\n            <HorizontalLine/>\n            <Java description={'resolve only one via constructor; works painless'}>\n                {`\n                @Component\n                public class Student {\n                    private Shoes shoes;\n                    \n                     public Student(@Autowired Shoes shoes) {\n                        this.shoes = shoes;\n                    }\n                }\n                \n                @Component\n                public class Shoes {\n                    @Autowired\n                    private Student student;\n                }`}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getXmlLoadFromFile() {\n    return (\n        <Frame title={'Load properties from a file in xml'}>\n            Let's have a property file containing:\n            <GenericCode title={'jdbc.properties'}>\n                {`\n                    jdbc.driverClassName=com.mysql.jdbc.Driver\n                    jdbc.url=jdbc:mysql://localhost:3306/concretepage\n                    jdbc.username=root\n                    jdbc.password=`}\n            </GenericCode>\n\n            Now it's time to load the file\n            <Xml description={'using PropertySourcesPlaceholderConfigurer class'}>\n                {`\n                    <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n                        <property name=\"location\" value=\"jdbc.properties\"/>\n                    </bean>`}\n            </Xml>\n            <Xml description={'using spring itself place-holder manager'}>\n                {'<context:property-placeholder location=\"jdbc.properties\"/>'}\n            </Xml>\n            <Xml description={'usage'}>\n                {`\n                    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\">\n                        <property name=\"username\" value=\"$\\{jdbc.username}\"/>\n                        <property name=\"password\" value=\"$\\{jdbc.password}\"/>\n                        <property name=\"url\" value=\"$\\{jdbc.url}\"/>\n                        <property name=\"driverClassName\" value=\"$\\{jdbc.driverClassName}\"/>\n                    </bean>`}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getJavaLoadFromFile() {\n    return (\n        <Frame title={'Load properties from a file in annotation'}>\n            <Bullet title={'1.'}>\n                Via context environment:<br/>\n                add <Blue>@PropertySource</Blue> to your configuration class and catch it by context.getEnvironment()\n                <Java>\n                    {`\n                    @Configuration\n                    @ComponentScan(\"com.arash\")\n                    @PropertySource(\"classpath:jdbc.properties\")\n                    public class AppConfig {\n                    }\n                    \n                    //usage>>>\n                    ApplicationContext ctx = ContextProvider.getAnnotaionContext();\n                    Environment env = ctx.getEnvironment();\n                    System.out.println(\"driver: \" + env.getProperty(\"jdbc.driverClassName\"));\n                    System.out.println(\"url: \"+env.getProperty(\"jdbc.url\"));\n                    System.out.println(\"username: \"+env.getProperty(\"jdbc.username\"));\n                    System.out.println(\"password: \"+env.getProperty(\"jdbc.password\"));\n                    `}\n                </Java>\n            </Bullet>\n            <Bullet title={'2.'}>\n                Via <Blue>@Value</Blue>:<br/>\n                use <Blue>@PropertySource</Blue> on configuration file and\n                define <Blue>PropertySourcesPlaceholderConfigurer</Blue> bean\n                <Java>\n                    {`\n                    @Configuration\n                    @ComponentScan(\"com.arash\")\n                    @PropertySources({\n                            @PropertySource(\"configs.properties\"),\n                            @PropertySource(\"classpath:jdbc.properties\")\n                    })\n                    public class AppConfig {\n                    \n                        @Bean\n                        public PropertySourcesPlaceholderConfigurer propertyConfigInDev() {\n                            return new PropertySourcesPlaceholderConfigurer();\n                        }\n                    }\n                    \n                    // Please notice that you must follow format \"#{'$\\{prop-name}'}\" for @Value\n                    @Component\n                    public class JdbcProp {\n                        @Value(\"#{'$\\{jdbc.driverClassName}'}\")\n                        private String driverClassName;\n                    \n                        @Value(\"#{'$\\{jdbc.url}'}\")\n                        private String url;\n                    \n                        @Value(\"#{'$\\{jdbc.username}'}\")\n                        private String username;\n                    \n                        @Value(\"#{'$\\{jdbc.password}'}\")\n                        private String password;\n                    }`}\n                </Java>\n            </Bullet>\n            <HorizontalLine/>\n            Loading generic file:\n            <Bullet title={'1.'}>\n                Through <Blue>@Value</Blue>\n                <Java>\n                    {`\n                    @Component\n                    public class TextFile {\n                        @Value(\"classpath:data.bat\")\n                        private String value;\n                    }\n                    `}\n                </Java>\n            </Bullet>\n            <Bullet title={'2.'}>\n                Through <Blue>Resource</Blue>:<br/>\n                Context has a Resource object embedded, So you can use that one too\n                <Java>\n                    {`\n                    @Component\n                    public class AnyFile {\n                        @Autowired\n                        private ResourceLoader resourceLoader;\n                    \n                        public Resource getBigFile(){\n                            return resourceLoader.getResource(\"classpath:bigData.dat\");\n                        }\n                    }`}\n                </Java>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getXmlChangingMethodBody() {\n    return (\n        <Frame title={'Changing method body'}>\n            <Bullet title={'1.'}>\n                Lookup method<br/>\n                To put it in simple words, lookup method injection is the process to override a Spring bean at the\n                runtime.<br/>\n                Use \"lookup\" to inject a method body without implementing an abstract class<br/>\n                <Java>\n                    {`\n                    public class CheeseBurger {\n                    }\n                    \n                    public class MushroomBurger {\n                    }\n                    \n                    public abstract class BurgerShop {\n                        public abstract MushroomBurger getMushroomBurger();\n                    \n                        public abstract CheeseBurger getCheeseBurger();\n                    }\n                    `}\n                </Java>\n                <Xml>\n                    {`\n                    <bean id=\"cheeseBurger\" class=\"com.arash.models.lookup.CheeseBurger\"/>\n                    <bean id=\"mushroomBurger\" class=\"com.arash.models.lookup.MushroomBurger\"/>\n                    <bean id=\"burgerShop\" class=\"com.arash.models.lookup.BurgerShop\">\n                        <lookup-method bean=\"cheeseBurger\" name=\"getCheeseBurger\"/>\n                        <lookup-method bean=\"mushroomBurger\" name=\"getMushroomBurger\"/>\n                    </bean>\n                    `}\n                </Xml>\n            </Bullet>\n            <HorizontalLine/>\n            <Bullet title={'2.'}>\n                Replacer method<br/>\n                Use \"method replacer\" to replace a method with the desired one by implementing MethodReplacer\n                <Java>\n                    {`\n                    public class MyCar {\n                        public String getMyFavoriteCar() {\n                            return \"Pagani\";\n                        }\n                    }\n                    \n                    public class MyReplacer implements MethodReplacer {\n                        @Override\n                        public Object reimplement(Object o, Method method, Object[] objects) throws Throwable {\n                            return \"Lamborghini\";\n                        }\n                    }\n                    `}\n                </Java>\n                <Xml>\n                    {`\n                    <bean id=\"replacer\" class=\"com.arash.models.replacer.MyReplacer\"/>\n                    <bean id=\"myCar\" class=\"com.arash.models.replacer.MyCar\">\n                        <replaced-method name=\"getMyFavoriteCar\" replacer=\"replacer\"/>\n                    </bean>\n                    `}\n                </Xml>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getScopes() {\n    return (\n        <Frame title={'Scopes'}>\n            <Blue>Defined scopes:</Blue>\n            <Bullet title={'singleton:'}>only one instance</Bullet>\n            <Bullet title={'prototype:'}>new instance on each call</Bullet>\n            <Bullet title={'request:'}>one instance per network request. It saves on request object</Bullet>\n            <Bullet title={'session:'}>one instance per session (again on the network)</Bullet>\n            <Bullet title={'application:'}>one instance per application. It stores in ServletContext</Bullet>\n            <Bullet title={'websocket:'}>one instance per websocket.</Bullet>\n            <Xml description={'xml configuration'}>\n                {`<bean id=\"bean1\" class=\"Bean1\" scope=\"prototype\"/>`}\n            </Xml>\n            <Java description={'java configuration'}>\n                {`\n                @Configuration\n                public class AppConfig {\n                    @Bean()\n                    @Scope(\"prototype\")\n                    private Bean1 getBean1(){\n                        return new Bean1();\n                    }\n                }`}\n            </Java>\n            <Java description={'annotation configuration'}>\n                {`\n                @Component\n                @Scope(\"prototype\")\n                public class Bean1 {\n                }`}\n\n            </Java>\n            <p>\n                <Red>All web scopes need listener to get worked and listeners must be defined at web layer</Red>\n            </p>\n        </Frame>\n    )\n}\n\nfunction getScopeIssue() {\n    return (\n        <Frame title={'Different scope wiring issue'}>\n            <InfoIcon>\n                Some times we involve with Longer Lived objects and Shorter Lived objects. What really happens\n                when you have different scopes? Who has to handle this situation.<br/>\n                For example, you have a singleton class which contains some prototype classes. Singleton class is\n                created only once and never changes but prototype classes must be changed each time.<br/><br/>\n                Consider the following example:\n                <FlexRow>\n                    <Java>\n                        {`\n                public class PrototypeClass {\n                }\n                \n                public class SingletonClass {\n                    private PrototypeClass prototypeClass;\n                    \n                    public PrototypeClass getPrototypeClass() {\n                        return prototypeClass;\n                    }\n                    \n                    public void setPrototypeClass(PrototypeClass prototypeClass) {\n                        this.prototypeClass = prototypeClass;\n                    }\n                }`}\n                    </Java>\n                    <Xml>\n                        {`\n                    <bean id=\"singletonClass\" class=\"com.arash.models.scopes.SingletonClass\" scope=\"singleton\">\n                        <property name=\"prototypeClass\" ref=\"prototypeClass\"/>\n                    </bean>\n                    <bean id=\"prototypeClass\" class=\"com.arash.models.scopes.PrototypeClass\" scope=\"prototype\"/>`}\n                    </Xml>\n                </FlexRow>\n                <Java description={'usage:'}>\n                    {`\n                ApplicationContext ctx = ContextProvider.getXmlContext();\n                SingletonClass sc = ctx.getBean(\"singletonClass\", SingletonClass.class);\n                Stream\n                        .generate(sc::getPrototypeClass)\n                        .limit(2)\n                        .forEach(System.out::println);\n                \n                result: >>>\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\n                com.arash.models.scopes.PrototypeClass@76ed1b7c\n                `}\n                </Java>\n                <Red>You see that created objects are the same:</Red>\n            </InfoIcon>\n            To solve this issue\n            <Bullet title={'1.'}><Purple>lookup-method & replacer-method:</Purple><br/>\n                lookup and replacer methods create object under defined circumstances.\n            </Bullet>\n            <Bullet title={'2.'}><Purple>Scoped proxy:</Purple><br/>\n                we can declare a proxy to join a short-life time and long-life time classes.<br/>\n                In fact, proxy comes stands in the middle and takes the responsibility of object creation.<br/><br/>\n                <Important>Put the proxy on shorter-life time class</Important>\n                <Xml title={1}>\n                    {`\n                    <bean id=\"singletonClass\" class=\"com.arash.models.scopes.SingletonClass\" scope=\"singleton\">\n                        <property name=\"prototypeClass\" ref=\"prototypeClass\"/>\n                    </bean>\n                    <bean id=\"prototypeClass\" class=\"com.arash.models.scopes.PrototypeClass\" scope=\"prototype\">\n                        <aop:scoped-proxy/>\n                    </bean>`}\n                </Xml>\n                <Java title={1}>\n                    {`\n                    @Component\n                    @Singleton\n                    public class SingletonClass {\n                    }\n                    \n                    @Component\n                    @Scope(value = \"prototype\",proxyMode = ScopedProxyMode.TARGET_CLASS)\n                    public class PrototypeClass {\n                    }\n                    `}\n                </Java>\n            </Bullet>\n            <div style={{maxWidth: '40rem'}}>\n                <Highlight>When {'<aop:scoped-proxy/>'} is in root node, all beans will be serialized at first, then\n                    on request, the bean will be deserialized, so the instance is a copy of the object.</Highlight>\n            </div>\n        </Frame>\n    )\n}\n\nfunction getCollections() {\n    return (\n        <Frame title={'Collections'}>\n            <Xml>\n                {`\n                <bean id=\"propCollection\" class=\"com.arash.models.collections.PropertyCollection\">\n                    <property name=\"map\">\n                        <props>\n                            <prop key=\"key1\">value1</prop>\n                            <prop key=\"key2\">value2</prop>\n                        </props>\n                    </property>\n                </bean>\n                \n                <bean id=\"mapCollection\" class=\"com.arash.models.collections.MapCollection\">\n                    <property name=\"map\">\n                        <map>\n                            <entry key=\"key1\" value=\"value1\"/>\n                            <entry key=\"key2\" value=\"value2\"/>\n                        </map>\n                    </property>\n                </bean>\n                \n                <bean id=\"listCollection\" class=\"com.arash.models.collections.ListCollection\">\n                    <property name=\"map\">\n                        <list>\n                            <value>entry1</value>\n                            <ref bean=\"bean1\"/>\n                        </list>\n                    </property>\n                </bean>\n                \n                <bean id=\"setCollection\" class=\"com.arash.models.collections.SetCollection\">\n                    <property name=\"map\">\n                        <set>\n                            <value>entry1</value>\n                            <ref bean=\"bean1\"/>\n                        </set>\n                    </property>\n                </bean>`}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getBeanAware() {\n    return (\n        <Frame title={'Aware classes'}>\n            <InfoIcon>\n                <Purple>Bean lifecycle</Purple><br/>\n                <img src={beanLifecycle} alt={'bean lifecycle'} className={'center-horizontally-relative'}\n                     style={{width: '500px'}}/>\n            </InfoIcon>\n            Some times we need that a bean be aware of its context features. To reach this, we can use aware interfaces.<br/>\n            <div style={{maxWidth: '40rem'}}>\n                To hook our code into bean lifecycle, there are some interfaces available which do the job, also you can\n                do that via xml or annotaion in some cases.\n            </div>\n            <Java>\n                {`\n                public class MyBean implements Phased, BeanNameAware, BeanFactoryAware, ApplicationContextAware,\n                                                BeanPostProcessor, InitializingBean, DisposableBean {\n                    /*Phased*/\n                    @Override\n                    public int getPhase() {return 0;}\n                \n                    /*BeanNameAware*/\n                    @Override\n                    public void setBeanName(String s) {}\n                \n                    /*BeanFactoryAware*/\n                    @Override\n                    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {}\n                \n                    /*ApplicationContextAware*/\n                    @Override\n                    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {}\n                \n                    /*BeanPostProcessor.preInitialization*/\n                    @Override\n                    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n                        return null;\n                    }\n                \n                    /*InitializingBean*/\n                    @Override\n                    public void afterPropertiesSet() throws Exception {}\n                \n                    /*BeanPostProcessor.postInitialization*/\n                    @Override\n                    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n                        return null;\n                    }\n                \n                    /*DisposableBean*/\n                    @Override\n                    public void destroy() throws Exception {}\n                }`}\n            </Java>\n            <Important>To listen to all beans destruction: <Bold>context.registerShutDownHook()</Bold></Important>\n            <br/><br/>\n            <FlexRow>\n                <Xml description={'pom.xml'}>\n                    {`\n                    <dependency>\n                        <groupId>org.apache.james</groupId>\n                        <artifactId>james-server-lifecycle-spring</artifactId>\n                        <version>3.0-beta4</version>\n                    </dependency>\n                `}\n                </Xml>\n                <Java description={'annotation'}>\n                    {`\n                    public class MyBean2 {\n                        \n                        @PostConstruct\n                        void afterContruct(){}\n        \n                        @PreDestroy\n                        void preDestroy(){}\n                    }`}\n                </Java>\n            </FlexRow>\n            <Java title={1}>\n                {`\n                    @Configuration\n                    public class AppConfig {\n                        \n                        @Bean(initMethod = \"\")\n                        public Bean1 getBean1(){\n                            return new Bean1();\n                        }\n                    }`}\n            </Java>\n            <Xml description={'Via xml'}>\n                {`\n                <!-- post-init -->\n                <bean init-bean=\"...\"/>\n                <bean init-method=\"...\"/>\n                \n                <!-- to init all bean as the same -->\n                <beans default-init-method=\"unique method\"/>\n\n                <!-- pre-destroy -->\n                <bean destroy-method=\"...\"/>\n                `}\n            </Xml>\n        </Frame>\n    )\n}\n\nfunction getTemplateClass() {\n    return (\n        <Frame title={'Template class'}>\n            Template class come in when we are willing to initialize a set of beans refusing any much bothering.\n            <FlexRow>\n                <Java>\n                    {`\n                    public class Student {\n                    private String name;\n                    private int age;\n                    private String hairColor;\n\n                    public void setName(String name) {\n                    this.name = name;\n                }\n\n                    public void setAge(int age) {\n                    this.age = age;\n                }\n\n                    public void setHairColor(String hairColor) {\n                    this.hairColor = hairColor;\n                }\n                }`}\n                </Java>\n                <Xml>\n                    {`\n                    <!-- declare an abstract class -->\n                    <bean id=\"templatePerson\" abstract=\"true\">\n                    <property name=\"name\" value=\"arash\"/>\n                    <property name=\"age\" value=\"33\"/>\n                    </bean>\n\n                    <!-- define the abstract class as parent -->\n                    <bean id=\"student\" class=\"com.arash.models.Student\" parent=\"templatePerson\">\n                    <property name=\"hairColor\" value=\"black\"/>\n                    </bean>`}\n                </Xml>\n            </FlexRow>\n\n        </Frame>\n    )\n}\n\nfunction getMerging() {\n    return (\n        <Frame title={'Merging configuration files'}>\n            <Xml description={'merging other configurations into xml'}>\n                {`\n                    <beans ...>\n                        <context:annotation-config/>\n                        \n                        <!-- scan a package to figure out its Components -->\n                        <context:component-scan base-package=\"com\"/>\n                    </beans>\n                `}\n            </Xml>\n            <Java description={'merging other configurations into java class'}>\n                {`\n                //merge other classes\n                @Import(OtherAppConfig.class)\n                \n                //merge xml files\n                @ImportResource(locations = \"classpath:containerconfig.xml\")\n                \n                @Configuration\n                public class AppConfig {\n                }\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getMultipleCandidate() {\n    return (\n        <Frame title={'multiple candidate'}>\n            There is possibility to have more than 1 candidate when you request a bean. To make spring to return true\n            object you can use <Bold>primary</Bold> and <Bold>qualifier</Bold> key words.\n            <Bullet title={'1.'}>\n                <Bold>Primary:</Bold><br/>\n                Set a bean as primary\n                <FlexRow>\n                    <Xml title={1}>\n                        {`\n                    <bean id=\"ferrai\" class=\"com.arash.models.multiplecandidates.Ferrari\" primary=\"true\"/>\n                    <bean id=\"lamborghini\" class=\"com.arash.models.multiplecandidates.Lamborghini\">`}\n                    </Xml>\n                    <Java title={1}>\n                        {`\n                    @Configuration\n                    public class AppConfig {\n                        @Primary\n                        @Bean\n                        public Car getLamborghini() {\n                            return new Lamborghini();\n                        }\n    \n                        @Bean\n                        public Car getFerrari() {\n                            return new Ferrari();\n                        }\n                    }`}\n                    </Java>\n                </FlexRow>\n            </Bullet>\n            <Bullet title={'2.'}>\n                <Bold>Qualifier:</Bold><br/>\n                determine what object should be injected based on the given information\n                <Java description={'custom qualifier'}>\n                    {`\n                    @Target(ElementType.FIELD)\n                    @Retention(RetentionPolicy.RUNTIME)\n                    @Qualifier\n                    public @interface MyQualifier {\n                        String value() default \"\";\n                        String color();\n                    }`}\n                </Java>\n                <FlexRow>\n                    <Xml title={1}>\n                        {`\n                    <!--qualifier with a simple string-->\n                    <bean id=\"ferrai\" className=\"com.arash.models.multiplecandidates.Ferrari\">\n                        <qualifier value=\"ferrari\"/>\n                    </bean>\n\n                    <!--qualifier with custom selection property-->\n                    <bean id=\"lamborghini\"className=\"com.arash.models.multiplecandidates.Lamborghini\">\n                        <qualifier type=\"com.arash.models.multiplecandidates.MyQualifier\">\n                            <attribute key=\"color\"value=\"green\"/>\n                        </qualifier>\n                    </bean>\n\n                    <bean id=\"pagani\"className=\"com.arash.models.multiplecandidates.Pagani\">\n                        <qualifier type=\"com.arash.models.multiplecandidates.MyQualifier\">\n                            <attribute key=\"color\"value=\"black\"/>\n                        </qualifier>\n                    </bean>`}\n                    </Xml>\n                    <Java title={1}>\n                        {`\n                    @Configuration\n                    public class AppConfig {\n                        @Qualifier(\"ferrari\")\n                        @Bean\n                        public Car getFerrari() {\n                            return new Ferrari();\n                        }\n    \n                        @MyQualifier(name = \"lambo\",color = \"green\")\n                        @Bean\n                        public Car getLamborghini() {\n                            return new Lamborghini();\n                        }\n    \n                        @Bean\n                        @MyQualifier(name = \"lambo\",color = \"black\")\n                        public Car getPagani(){\n                            return new Pagani();\n                        }\n                    }`}\n                    </Java>\n                </FlexRow>\n                <Java description={'usage'}>\n                    {`\n                    public class Engineer extends Person {\n                        @MyQualifier(name = \"lambo\", color = \"black\")\n                        @Autowired\n                        private Car car1;\n    \n                        @Autowired\n                        @MyQualifier(name = \"lambo\", color = \"green\")\n                        private Car car2;\n    \n                        @Autowired\n                        @Qualifier(\"ferrari\")\n                        private Car car3;\n                    }`}\n                </Java>\n            </Bullet>\n        </Frame>\n    )\n}\n\nfunction getSpel() {\n    return (\n        <Frame title={'Spring Expression Language (SPEL)'}>\n            this expression is useful when we are willing to pass some data via @Value or XML or to execute a tiny piece\n            of\n            code easily.<br/>\n            The general format is <Bold>{'#{SPEL}'}</Bold><br/><br/>\n            <Purple>Usage:</Purple>\n            <Bullet title={'1.'} level={1}>\n                <Bold>java:</Bold>\n                <Java>\n                    {`\n                    ExpressionParser parser = new SpelExpressionParser();\n                    Expression exp = parser.parseExpression(\"'Hello World'\");\n                    String message = (String) exp.getValue();`}\n                </Java>\n            </Bullet>\n            <Bullet title={'2.'} level={1}>\n                <Bold>xml:</Bold>\n                <Xml>\n                    {`\n                    <!--calculate some value by spel-->\n                    <bean id=\"numberGuess\" class=\"com.arash.models.ANumber\">\n                    <property name=\"randomNumber\" value=\"#{T(java.lang.Math).random() * 100.0}\"/>\n                    </bean>\n\n                    <!--using a property of another class-->\n                    <bean id=\"shapeGuess\" class=\"com.arash.models.ANumber\">\n                    <property name=\"randomNumber\" value=\"#{someClass.prop}\"/>\n                    </bean>`}\n                </Xml>\n            </Bullet>\n            <Bullet title={'1.'} level={1}>\n                <Bold>annotation:</Bold>\n                <Java>\n                    {`\n                    public class ANumber {\n                    @Value(\"900\")\n                    private int randomNumber;\n\n                    public void setRandomNumber(int randomNumber) {\n                    this.randomNumber = randomNumber;\n                    }\n                    }`}\n                </Java>\n            </Bullet>\n            <HorizontalLine/>\n            <Java>\n                {`\n                    /*** literal expression ***/\n                    “'Hello World'”\n                    \"6.0221415E+23\"\n                    \"0x7FFFFFFF\"\n                    \"true\"\n                    \"null\"\n\n                    /*** properties, arrays, lists, maps, indexers ***/\n                    \"Birthdate.Year + 1900\"\n                    \"Members[0].Inventions[6]\"\n                    \"Officers['president'].PlaceOfBirth.City\"\n\n                    StandardEvaluationContext context = new StandardEvaluationContext();\n\n                    /*** inline lists, Maps ***/\n                    List numbers = (List) parser.parseExpression(\"{1,2,3,4}\").getValue(context);\n                    List listOfLists = (List) parser.parseExpression(\"{{'a','b'},{'x','y'}}\").getValue(context);\n                    Map lst = (Map) parser.parseExpression(\"{'k1':'v1','k2':'v2'}\").getValue(context);\n\n                    /*** array construction ***/\n                    int[] numbers1 = (int[]) parser.parseExpression(\"new int[4]\").getValue(context);\n                    int[] numbers2 = (int[]) parser.parseExpression(\"new int[]{1,2,3}\").getValue(context);\n                    int[][] numbers3 = (int[][]) parser.parseExpression(\"new int[4][5]\").getValue(context);\n\n                    /*** methods ***/\n                    String c = parser.parseExpression(\"'abc'.substring(2, 3)\").getValue(String.class);\n\n                    /*** operators ***/\n                    boolean a = parser.parseExpression(\"2 == 2\").getValue(Boolean.class); //true\n                    boolean b = parser.parseExpression(\"2 < -5.0\").getValue(Boolean.class); //false\n                    boolean c = parser.parseExpression(\"'black' < 'block'\").getValue(Boolean.class); //true\n                    boolean d = parser.parseExpression(\"'5.00' matches '^-?\\\\\\\\d+(\\\\\\\\.\\\\\\\\d{2})?$'\").getValue(Boolean.class); //true\n                    boolean e = parser.parseExpression(\"true and false\").getValue(Boolean.class); //false\n                    String expression = \"isMember('Nikola Tesla') and isMember('Mihajlo Pupin')\";\n                    boolean f = parser.parseExpression(\"!true\").getValue(Boolean.class); //false\n                    int two = parser.parseExpression(\"1 + 1\").getValue(Integer.class); // 2\n                    String g = parser.parseExpression(\"'test' + ' ' + 'string'\").getValue(String.class);  // 'test string'\n                    double h = parser.parseExpression(\"1000.00 - 1e4\").getValue(Double.class); // -9000\n                    String i = parser.parseExpression(\"Name = 'Alexandar Seovic'\").getValue(context, String.class);\n\n                    /*** types ***/\n                    Class dateClass = parser.parseExpression(\"T(java.util.Date)\").getValue(Class.class);\n                    Class stringClass = parser.parseExpression(\"T(String)\").getValue(Class.class);\n                    boolean j = parser.parseExpression(\"T(java.math.RoundingMode).CEILING < T(java.math.RoundingMode).FLOOR\").getValue(Boolean.class); //true\n\n                    /*** constructors ***/\n                    Inventor einstein = parser.parseExpression(\"new com.arash.Inventor('Albert Einstein', 'German')\").getValue(Inventor.class);\n\n                    /*** variables ***/\n                    Inventor tesla = new Inventor(\"Nikola Tesla\", \"Serbian\");\n                    StandardEvaluationContext context2 = new StandardEvaluationContext(tesla);\n                    context2.setVariable(\"newName\", \"Mike Tesla\");\n                    parser.parseExpression(\"Name = #newName\").getValue(context);\n                    System.out.println(tesla.getName()); // \"Mike Tesla\"\n\n                    /*** another sample ***/\n                    List<Integer> primes = new ArrayList<Integer>();\n                    primes.addAll(Arrays.asList(2, 3, 5, 7, 11, 13, 17));\n                    context2.setVariable(\"primes\", primes);\n                    List<Integer> primes2 = (List<Integer>) parser.parseExpression(\"#primes.?[#this>10]\").getValue(context); // select of numbers > 10\n\n                    /*** functions ***/\n                    context2.registerFunction(\"reverseString\", StringUtils.class.getDeclaredMethod(\"reverseString\", new Class[]{String.class}));\n                    String helloWorldReversed = parser.parseExpression(\"#reverseString('hello')\").getValue(context, String.class);\n                    context2.setBeanResolver(new MyBeanResolver());\n                    Object bean = parser.parseExpression(\"@foo\").getValue(context);\n\n                    /*** ternary Operator (If - Then - Else) ***/\n                    String falseString = parser.parseExpression(\"false ? 'trueExp' : 'falseExp'\").getValue(String.class);\n\n                    /*** collection Selection ***/\n                    List<Inventor> list = (List<Inventor>) parser.parseExpression(\"Members.?[Nationality == 'Serbian']\").getValue(context2);\n                    Map newMap = (Map) parser.parseExpression(\"map.?[value<27]\").getValue();\n                    List placesOfBirth = (List) parser.parseExpression(\"Members.![placeOfBirth.city]\");\n\n\n                    /*** expression templating ***/\n                    String randomPhrase = parser.parseExpression(\"random number is #{T(java.lang.Math).random()}\", new TemplateParserContext()).getValue(String.class);\n                `}\n            </Java>\n        </Frame>\n    )\n}\n\nfunction getProfile() {\n    return (\n        <Frame title={'Profile selection'}>\n            <InfoIcon>\n                <Java>\n                    {`\n                    // To check a property existence:\n                    context.getEnvironment().containsProperty(\"who_is_your_daddy\");\n                    \n                    //all environments are not available in spring and some are provide by jvm\n                    System.getProperty(\"propertyName\");\n                    `}\n                </Java>\n                <br/>\n                To change profile at runtime:\n                <Red>!Not tested!</Red>\n                <Bash>{'java -Dspring.profiles.active.pro -jar myJar.jar'}</Bash>\n            </InfoIcon>\n            We can switch to another config via profile.<br/>\n            First of, mark all classes belong to a profile\n            <Java description={'source code'}>\n                {`\n                @Profile(\"develop\",\"!dev\")//! => active profile\n                public class Bean1 {\n                \n                    //access your desired environment\n                    @Autowired\n                    public EnvironmentConfiguration env;\n                }`}\n            </Java>\n            In xml, we have to assign a file for a profile:\n            <Xml>\n                {`\n                <beans\n                    ...\n                    profile=\"develop\">\n                ...\n                </beans>`}\n            </Xml>\n            <HorizontalLine/>\n            Now, select a profile:\n            <Xml description={'pom.xml'}>\n                {`\n                <profiles>\n                    <profile>\n                        <id>develop</id>\n                        <activation>\n                            <activeByDefault>true</activeByDefault>\n                        </activation>\n                    </profile>\n                </profiles>`}\n            </Xml>\n            <HorizontalLine/>\n            To catch active profile:\n            <Java>\n                {`\n                @Component\n                public class Bean1 {\n                    @Autowired\n                    public Environment env;\n                \n                    public void loopThroughActiveProfiles() {\n                        Arrays.stream(env.getActiveProfiles())\n                            .forEach(System.out::println);\n                    }\n                    \n                    @Value(\"#\\{$\\{spring.profiles.active}}\")\n                    String activeProfile;\n                \n                    @Autowired\n                    private ConfigurableEnvironment cfgEnv;\n                    \n                    public void setActiveProfile(String pName) {\n                        //other information is available here\n                        cfgEnv.setActiveProfiles(\"develop\");\n                    }\n                }`}\n            </Java>\n            <div style={{width: '22rem'}}>\n                <Highlight>You have to follow <Bold>profile</Bold> structure in the whole of project when you mention\n                    it.</Highlight>\n            </div>\n        </Frame>\n    )\n}\n\nfunction getEvent() {\n    return (\n        <Frame title={'Events'}>\n            <InfoIcon>\n                <p>\n                    In every event 3 parties are\n                    involved: <Bold>Publisher</Bold>, <Bold>Listener</Bold> and <Bold>EvnetObject</Bold>\n                </p>\n                <p>\n                    If event extends <Bold>ApplicationEvent</Bold>, it is called <Blue>standard evnet</Blue> and if it\n                    implements <Bold>EvnetListener</Bold>, it is called <Blue>custom</Blue> evnet.<br/>\n                </p>\n                <p>\n                    There are limited standard evnets:<br/>\n                    <Bullet title={'ContextStartedEvent'}>When the ApplicationContext is started using the start()\n                        method on the ConfigurableApplicationContext interface. You can poll your database or you can\n                        restart any stopped application after receiving this event.</Bullet>\n                    <Bullet title={'ContextStopedEvnet'}>When the ApplicationContext is stopped using the stop() method\n                        on the ConfigurableApplicationContext interface. You can do required housekeep work after\n                        receiving this event.</Bullet>\n                    <Bullet title={'ContextClosedEvent'}>When the ApplicationContext is closed using the close() method\n                        on the ConfigurableApplicationContext interface.</Bullet>\n                    <Bullet title={'ContextRefreshedEvnet'}>When the ApplicationContext is either initialized or\n                        refreshed. This can also be raised using the refresh() method on the\n                        ConfigurableApplicationContext interface.</Bullet>\n                    <Bullet title={'RequestHandledEvnet'}>This is a web-specific event telling all beans that an HTTP\n                        request has been serviced.</Bullet>\n                    <Bullet title={'ServletRequestHandledEvent'}>This one is child of the previous one and refers those\n                        requests from servlet</Bullet>\n                </p>\n            </InfoIcon>\n            To raise a standard event:\n            <Java>\n                {`\n                @Component\n                public class RegisterPersonEventListener implements ApplicationListener<ContextStartedEvent> {\n                \n                    @Override\n                    public void onApplicationEvent(ContextStartedEvent contextStartedEvent) {\n                        System.out.println(\"context started\");\n                    }\n                }\n                \n                //usage>>>\n                ConfigurableApplicationContext ctx= (ConfigurableApplicationContext) ContextProvider.getAnnotaionContext();\n                ctx.start();\n                \n                //output>>>\n                context started\n                `}\n            </Java>\n            To raise custom event:\n            <Java>\n                {`\n                // event object \n                public class RegisterPersonEvent extends ApplicationEvent {\n                    public RegisterPersonEvent(Object source) {\n                        super(source);\n                    }\n                }\n                \n                // publisher object\n                @Component\n                public class RegisterPersonEventPublisher implements ApplicationEventPublisherAware {\n                \n                    private ApplicationEventPublisher publisher;\n                \n                    @Override\n                    public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {\n                        this.publisher = applicationEventPublisher;\n                    }\n                \n                    public void send() {\n                        publisher.publishEvent(new RegisterPersonEvent(this));\n                    }\n                }\n                \n                // listener object\n                @Component\n                public class RegisterPersonEventListener implements ApplicationListener<RegisterPersonEvent> {\n                \n                    @Override\n                    public void onApplicationEvent(RegisterPersonEvent registerPersonEvent) {\n                        System.out.println(\"register person raised\");\n                    }\n                }\n                `}\n            </Java>\n            <Red>This event mechanism is synched and used has to wait till the event process finish.</Red><br/>\n            To come over this issue, we should go to asynch event mechanism:<br/>\n            <Java>\n                {`\n                //by annotation\n                @EnableAsync\n                \n                //by java\n                public class MyExecutor implements AsyncConfigurer {\n                    @Override\n                    public Executor getAsyncExecutor() {\n                        return new ThreadPoolTaskExecutor();\n                    }\n                }\n                `}\n            </Java>\n            <Xml>{'<task:annotation-driven executor=\"anExecutor\"/>'}</Xml><br/>\n        </Frame>\n    )\n}\n\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n// function get() {\n//     return (\n//         <Frame title={''}></Frame>\n//     )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/mvc/mvc-cheats.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/boot/boot-cheats.js",[],"/media/arash/usb_stick/my-cheat-book2/src/contents/spring5/theory/theory.js",[],"/media/arash/usb_stick/my-cheat-book2/src/components/components.js",["123"],"import React from \"react\";\n\nexport function Title(props) {\n    return <span className={'title'}>{props.children}</span>\n}\n\nexport function Header(props) {\n    return <span className={'header blue'}>{props.children}</span>\n}\n\nexport function Blue(props) {\n    return <span className={'blue'}>{props.children}</span>\n}\n\nexport function Red(props) {\n    return <span className={'red'}>{props.children}</span>\n}\n\nexport function Purple(props) {\n    return <span className={'purple'}>{props.children}</span>\n}\n\nexport function Important(props) {\n    return <span className={'blue'}>! {props.children}</span>\n}\n\nexport function Highlight(props) {\n    return <span className={'highlight'}>{props.children}</span>\n}\n\nexport function HighlightBlue(props) {\n    return <span className={'important highlight'}>{props.children}</span>\n}\n\nexport function FlexRow(props) {\n    return <div className={'flex-row'}>{props.children}</div>\n}\n\nexport function FloatHolder(props) {\n    return <div className={'float-holder ' + props.className} style={props.style}>{props.children}</div>\n}\n\nexport function Bold(props) {\n    return <span className={'bold'}>{props.children}</span>\n}\n\nexport function BlueBold(props) {\n    return <span className={'bold blue'}>{props.children}</span>\n}\n\n/**\n * <Bullet level={1..n} title={}>body</Bullet>\n * @param props level:number, title:string\n * @returns {*}\n * @constructor\n */\nexport function Bullet(props) {\n    let indent = 0;\n    if (props.level)\n        indent = props.level * 10 + 'px';\n    return (\n        <div style={{marginLeft: indent}} className={'bullet'}>\n            <span className={'blue bold bullet-first-child'}>{props.title}</span>\n            <div className={'inline'}>{props.children}</div>\n        </div>\n    )\n}\n\nexport function LocationFinder() {\n    const [location, setLocation] = React.useState([]);\n    const r = React.useRef();\n    const handleOnClick = e => {\n        let x = e.clientX;\n        let y = e.clientY;\n        let rect = r.current.getBoundingClientRect();\n        let item = <span\n            key={location.length}>{`${location.length + 1}:\\t( ${x - rect.left} , ${y - rect.top} )`}</span>;\n        setLocation(location.concat(item));\n        console.log(item);\n    };\n\n    const handleRemove = e => {\n        e.stopPropagation();\n        setLocation(location.filter((v, i) => i != location.length - 1));\n    };\n\n    return (\n        <div className={'location-finder'} onClick={e => handleOnClick(e)} ref={r}>\n            <button style={{position: 'absolute', left: '0', top: '0', fontSize: '8px'}}\n                    onClick={e => handleRemove(e)}>{`<-`}</button>\n            {location}\n        </div>\n    )\n}\n\nexport function HorizontalLine() {\n    return <div className={'horizontal-line'}/>\n}\n\nexport function VerticalLine() {\n    return <div className={'vertical-line'}/>\n}","/media/arash/usb_stick/my-cheat-book2/src/components/bubble.js",[],"/media/arash/usb_stick/my-cheat-book2/src/components/float.js",[],{"ruleId":"124","severity":1,"message":"125","line":12,"column":10,"nodeType":"126","messageId":"127","endLine":12,"endColumn":19},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"124","severity":1,"message":"132","line":4,"column":9,"nodeType":"126","messageId":"127","endLine":4,"endColumn":19},{"ruleId":"124","severity":1,"message":"132","line":4,"column":9,"nodeType":"126","messageId":"127","endLine":4,"endColumn":19},{"ruleId":"133","severity":1,"message":"134","line":91,"column":28,"nodeType":"135","messageId":"136","endLine":91,"endColumn":29,"suggestions":"137"},{"ruleId":"133","severity":1,"message":"134","line":92,"column":31,"nodeType":"135","messageId":"136","endLine":92,"endColumn":32,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":77,"column":45,"nodeType":"141","endLine":77,"endColumn":94},{"ruleId":"133","severity":1,"message":"142","line":1704,"column":30,"nodeType":"135","messageId":"136","endLine":1704,"endColumn":31,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":84,"column":49,"nodeType":"146","messageId":"147","endLine":84,"endColumn":51},"no-unused-vars","'getScript' is defined but never used.","Identifier","unusedVar","no-native-reassign",["148"],"no-negated-in-lhs",["149"],"'JavaCheats' is defined but never used.","no-useless-escape","Unnecessary escape character: \\-.","TemplateElement","unnecessaryEscape",["150","151"],["152","153"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","Unnecessary escape character: \\{.",["154","155"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"messageId":"156","fix":"157","desc":"158"},{"messageId":"159","fix":"160","desc":"161"},{"messageId":"156","fix":"162","desc":"158"},{"messageId":"159","fix":"163","desc":"161"},{"messageId":"156","fix":"164","desc":"158"},{"messageId":"159","fix":"165","desc":"161"},"removeEscape",{"range":"166","text":"167"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"168","text":"169"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"170","text":"167"},{"range":"171","text":"169"},{"range":"172","text":"167"},{"range":"173","text":"169"},[4217,4218],"",[4217,4217],"\\",[4296,4297],[4296,4296],[71446,71447],[71446,71446]]